diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/doc/ncs_links.rst gitlab_sidewalk/doc/ncs_links.rst
--- sidewalk/doc/ncs_links.rst	2023-11-09 11:04:08.268734741 -0800
+++ gitlab_sidewalk/doc/ncs_links.rst	2023-11-01 08:09:54.855151527 -0700
@@ -1,16 +1,16 @@
-.. _nRF Connect SDK: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/index.html
-.. _nrf52840 DK: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/config_and_build/board_support.html#boards-included-in-sdk-zephyr
-.. _nrf5340 DK: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/config_and_build/board_support.html#boards-included-in-sdk-zephyr
-.. _Getting started with nRF52 Series: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/working_with_nrf/nrf52/gs.html
-.. _Getting started with nRF53 Series: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/working_with_nrf/nrf53/nrf5340_gs.html
-.. _Zephyr toolchain: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/gs_installing.html#install-a-toolchain
-.. _Installing automatically: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/gs_assistant.html#installing-automatically
-.. _Installing manually: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/gs_installing.html#install-the-required-tools
-.. _nRF Connect SDK Getting started: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/getting_started.html
-.. _nRF52840dk_nrf52840: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/zephyr/boards/arm/nrf52840dk_nrf52840/doc/index.html
-.. _nrf5340dk_nrf5340: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/zephyr/boards/arm/nrf5340dk_nrf5340/doc/index.html#nrf5340dk-nrf5340
-.. _Building and programming an application: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/getting_started/programming.html#gs-programming
-.. _Testing and debugging an application: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/getting_started/testing.html#gs-testing
-.. _Bootloader and DFU solutions for NCS: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/app_bootloaders.html
-.. _Zephyr SMP Server: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/zephyr/services/device_mgmt/ota.html#smp-server
-.. _NCS testing applications: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0-rc1/nrf/gs_testing.html
+.. _nRF Connect SDK: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/index.html
+.. _nrf52840 DK: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/config_and_build/board_support.html#boards-included-in-sdk-zephyr
+.. _nrf5340 DK: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/config_and_build/board_support.html#boards-included-in-sdk-zephyr
+.. _Getting started with nRF52 Series: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/working_with_nrf/nrf52/gs.html
+.. _Getting started with nRF53 Series: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/working_with_nrf/nrf53/nrf5340_gs.html
+.. _Zephyr toolchain: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/gs_installing.html#install-a-toolchain
+.. _Installing automatically: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/gs_assistant.html#installing-automatically
+.. _Installing manually: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/gs_installing.html#install-the-required-tools
+.. _nRF Connect SDK Getting started: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/getting_started.html
+.. _nRF52840dk_nrf52840: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/zephyr/boards/arm/nrf52840dk_nrf52840/doc/index.html
+.. _nrf5340dk_nrf5340: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/zephyr/boards/arm/nrf5340dk_nrf5340/doc/index.html#nrf5340dk-nrf5340
+.. _Building and programming an application: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/getting_started/programming.html#gs-programming
+.. _Testing and debugging an application: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/getting_started/testing.html#gs-testing
+.. _Bootloader and DFU solutions for NCS: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/app_bootloaders.html
+.. _Zephyr SMP Server: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/zephyr/services/device_mgmt/ota.html#smp-server
+.. _NCS testing applications: https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.5.0/nrf/gs_testing.html
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/doc/setting_up_sidewalk_environment/requirements.rst gitlab_sidewalk/doc/setting_up_sidewalk_environment/requirements.rst
--- sidewalk/doc/setting_up_sidewalk_environment/requirements.rst	2023-11-09 11:04:08.268734741 -0800
+++ gitlab_sidewalk/doc/setting_up_sidewalk_environment/requirements.rst	2023-11-01 08:09:54.855151527 -0700
@@ -51,64 +51,61 @@
 
 RAM and flash memory requirement values differ depending on the DK and programmed sample.
 
+All values are provided in kilobytes (KB).
+
 .. tabs::
 
    .. tab:: nRF52840 DK
 
       The following table lists memory requirements for samples running on the `nRF52840 DK`_.
 
-      All values are provided in kilobytes (KB).
-
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
       | Sample                                                            |   MCUboot ROM |   Application ROM |   Sidewalk Settings |   Total ROM |   Total RAM |
       +===================================================================+===============+===================+=====================+=============+=============+
-      | :ref:`Sensor monitoring <sensor_monitoring>` (Bluetooth LE Debug) |             0 |               382 |                  32 |         414 |          78 |
+      | :ref:`Sensor monitoring <sensor_monitoring>` (Bluetooth LE Debug) |             0 |               371 |                  32 |         403 |          78 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Sensor monitoring <sensor_monitoring>` (FSK Debug)          |             0 |               520 |                  32 |         552 |          99 |
+      | :ref:`Sensor monitoring <sensor_monitoring>` (FSK Debug)          |             0 |               530 |                  32 |         562 |          99 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Sensor monitoring <sensor_monitoring>` (LoRa Debug)         |             0 |               480 |                  32 |         512 |          98 |
+      | :ref:`Sensor monitoring <sensor_monitoring>` (LoRa Debug)         |             0 |               470 |                  32 |         502 |          98 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (FSK Debug)             |            36 |               532 |                  28 |         596 |         109 |
+      | :ref:`Template sub-GHz <template_subghz>` (FSK Debug)             |            36 |               547 |                  28 |         611 |         109 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (FSK Release)           |            36 |               468 |                  28 |         532 |         105 |
+      | :ref:`Template sub-GHz <template_subghz>` (FSK Release)           |            36 |               479 |                  28 |         543 |         105 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (LoRa Debug)            |            36 |               494 |                  28 |         558 |         108 |
+      | :ref:`Template sub-GHz <template_subghz>` (LoRa Debug)            |            36 |               488 |                  28 |         552 |         108 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (LoRa Release)          |            36 |               422 |                  28 |         486 |         104 |
+      | :ref:`Template sub-GHz <template_subghz>` (LoRa Release)          |            36 |               413 |                  28 |         477 |         104 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template Bluetooth LE <template_ble>` (Debug)               |            36 |               395 |                  28 |         459 |          90 |
+      | :ref:`Template Bluetooth LE <template_ble>` (Debug)               |            36 |               384 |                  28 |         448 |          90 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template Bluetooth LE <template_ble>` (Release)             |            36 |               329 |                  28 |         393 |          86 |
+      | :ref:`Template Bluetooth LE <template_ble>` (Release)             |            36 |               314 |                  28 |         378 |          86 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
 
    .. tab:: nRF5340 DK
 
       The following table lists memory requirements for samples running on the `nRF5340 DK`_.
 
-      All values are provided in kilobytes (KB).
-
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
       | Sample                                                            |   MCUboot ROM |   Application ROM |   Sidewalk Settings |   Total ROM |   Total RAM |
       +===================================================================+===============+===================+=====================+=============+=============+
-      | :ref:`Sensor monitoring <sensor_monitoring>` (Bluetooth LE Debug) |             0 |               325 |                  32 |         357 |          68 |
+      | :ref:`Sensor monitoring <sensor_monitoring>` (Bluetooth LE Debug) |             0 |               314 |                  32 |         346 |          68 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Sensor monitoring <sensor_monitoring>` (FSK Debug)          |             0 |               457 |                  32 |         489 |          89 |
+      | :ref:`Sensor monitoring <sensor_monitoring>` (FSK Debug)          |             0 |               463 |                  32 |         495 |          89 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Sensor monitoring <sensor_monitoring>` (LoRa Debug)         |             0 |               420 |                  32 |         452 |          88 |
+      | :ref:`Sensor monitoring <sensor_monitoring>` (LoRa Debug)         |             0 |               411 |                  32 |         443 |          88 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (FSK Debug)             |            56 |               469 |                  28 |         553 |          99 |
+      | :ref:`Template sub-GHz <template_subghz>` (FSK Debug)             |            40 |               479 |                  28 |         547 |          99 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (FSK Release)           |            56 |               404 |                  28 |         488 |          95 |
+      | :ref:`Template sub-GHz <template_subghz>` (FSK Release)           |            40 |               410 |                  28 |         478 |          95 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (LoRa Debug)            |            56 |               434 |                  28 |         518 |          98 |
+      | :ref:`Template sub-GHz <template_subghz>` (LoRa Debug)            |            40 |               428 |                  28 |         496 |          98 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template sub-GHz <template_subghz>` (LoRa Release)          |            56 |               361 |                  28 |         445 |          94 |
+      | :ref:`Template sub-GHz <template_subghz>` (LoRa Release)          |            40 |               352 |                  28 |         420 |          94 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template Bluetooth LE <template_ble>` (Debug)               |            56 |               339 |                  28 |         423 |          81 |
+      | :ref:`Template Bluetooth LE <template_ble>` (Debug)               |            40 |               333 |                  28 |         401 |          81 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-      | :ref:`Template Bluetooth LE <template_ble>` (Release)             |            56 |               270 |                  28 |         354 |          77 |
+      | :ref:`Template Bluetooth LE <template_ble>` (Release)             |            40 |               260 |                  28 |         328 |          77 |
       +-------------------------------------------------------------------+---------------+-------------------+---------------------+-------------+-------------+
-
 .. include:: ../ncs_links.rst
 
 .. _Amazon developer account: https://developer.amazon.com/dashboard
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/.gitignore gitlab_sidewalk/.gitignore
--- sidewalk/.gitignore	2023-11-09 11:04:08.240734203 -0800
+++ gitlab_sidewalk/.gitignore	2023-11-01 08:09:54.839151220 -0700
@@ -45,3 +45,4 @@
 YAMLLint.txt
 Gitlint.txt
 compliance.xml
+almanac.h
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/internal_west.yml gitlab_sidewalk/internal_west.yml
--- sidewalk/internal_west.yml	2023-11-09 11:04:08.268734741 -0800
+++ gitlab_sidewalk/internal_west.yml	2023-11-01 08:09:54.855151527 -0700
@@ -13,7 +13,7 @@
     - name: nrf
       repo-path: sdk-nrf
       path: nrf
-      revision: b6848c79ae19a4e6f114939dd02561316704743e
+      revision: 1fae141fc6713dd331b797fc96c90dc84552242d
       import: true
 
   # West-related configuration for the sidewalk repository.
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/Kconfig gitlab_sidewalk/Kconfig
--- sidewalk/Kconfig	2023-11-09 11:04:08.240734203 -0800
+++ gitlab_sidewalk/Kconfig	2023-11-01 08:09:54.839151220 -0700
@@ -61,6 +61,11 @@
 	bool "Enable sidewalk CLI"
 	imply SHELL
 
+# CLI
+config LR1110_CLI
+	bool "Enable LR1110 CLI"
+	imply SHELL
+
 # Log
 config SIDEWALK_LOG_MSG_LENGTH_MAX
 	int "Log message max length"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/CMakeLists.txt gitlab_sidewalk/lib/lora_fsk/CMakeLists.txt
--- sidewalk/lib/lora_fsk/CMakeLists.txt	2023-11-09 11:04:08.272734817 -0800
+++ gitlab_sidewalk/lib/lora_fsk/CMakeLists.txt	2023-11-09 10:32:25.980380696 -0800
@@ -13,4 +13,39 @@
 	${LIB_GCC}
 )
 
-zephyr_link_libraries_ifndef(CONFIG_SIDEWALK_PAL_RADIO_SOURCE ${SID_LIB_DIR}/libsid_pal_radio_sx126x_impl.a)
+if(DEFINED RADIO)
+	if(${RADIO} STREQUAL "LR1110_SRC" OR ${RADIO} STREQUAL "LR1121_SRC")
+		add_subdirectory(lr11xx_private)
+		zephyr_compile_definitions(LR11xx_SRC)
+	elseif(${RADIO} STREQUAL "SX126x_SRC")
+		add_subdirectory(sx126x)
+	elseif(${RADIO} STREQUAL "LR11xx" OR ${RADIO} STREQUAL "LR1110" OR ${RADIO} STREQUAL "LR1121" )
+		set(SMTC_LIB_NAME libsmtc_lr11xx_swdr001_impl.a)
+		zephyr_include_directories(lr11xx/include)
+		if(DEFINED CONFIG_LOG)
+			if(DEFINED CONFIG_LOG_RUNTIME_FILTERING)
+				set(RADIO_LIB_NAME libsid_pal_radio_lr11xx_impl_lrf.a)
+			else()
+				set(RADIO_LIB_NAME libsid_pal_radio_lr11xx_impl.a)
+			endif()
+		else()
+			set(RADIO_LIB_NAME libsid_pal_radio_lr11xx_impl_nolog.a)
+		endif()
+		zephyr_link_libraries_ifndef(CONFIG_SIDEWALK_PAL_RADIO_SOURCE
+			${SID_LIB_DIR}/${SMTC_LIB_NAME}
+			${SID_LIB_DIR}/${RADIO_LIB_NAME}
+			${SID_LIB_DIR}/${SMTC_LIB_NAME}
+		)
+		if(${RADIO} STREQUAL "LR1110")
+			zephyr_compile_definitions(LR1110 LR11xx)
+		elseif(${RADIO} STREQUAL "LR1121")
+			zephyr_compile_definitions(LR1121 LR11xx)
+		endif()
+	else()
+		message(SEND_ERROR "RADIO isnt LR1110 or LR11210 or SX126x --> ${RADIO}")
+	endif()
+else()
+	zephyr_link_libraries_ifndef(CONFIG_SIDEWALK_PAL_RADIO_SOURCE ${SID_LIB_DIR}/libsid_pal_radio_sx126x_impl.a)
+endif()
+
+
Binary files sidewalk/lib/lora_fsk/.CMakeLists.txt.swp and gitlab_sidewalk/lib/lora_fsk/.CMakeLists.txt.swp differ
Binary files sidewalk/lib/lora_fsk/libsid_pal_radio_lr11xx_impl.a and gitlab_sidewalk/lib/lora_fsk/libsid_pal_radio_lr11xx_impl.a differ
Binary files sidewalk/lib/lora_fsk/libsid_pal_radio_lr11xx_impl_lrf.a and gitlab_sidewalk/lib/lora_fsk/libsid_pal_radio_lr11xx_impl_lrf.a differ
Binary files sidewalk/lib/lora_fsk/libsid_pal_radio_lr11xx_impl_nolog.a and gitlab_sidewalk/lib/lora_fsk/libsid_pal_radio_lr11xx_impl_nolog.a differ
Binary files sidewalk/lib/lora_fsk/libsmtc_lr11xx_swdr001_impl.a and gitlab_sidewalk/lib/lora_fsk/libsmtc_lr11xx_swdr001_impl.a differ
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/halo_lr11xx_radio.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/halo_lr11xx_radio.h
--- sidewalk/lib/lora_fsk/lr11xx/include/halo_lr11xx_radio.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/halo_lr11xx_radio.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * This file has private functions needed by the driver
+ */
+
+#ifndef HALO_LR1110_RADIO_H
+#define HALO_LR1110_RADIO_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <lr11xx_config.h>
+#include "lr11xx_system.h"
+
+typedef struct
+{
+    lr11xx_wifi_channel_mask_t channel_mask;
+    uint8_t                    max_result;
+} wifi_configuration_scan_base_t;
+
+typedef struct
+{
+    wifi_configuration_scan_base_t base;
+    lr11xx_wifi_signal_type_scan_t signal_type;
+    lr11xx_wifi_mode_t             scan_mode;
+    uint8_t                        nb_scan_per_channel;
+    uint16_t                       timeout_per_scan;
+    bool                           abort_on_timeout;
+} wifi_configuration_scan_t;
+
+void* lr11xx_get_drv_ctx(void);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* HALO_LR1110_RADIO_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/lr11xx_config.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/lr11xx_config.h
--- sidewalk/lib/lora_fsk/lr11xx/include/lr11xx_config.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/lr11xx_config.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,202 @@
+/*
+ * Copyright (c) 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * This file is exposed to each procuct configuration to customize the driver behavior
+ */
+
+#ifndef LR11XX_CONFIG_H
+#define LR11XX_CONFIG_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "lr11xx_gnss.h"
+#include "lr11xx_radio_types.h"
+#include "lr11xx_system_types.h"
+#include "lr11xx_wifi.h"
+
+#include <sid_time_types.h>
+#include <semtech_radio_ifc.h>
+#include <sid_pal_radio_ifc.h>
+#include <sid_pal_serial_bus_ifc.h>
+
+#include <stdbool.h>
+#include <stdint.h>
+#include <stddef.h>
+#include <time.h>
+
+#define HALO_GPIO_NOT_CONNECTED                 128
+
+#define RADIO_REGION_NA SID_PAL_RADIO_RC_NA
+#define RADIO_REGION_EU SID_PAL_RADIO_RC_EU
+#define RADIO_REGION_NONE SID_PAL_RADIO_RC_NONE
+
+typedef struct radio_lr11xx_pa_cfg {
+    lr11xx_radio_pa_cfg_t    pa_cfg;
+    lr11xx_radio_ramp_time_t ramp_time;
+    int8_t                   tx_power_in_dbm;
+    bool                     enable_ext_pa;
+} radio_lr11xx_pa_cfg_t;
+
+typedef struct radio_lr11xx_regional_param {
+    uint8_t param_region;
+    int8_t max_tx_power[SID_PAL_RADIO_DATA_RATE_MAX_NUM];
+    int8_t cca_level_adjust[SID_PAL_RADIO_DATA_RATE_MAX_NUM];
+    int16_t ant_dbi;
+} radio_lr11xx_regional_param_t;
+
+typedef struct radio_lr11xx_regional_config {
+   uint8_t radio_region;
+   uint8_t reg_param_table_size;
+   const radio_lr11xx_regional_param_t *reg_param_table;
+} radio_lr11xx_regional_config_t;
+
+typedef enum {
+    LR11XX_TCXO_CTRL_NONE = 0,
+    LR11XX_TCXO_CTRL_VDD  = 1,
+    LR11XX_TCXO_CTRL_DIO3 = 2
+} lr11xx_tcxo_ctrl_t;
+
+typedef int32_t (*radio_lr11xx_get_pa_cfg_t)(int8_t tx_power, radio_lr11xx_pa_cfg_t *pa_cfg);
+
+#define GNSS_RESULT_SIZE		300
+typedef struct lr11xx_gnss_result {
+	uint8_t buffer[GNSS_RESULT_SIZE];
+	uint16_t length;
+} lr11xx_gnss_result_t;
+
+typedef struct {
+    lr11xx_system_reg_mode_t                regulator_mode;
+    bool                                    rx_boost;
+    int8_t                                  lna_gain;
+    const radio_lr11xx_get_pa_cfg_t         pa_cfg_callback;
+    const struct sid_pal_serial_bus_factory *bus_factory;
+
+    struct {
+        uint32_t                            power;
+        uint32_t                            int1;
+        uint32_t                            radio_busy;
+        uint32_t                            rf_sw_ena;
+        uint32_t                            tx_bypass;
+        uint32_t                            txrx;
+        uint32_t                            led_rx;
+        uint32_t                            led_tx;
+        uint32_t                            led_sniff;
+        uint32_t                            gnss_lna;
+    }                                       gpios;
+
+    uint16_t                                wakeup_delay_us;
+
+    lr11xx_system_lfclk_cfg_t               lfclock_cfg;
+    struct {
+        lr11xx_tcxo_ctrl_t                  ctrl;
+        lr11xx_system_tcxo_supply_voltage_t tune;
+        uint32_t                            timeout;
+    }                                       tcxo_config;
+
+    lr11xx_system_rfswitch_cfg_t            rfswitch;
+
+    int8_t                                  rssi_no_signal_offset;
+
+    struct {
+        void                                (*pre_hook)(void*arg);
+        void                                (*post_hook)(void*arg);
+        void                                *arg;
+    }                                       wifi_scan;
+
+    struct {
+        void                                (*pre_hook)(void*arg);
+        void                                (*post_hook)(lr11xx_gnss_result_t *arg);
+        void                                *arg;
+    }                                       gnss_scan;
+
+    struct sid_pal_serial_bus_client        bus_selector;
+
+    struct {
+        /* It was found that during sleep IRQ line can change it's state. This options masks
+           interrupts during sleep */
+        bool                                irq_noise_during_sleep;
+        /* It was found that after wakeup from sleep LBD IRQ is active. This prevents further
+           normal operations. This option will enable clear of this IRQ after wakeup */
+        bool                                lbd_clear_on_wakeup;
+    }                                       mitigations;
+
+    struct {
+        uint8_t *p;
+        size_t   size;
+    } internal_buffer;
+
+    sid_pal_radio_state_transition_timings_t state_timings;
+    radio_lr11xx_regional_config_t          regional_config;
+} radio_lr11xx_device_config_t;
+
+/**
+ * Configuration for GPS scan function
+ */
+typedef struct {
+    lr11xx_gnss_search_mode_t effort_mode;
+    uint8_t                   gnss_input_paramaters;
+    lr11xx_gnss_scan_mode_t   mode;
+    sid_time_t                timeout;
+    lr11xx_gnss_date_t        date;
+} lr11xx_gnss_scan_config_t;
+
+typedef struct {
+    lr11xx_wifi_signal_type_scan_t type;
+    lr11xx_wifi_mode_t             mode;
+    lr11xx_wifi_channel_mask_t     mask;
+    uint32_t                       timeout_ms;     /* Total scan time*/
+    uint8_t                        channel_factor; /* Nunber of scan attempts per channel */
+} lr11xx_wifi_scan_config_t;
+
+/**
+ * Callback to notify when radio is about to switch to sleep state
+ * The callback is called in software irq context. The user has to
+ * switch context from software irq in this callback.
+ */
+typedef void (*sid_pal_radio_sleep_start_notify_handler_t)(struct sid_timespec * const wakeup_time);
+
+/** @brief Set Semtech radio config parameters
+ *
+ *  @param pointer to lr11xx radio device config
+ */
+void set_radio_lr11xx_device_config(const radio_lr11xx_device_config_t *cfg);
+
+/** @brief Set callback to trigger external action when radio is going to sleep.
+ *
+ *  @param[in]   sid_pal_radio_action_in_sleep_handler_t callback to handle
+ *  entering radio sleep mode. Accepts NULL if no action is required.
+ *
+ *  @retval  On success RADIO_ERROR_NONE.
+ */
+int32_t sid_hal_set_sleep_start_notify_cb(sid_pal_radio_sleep_start_notify_handler_t callback);
+
+/** @brief Get tx power range the semtech chip supports
+ *  This API is used by diagnostics firmware only.
+ *  This is used to determine the max tx power the chip supports so that the diag
+ *  firmware will not exceed the max tx power setting the chip supports
+ *
+ *  @param  max tx power to be populated.
+ *  @param  min tx power to be populated.
+ *  @return On success RADIO_ERROR_NONE, on error a negative number is returned
+ */
+int32_t get_lr11xx_tx_power_range(int8_t *max_tx_power, int8_t *min_tx_power);
+
+/**
+ * @brief Start GNSS scan and get back results
+ * This API is used for diagnostic only.
+ *
+ *  @param  config    Config for GNSS scan.
+ *  @param  results   Results to populate.
+ *  @param  num       Max number of results \ returned amount of results
+ *  @param  error     Error description (if any)
+ *  @return On success RADIO_ERROR_NONE, on error a negative number is returned
+ */
+int32_t lr11xx_gnss_scan(const lr11xx_gnss_scan_config_t *config, lr11xx_gnss_detected_satellite_t *results, uint8_t *num, const char **error);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* HALO_DEV_RADIO_LR11XX_INCLUDE_EXPORT_DEV_RADIO_LR11XX_CONFIG_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader.h	2023-11-01 14:13:17.504913195 -0700
@@ -0,0 +1,208 @@
+/*!
+ * @file      lr11xx_bootloader.h
+ *
+ * @brief     Bootloader driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_BOOTLOADER_H
+#define LR11XX_BOOTLOADER_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr11xx_bootloader_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+typedef uint32_t lr11xx_bootloader_irq_mask_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Return the status registers and interrupt flags
+ *
+ * @remark To simplify system integration, this function does not actually execute the GetStatus command, which would
+ * require bidirectional SPI communication. It obtains the stat1, stat2, and irq_status values by performing an ordinary
+ * SPI read (which is required to send null/NOP bytes on the MOSI line). This is possible since the LR11XX returns these
+ * values automatically whenever a read that does not directly follow a response-carrying command is performed. Unlike
+ * with the GetStatus command, however, the reset status information is NOT cleared by this command. The function @ref
+ * lr11xx_bootloader_clear_reset_status_info may be used for this purpose when necessary.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] stat1 Content of status register 1
+ * @param [out] stat2 Content of status register 2
+ * @param [out] irq_status Interrupt flags
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_get_status( const void* context, lr11xx_bootloader_stat1_t* stat1,
+                                              lr11xx_bootloader_stat2_t*    stat2,
+                                              lr11xx_bootloader_irq_mask_t* irq_status );
+
+/*!
+ * @brief Clear the reset status information stored in stat2
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_clear_reset_status_info( const void* context );
+
+/*!
+ * @brief Return the version of the system (hardware and software)
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] version Pointer to the structure holding the system version
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_get_version( const void* context, lr11xx_bootloader_version_t* version );
+
+/*!
+ * @brief Erase the whole flash memory of the chip
+ *
+ * This function shall be called before any attempt to write a new firmware in flash memory
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_erase_flash( const void* context );
+
+/*!
+ * @brief Write encrypted data in program flash memory of the chip
+ *
+ * This function shall be used when updating the encrypted flash content of the LR11XX.
+ * The encrypted flash payload to transfer shall be represented as an array of words (i.e. 4-byte values).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] offset The offset from start register of flash
+ * @param [in] buffer Buffer holding the encrypted content. Its size in words must be at least length
+ * @param [in] length Number of words (i.e. 4 bytes) in the buffer to transfer
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_write_flash_encrypted( const void* context, const uint32_t offset,
+                                                         const uint32_t* buffer, const uint8_t length );
+
+/*!
+ * @brief Write encrypted data in program flash memory of the chip
+ *
+ * This function shall be used when updating the encrypted flash content of the LR11XX.
+ * The encrypted flash payload to transfer shall be represented as an array of words (ie 4-byte values).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] offset The offset from start register of flash
+ * @param [in] buffer Buffer holding the encrypted content. Its size in words must be at least length
+ * @param [in] length Number of words (i.e. 4 bytes) in the buffer to transfer
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_write_flash_encrypted_full( const void* context, const uint32_t offset,
+                                                              const uint32_t* buffer, const uint32_t length );
+
+/*!
+ * @brief Software reset of the chip.
+ *
+ * This method should be used to reboot the chip in a specified mode.
+ * Rebooting in flash mode presumes that the content in flash memory is not corrupted (i.e. the integrity check
+ * performed by the bootloader before executing the first instruction in flash is OK).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] stay_in_bootloader Selector to stay in bootloader or execute flash code after reboot. If true, the
+ * bootloader will not execute the flash code but activate SPI interface to allow firmware upgrade
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_reboot( const void* context, const bool stay_in_bootloader );
+
+/*!
+ * @brief Returns the 4-byte PIN which can be used to claim a device on cloud services.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] pin Pointer to the array to be populated with the PIN
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_read_pin( const void* context, lr11xx_bootloader_pin_t pin );
+
+/*!
+ * @brief Read and return the Chip EUI
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] chip_eui The buffer to be filled with chip EUI of the LR11XX. It is up to the application to ensure
+ * chip_eui is long enough to hold the chip EUI
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_read_chip_eui( const void* context, lr11xx_bootloader_chip_eui_t chip_eui );
+
+/*!
+ * @brief Read and return the Join EUI
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] join_eui The buffer to be filled with Join EUI of the LR11XX. It is up to the application to ensure
+ * join_eui is long enough to hold the join EUI
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_bootloader_read_join_eui( const void* context, lr11xx_bootloader_join_eui_t join_eui );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_BOOTLOADER_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_bootloader_types.h	2023-11-01 14:16:32.933149949 -0700
@@ -0,0 +1,179 @@
+/*!
+ * @file      lr11xx_bootloader_types.h
+ *
+ * @brief     Bootloader driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_BOOTLOADER_TYPES_H
+#define LR11XX_BOOTLOADER_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdbool.h>
+#include <stdint.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*!
+ * @brief Length in byte of the LR11XX version blob
+ */
+#define LR11XX_BL_VERSION_LENGTH ( 4 )
+
+/*!
+ * @brief Length in bytes of a PIN
+ */
+#define LR11XX_BL_PIN_LENGTH ( 4 )
+
+/*!
+ * @brief Length in bytes of a chip EUI
+ */
+#define LR11XX_BL_CHIP_EUI_LENGTH ( 8 )
+
+/*!
+ * @brief Length in bytes of a join EUI
+ */
+#define LR11XX_BL_JOIN_EUI_LENGTH ( 8 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief Fixed-length array to store a PIN
+ */
+typedef uint8_t lr11xx_bootloader_pin_t[LR11XX_BL_PIN_LENGTH];
+
+/*!
+ * @brief Fixed-length array to store a chipEUI
+ */
+typedef uint8_t lr11xx_bootloader_chip_eui_t[LR11XX_BL_CHIP_EUI_LENGTH];
+
+/*!
+ * @brief Fixed-length array to store a joinEUI
+ */
+typedef uint8_t lr11xx_bootloader_join_eui_t[LR11XX_BL_JOIN_EUI_LENGTH];
+
+/*!
+ * @brief Chip modes
+ */
+typedef enum lr11xx_bootloader_chip_modes_e
+{
+    LR11XX_BOOTLOADER_CHIP_MODE_SLEEP     = 0x00,
+    LR11XX_BOOTLOADER_CHIP_MODE_STBY_RC   = 0x01,
+    LR11XX_BOOTLOADER_CHIP_MODE_STBY_XOSC = 0x02,
+    LR11XX_BOOTLOADER_CHIP_MODE_FS        = 0x03,
+    LR11XX_BOOTLOADER_CHIP_MODE_RX        = 0x04,
+    LR11XX_BOOTLOADER_CHIP_MODE_TX        = 0x05,
+    LR11XX_BOOTLOADER_CHIP_MODE_LOC       = 0x06,
+} lr11xx_bootloader_chip_modes_t;
+
+/*!
+ * @brief Reset status
+ */
+typedef enum lr11xx_bootloader_reset_status_e
+{
+    LR11XX_BOOTLOADER_RESET_STATUS_CLEARED      = 0x00,
+    LR11XX_BOOTLOADER_RESET_STATUS_ANALOG       = 0x01,
+    LR11XX_BOOTLOADER_RESET_STATUS_EXTERNAL     = 0x02,
+    LR11XX_BOOTLOADER_RESET_STATUS_SYSTEM       = 0x03,
+    LR11XX_BOOTLOADER_RESET_STATUS_WATCHDOG     = 0x04,
+    LR11XX_BOOTLOADER_RESET_STATUS_IOCD_RESTART = 0x05,
+    LR11XX_BOOTLOADER_RESET_STATUS_RTC_RESTART  = 0x06,
+} lr11xx_bootloader_reset_status_t;
+
+/*!
+ * @brief Command status
+ */
+typedef enum lr11xx_bootloader_command_status_e
+{
+    LR11XX_BOOTLOADER_CMD_STATUS_FAIL = 0x00,
+    LR11XX_BOOTLOADER_CMD_STATUS_PERR = 0x01,
+    LR11XX_BOOTLOADER_CMD_STATUS_OK   = 0x02,
+    LR11XX_BOOTLOADER_CMD_STATUS_DATA = 0x03,
+} lr11xx_bootloader_command_status_t;
+
+/*!
+ * @brief Status register 1 structure definition
+ */
+typedef struct lr11xx_bootloader_stat1_s
+{
+    lr11xx_bootloader_command_status_t command_status;
+    bool                               is_interrupt_active;
+} lr11xx_bootloader_stat1_t;
+
+/*!
+ * @brief Status register 2 structure definition
+ */
+typedef struct lr11xx_bootloader_stat2_s
+{
+    lr11xx_bootloader_reset_status_t reset_status;
+    lr11xx_bootloader_chip_modes_t   chip_mode;
+    bool                             is_running_from_flash;
+} lr11xx_bootloader_stat2_t;
+
+/*!
+ * @brief Bootloader version structure definition
+ */
+typedef struct lr11xx_bootloader_version_s
+{
+    uint8_t  hw;
+    uint8_t  type;
+    uint16_t fw;
+} lr11xx_bootloader_version_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_BOOTLOADER_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine.h	2023-11-01 14:07:28.025127591 -0700
@@ -0,0 +1,342 @@
+/*!
+ * @file      lr11xx_crypto_engine.h
+ *
+ * @brief     Cryptographic engine driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_CRYPTO_ENGINE_H
+#define LR11XX_CRYPTO_ENGINE_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdbool.h>
+#include "lr11xx_crypto_engine_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Select the crypto element to be used
+ *
+ * By default, the internal crypto engine is selected. It is not needed to call this command if one plans to use the
+ * internal crypto engine.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] element The type of crypto element to use
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_crypto_select( const void* context, const lr11xx_crypto_element_t element );
+
+/*!
+ * @brief Set a key in the previously selected crypto element.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] key_id The identifier of the key to be set
+ * @param [in] key The key to be set
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_derive_key
+ */
+lr11xx_status_t lr11xx_crypto_set_key( const void* context, lr11xx_crypto_status_t* status, const uint8_t key_id,
+                                       const lr11xx_crypto_key_t key );
+
+/*!
+ * @brief Derive a key previously set.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] src_key_id The identifier of the key to be derived
+ * @param [in] dest_key_id The identifier where the derived key will be stored after call to @ref
+ * lr11xx_crypto_store_to_flash
+ * @param [in] nonce The nonce to be used to perform the derivation
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_set_key
+ */
+lr11xx_status_t lr11xx_crypto_derive_key( const void* context, lr11xx_crypto_status_t* status, const uint8_t src_key_id,
+                                          const uint8_t dest_key_id, const lr11xx_crypto_nonce_t nonce );
+
+/*!
+ * @brief Perform the needed operations to extract the payload from a join accept message.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] dec_key_id The identifier of the key used for message decryption
+ * @param [in] ver_key_id The identifier of the key used for MIC verification
+ * @param [in] lorawan_version LoRaWAN version to know the size of the header
+ * @param [in] header The header to compute (length linked to lorawan_version)
+ * @param [in] data The data to compute
+ * @param [in] length The length in bytes of the data to compute
+ * @param [out] data_out Placeholder for the decrypted data
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_crypto_process_join_accept( const void* context, lr11xx_crypto_status_t* status,
+                                                   const uint8_t dec_key_id, const uint8_t ver_key_id,
+                                                   const lr11xx_crypto_lorawan_version_t lorawan_version,
+                                                   const uint8_t* header, const uint8_t* data, const uint8_t length,
+                                                   uint8_t* data_out );
+
+/*!
+ * @brief Compute an AES-CMAC.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] key_id The identifier of the keyused for the computation
+ * @param [in] data The data to compute
+ * @param [in] length The length in bytes of the data to compute
+ * @param [out] mic Placeholder for the computed MIC (first 4 bytes of the AES-CMAC)
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_verify_aes_cmac
+ */
+lr11xx_status_t lr11xx_crypto_compute_aes_cmac( const void* context, lr11xx_crypto_status_t* status,
+                                                const uint8_t key_id, const uint8_t* data, const uint16_t length,
+                                                lr11xx_crypto_mic_t mic );
+
+/*!
+ * @brief Compute an AES-CMAC and make a comparison with a value given as parameter.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] key_id The identifier of the key to be used for the computation
+ * @param [in] data The data to compute
+ * @param [in] length The length in bytes of the data to compute
+ * @param [in] mic The MIC value (first 4 bytes of the CMAC) use for comparison
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_compute_aes_cmac
+ */
+lr11xx_status_t lr11xx_crypto_verify_aes_cmac( const void* context, lr11xx_crypto_status_t* status,
+                                               const uint8_t key_id, const uint8_t* data, const uint16_t length,
+                                               const lr11xx_crypto_mic_t mic );
+
+/*!
+ * @brief Compute an AES encryption with a key ID specified in parameter.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] key_id The identifier of the key to be used for the computation
+ * @param [in] data The data to encrypt
+ * @param [in] length The length in bytes of the data to encrypt - this value shall be a multiple of 16
+ * @param [out] result A pointer to a data buffer that will be filled with the encrypted data. Values of this buffer are
+ * meaningful if and only if the return status is LR11XX_CRYPTO_STATUS_SUCCESS
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_set_key, lr11xx_crypto_derive_key
+ */
+lr11xx_status_t lr11xx_crypto_aes_encrypt_01( const void* context, lr11xx_crypto_status_t* status, const uint8_t key_id,
+                                              const uint8_t* data, const uint16_t length, uint8_t* result );
+
+/*!
+ * @brief Compute an AES encryption with a key ID specified in parameter.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] key_id The identifier of the key to be used for the computation
+ * @param [in] data The data to encrypt
+ * @param [in] length The length in bytes of the data to encrypt - this value shall be a multiple of 16
+ * @param [out] result A pointer to a data buffer that will be filled with the encrypted data. Values of this buffer are
+ * meaningful if and only if the return status is LR11XX_CRYPTO_STATUS_SUCCESS
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_set_key, lr11xx_crypto_derive_key
+ */
+lr11xx_status_t lr11xx_crypto_aes_encrypt( const void* context, lr11xx_crypto_status_t* status, const uint8_t key_id,
+                                           const uint8_t* data, const uint16_t length, uint8_t* result );
+
+/*!
+ * @brief Compute an AES decryption with a key ID specified in parameter.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] key_id The identifier of the key to be used for the computation
+ * @param [in] data The data to decrypt
+ * @param [in] length The length in bytes of the data to decrypt - this value shall be a multiple of 16
+ * @param [out] result A pointer to a data buffer that will be filled with the decrypted data. Values of this buffer are
+ * meaningful if and only if the return status is LR11XX_CRYPTO_STATUS_SUCCESS
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_set_key, lr11xx_crypto_derive_key
+ */
+lr11xx_status_t lr11xx_crypto_aes_decrypt( const void* context, lr11xx_crypto_status_t* status, const uint8_t key_id,
+                                           const uint8_t* data, const uint16_t length, uint8_t* result );
+
+/*!
+ * @brief Store the crypto data (keys, parameters) from RAM into the flash memory.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_restore_from_flash
+ */
+lr11xx_status_t lr11xx_crypto_store_to_flash( const void* context, lr11xx_crypto_status_t* status );
+
+/*!
+ * @brief Restore the crypto data (keys, parameters) from flash memory into RAM.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_store_to_flash
+ */
+lr11xx_status_t lr11xx_crypto_restore_from_flash( const void* context, lr11xx_crypto_status_t* status );
+
+/*!
+ * @brief Set a specific parameter identified by param_id in the crypto RAM.
+ *
+ * This function does not store a parameter in the flash memory. The parameters shall be stored after using @ref
+ * lr11xx_crypto_store_to_flash command.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] param_id The identifier of the parameter to be set
+ * @param [in] parameter The parameter to be set
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_get_parameter
+ */
+lr11xx_status_t lr11xx_crypto_set_parameter( const void* context, lr11xx_crypto_status_t* status,
+                                             const uint8_t param_id, const lr11xx_crypto_param_t parameter );
+
+/*!
+ * @brief Get a specific parameter identified by paramID from the crypto RAM.
+ *
+ * This function does not fetch a parameter from the flash memory. The parameters shall be restored before using @ref
+ * lr11xx_crypto_restore_from_flash command.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] status The status returned by the execution of this cryptographic function
+ * @param [in] param_id The identifier of the parameter to get
+ * @param [out] parameter The placeholder to store the parameter
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_crypto_set_parameter
+ */
+lr11xx_status_t lr11xx_crypto_get_parameter( const void* context, lr11xx_crypto_status_t* status,
+                                             const uint8_t param_id, lr11xx_crypto_param_t parameter );
+
+/*!
+ * @brief Check if an encrypted firmware image is suitable for the transceiver on which the check is done
+ *
+ * @remark The result can be read by calling @ref lr11xx_crypto_get_check_encrypted_firmware_image_result
+ *
+ * @remark A user checks the suitability of a firmware image by calling this function with 64-word long chunk of data
+ * sent in-order (except for the last one that can be shorter).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] offset_in_byte Offset of data buffer in firmware image - has to be a multiple of 4
+ * @param [in] data Buffer holding the encrypted content. Its size in words must be at least length
+ * @param [in] length_in_word Number of words (i.e. 4 bytes) in the buffer to transfer. This value must be in the range
+ * [0:64]
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_crypto_check_encrypted_firmware_image( const void* context, const uint32_t offset_in_byte,
+                                                              const uint32_t* data, const uint8_t length_in_word );
+
+/*!
+ * @brief Check if an encrypted firmware image is suitable for the transceiver on which the check is done
+ *
+ * @remark The result can be read by calling @ref lr11xx_crypto_get_check_encrypted_firmware_image_result
+ *
+ * @remark This function is developed on top of @ref lr11xx_crypto_check_encrypted_firmware_image and takes care of the
+ * whole firmware image transfer
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] offset_in_byte Offset of data buffer in firmware image - has to be a multiple of 4
+ * @param [in] data Buffer holding the encrypted content. Its size in words must be at least length
+ * @param [in] length_in_word Number of words (i.e. 4 bytes) in the buffer to transfer
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_crypto_check_encrypted_firmware_image_full( const void* context, const uint32_t offset_in_byte,
+                                                                   const uint32_t* data,
+                                                                   const uint32_t  length_in_word );
+
+/*!
+ * @brief Get the result of the encrypted firmware image check
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] is_encrypted_fw_image_ok Result of the encrypted firmware image check
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_crypto_get_check_encrypted_firmware_image_result( const void* context,
+                                                                         bool*       is_encrypted_fw_image_ok );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_CRYPTO_ENGINE_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_crypto_engine_types.h	2023-11-01 14:08:55.159102078 -0700
@@ -0,0 +1,199 @@
+/*!
+ * @file      lr11xx_crypto_engine_types.h
+ *
+ * @brief     Cryptographic engine driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_CRYPTO_ENGINE_TYPES_H
+#define LR11XX_CRYPTO_ENGINE_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*!
+ * @brief Length in bytes of a MIC
+ */
+#define LR11XX_CRYPTO_MIC_LENGTH 0x04
+
+/*!
+ * @brief Length in bytes of a AES CMAC
+ */
+#define LR11XX_CRYPTO_AES_CMAC_LENGTH 0x10
+
+/*!
+ * @brief Maximum length in bytes of data to be encrypted / decrypted
+ */
+#define LR11XX_CRYPTO_DATA_MAX_LENGTH 0x0100
+
+/*!
+ * @brief Length in bytes of a key for AES computation
+ */
+#define LR11XX_CRYPTO_KEY_LENGTH 0x10
+
+/*!
+ * @brief Length in bytes of a nonce
+ */
+#define LR11XX_CRYPTO_NONCE_LENGTH 0x10
+
+/*!
+ * @brief Length in bytes of a crypto parameter
+ */
+#define LR11XX_CRYPTO_PARAMETER_LENGTH 0x04
+
+/*!
+ * @brief Length in bytes of the status returned by an API
+ */
+#define LR11XX_CRYPTO_STATUS_LENGTH 0x01
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief Fixed-length array to store an AES CMAC
+ */
+typedef uint8_t lr11xx_crypto_mic_t[LR11XX_CRYPTO_MIC_LENGTH];
+
+/*!
+ * @brief Fixed-length array to store an AES CMAC
+ */
+typedef uint8_t lr11xx_crypto_aes_cmac_t[LR11XX_CRYPTO_AES_CMAC_LENGTH];
+
+/*!
+ * @brief Fixed-length array to store a crypto key
+ */
+typedef uint8_t lr11xx_crypto_key_t[LR11XX_CRYPTO_KEY_LENGTH];
+
+/*!
+ * @brief Fixed-length array to store a crypto nonce
+ */
+typedef uint8_t lr11xx_crypto_nonce_t[LR11XX_CRYPTO_NONCE_LENGTH];
+
+/*!
+ * @brief Fixed-length array to store a crypto parameter
+ */
+typedef uint8_t lr11xx_crypto_param_t[LR11XX_CRYPTO_PARAMETER_LENGTH];
+
+/*!
+ * @brief The supported crypto elements
+ */
+typedef enum
+{
+    LR11XX_CRYPTO_ELEMENT_CRYPTO_ENGINE  = 0x00,  //!< Internal crypto engine (default)
+    LR11XX_CRYPTO_ELEMENT_SECURE_ELEMENT = 0x01,  //!< External secure element
+} lr11xx_crypto_element_t;
+
+/*!
+ * @brief The status returned by the crypto API
+ */
+typedef enum
+{
+    LR11XX_CRYPTO_STATUS_SUCCESS              = 0x00,  //!< The API command was successful
+    LR11XX_CRYPTO_STATUS_ERROR_FAIL_CMAC      = 0x01,  //!< AES-CMAC invalid or comparison failed
+    LR11XX_CRYPTO_STATUS_ERROR_INVALID_KEY_ID = 0x03,  //!< Invalid key ID (source, destination)
+    LR11XX_CRYPTO_STATUS_ERROR_BUFFER_SIZE    = 0x05,  //!< Invalid data buffer size
+    LR11XX_CRYPTO_STATUS_ERROR                = 0x06,  //!< Other error
+} lr11xx_crypto_status_t;
+
+/*!
+ * @brief The supported LoRaWAN versions
+ */
+typedef enum
+{
+    LR11XX_CRYPTO_LORAWAN_VERSION_1_0_X = 0x00,
+    LR11XX_CRYPTO_LORAWAN_VERSION_1_1_X = 0x01,
+} lr11xx_crypto_lorawan_version_t;
+
+/*!
+ * @brief Crypto keys table index definition.
+ */
+typedef enum lr11xx_crypto_keys_idx_e
+{
+    LR11XX_CRYPTO_KEYS_IDX_MOTHER_KEY      = 1,
+    LR11XX_CRYPTO_KEYS_IDX_NWK_KEY         = 2,
+    LR11XX_CRYPTO_KEYS_IDX_APP_KEY         = 3,
+    LR11XX_CRYPTO_KEYS_IDX_J_S_ENC_KEY     = 4,
+    LR11XX_CRYPTO_KEYS_IDX_J_S_INT_KEY     = 5,
+    LR11XX_CRYPTO_KEYS_IDX_GP_KE_KEY_0     = 6,
+    LR11XX_CRYPTO_KEYS_IDX_GP_KE_KEY_1     = 7,
+    LR11XX_CRYPTO_KEYS_IDX_GP_KE_KEY_2     = 8,
+    LR11XX_CRYPTO_KEYS_IDX_GP_KE_KEY_3     = 9,
+    LR11XX_CRYPTO_KEYS_IDX_GP_KE_KEY_4     = 10,
+    LR11XX_CRYPTO_KEYS_IDX_GP_KE_KEY_5     = 11,
+    LR11XX_CRYPTO_KEYS_IDX_APP_S_KEY       = 12,
+    LR11XX_CRYPTO_KEYS_IDX_F_NWK_S_INT_KEY = 13,
+    LR11XX_CRYPTO_KEYS_IDX_S_NWK_S_INT_KEY = 14,
+    LR11XX_CRYPTO_KEYS_IDX_NWK_S_ENC_KEY   = 15,
+    LR11XX_CRYPTO_KEYS_IDX_RFU_0           = 16,
+    LR11XX_CRYPTO_KEYS_IDX_RFU_1           = 17,
+    LR11XX_CRYPTO_KEYS_IDX_MC_APP_S_KEY_0  = 18,
+    LR11XX_CRYPTO_KEYS_IDX_MC_APP_S_KEY_1  = 19,
+    LR11XX_CRYPTO_KEYS_IDX_MC_APP_S_KEY_2  = 20,
+    LR11XX_CRYPTO_KEYS_IDX_MC_APP_S_KEY_3  = 21,
+    LR11XX_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_0  = 22,
+    LR11XX_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_1  = 23,
+    LR11XX_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_2  = 24,
+    LR11XX_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_3  = 25,
+    LR11XX_CRYPTO_KEYS_IDX_GP0             = 26,
+    LR11XX_CRYPTO_KEYS_IDX_GP1             = 27,
+} lr11xx_crypto_keys_idx_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_CRYPTO_ENGINE_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_driver_version.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_driver_version.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_driver_version.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_driver_version.h	2023-11-01 14:47:35.619389742 -0700
@@ -0,0 +1,90 @@
+/*!
+ * @file      lr11xx_driver_version.h
+ *
+ * @brief     Placeholder to keep the version of LR11XX driver.
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_DRIVER_VERSION_H
+#define LR11XX_DRIVER_VERSION_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+#define LR11XX_DRIVER_VERSION_MAJOR 2
+#define LR11XX_DRIVER_VERSION_MINOR 2
+#define LR11XX_DRIVER_VERSION_PATCH 0
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Compare version information with current ones
+ *
+ * This macro expands to true boolean value if the version information provided in argument is compatible or
+ * retro-compatible with the version of this code base
+ */
+#define LR11XX_DRIVER_VERSION_CHECK( x, y, z ) \
+    ( x == LR11XX_DRIVER_VERSION_MAJOR &&      \
+      ( y < LR11XX_DRIVER_VERSION_MINOR ||     \
+        ( y == LR11XX_DRIVER_VERSION_MINOR && z <= LR11XX_DRIVER_VERSION_PATCH ) ) )
+
+const char* lr11xx_driver_version_get_version_string( void );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_DRIVER_VERSION_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,515 @@
+/*!
+ * @file      lr11xx_gnss.h
+ *
+ * @brief     GNSS scan driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_GNSS_H
+#define LR11XX_GNSS_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr11xx_gnss_types.h"
+#include "lr11xx_system_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Get the size of results
+ *
+ * This method returns the size in bytes of the results available in LR11XX result buffer.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] result_size Result size
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_result_size( const void* context, uint16_t* result_size );
+
+/*!
+ * @brief Read GNSS results
+ *
+ * The GNSS results are pushed into a buffer directly. This buffer is provided by the application using the driver. It
+ * MUST be long enough to contains at least result_buffer_size bytes.
+ *
+ * @warning No check is done on result_buffer size. If this application provided buffer is too small, there will be a
+ * buffer overflow bug!
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] result_buffer Application provided buffer to be filled with result
+ * @param [in] result_buffer_size The number of bytes to read from the LR11XX
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_results( const void* context, uint8_t* result_buffer,
+                                          const uint16_t result_buffer_size );
+
+/*!
+ * @brief Get the time spent in signal acquisition and signal analysis
+ *
+ * These timings allow to compute the current consumption of the last GNSS scan.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] timings GNSS timings of last GNSS scan
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_timings( const void* context, lr11xx_gnss_timings_t* timings );
+
+/*!
+ * @brief Update almanacs given as parameter
+ *
+ * @remark Note that information header and almanacs for all 128 SV (i.e. 129 20-byte long blocks) must be updated in a
+ * row for the whole operation to be successful. Therefore, this function must be called as many times as needed without
+ * any other operations in between.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] blocks Buffer containing at least (nb_of_blocks * LR11XX_GNSS_SINGLE_ALMANAC_WRITE_SIZE) bytes of almanac
+ * @param [in] nb_of_blocks Number of blocks to transfer
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_almanac_update( const void* context, const uint8_t* blocks, const uint8_t nb_of_blocks );
+
+/*!
+ * @brief Read the almanac
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] almanac_bytestream The bytestream of the almanac
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_almanac( const void*                                context,
+                                          lr11xx_gnss_almanac_full_read_bytestream_t almanac_bytestream );
+
+/*!
+ * @brief Function to read the frequency search space around the Doppler frequency
+ *
+ * @param [in] radio Radio abstraction
+ * @param [out] freq_search_space Frequency search space configuration read from the chip
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_freq_search_space( const void*                      radio,
+                                                    lr11xx_gnss_freq_search_space_t* freq_search_space );
+
+/*!
+ * @brief Function to set the frequency search space around the Doppler frequency
+ *
+ * @param [in] radio Radio abstraction
+ * @param [in] freq_search_space Frequency search space configuration to be applied
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_set_freq_search_space( const void*                           radio,
+                                                   const lr11xx_gnss_freq_search_space_t freq_search_space );
+
+/*!
+ * @brief Get almanac age for a satellite
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] sv_id ID of the satellite corresponding the to almanac requested
+ * @param [out] almanac_age Almanac age in days since last GPS time overlap
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_almanac_age_for_satellite( const void* context, const lr11xx_gnss_satellite_id_t sv_id,
+                                                           uint16_t* almanac_age );
+
+/*!
+ * @brief Push data received from solver to LR11XX
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] payload Payload received from solver
+ * @param [in] payload_size Size of the payload received from solver (in bytes)
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_push_solver_msg( const void* context, const uint8_t* payload, const uint16_t payload_size );
+
+/**
+ * @brief Return the theoretical number of visible satellites based on the given parameters.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] date The actual date of scan. Its format is the number of seconds elapsed since January the 6th 1980
+ * 00:00:00 with leap seconds included.
+ * @param [in] assistance_position, latitude 12 bits and longitude 12 bits
+ * @param [in] constellation Bit mask of the constellations to use. See @ref lr11xx_gnss_constellation_t for
+ * the possible values
+ * @param [out] nb_visible_sv theoretical number of visible satellites
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_nb_visible_satellites(
+    const void* context, const lr11xx_gnss_date_t date,
+    const lr11xx_gnss_solver_assistance_position_t* assistance_position,
+    const lr11xx_gnss_constellation_t constellation, uint8_t* nb_visible_sv );
+
+/**
+ * @brief Return the theoretical doppler information of theoretical visible satellites, this function shall be called
+ * after lr11xx_gnss_get_nb_visible_satellites function.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] nb_visible_satellites number of visible satellites returned by lr11xx_gnss_get_nb_visible_satellites
+ * function,
+ * @param [out] visible_satellite_id_doppler Doppler information of each satellite.
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_visible_satellites( const void* context, const uint8_t nb_visible_satellites,
+                                                    lr11xx_gnss_visible_satellite_t* visible_satellite_id_doppler );
+
+/*!
+ * @brief Activate the GNSS scan constellation
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] constellation_mask Bit mask of the constellations to use. See @ref lr11xx_gnss_constellation_t for
+ * the possible values
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_read_used_constellations
+ */
+lr11xx_status_t lr11xx_gnss_set_constellations_to_use( const void*                            context,
+                                                       const lr11xx_gnss_constellation_mask_t constellation_mask );
+
+/*!
+ * @brief Read constellation used by the GNSS scanner from the almanac update configuration
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] constellations_used Bit mask of the constellations used. See @ref lr11xx_gnss_constellation_t for the
+ * possible values
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_set_constellations_to_use
+ */
+lr11xx_status_t lr11xx_gnss_read_used_constellations( const void*                       context,
+                                                      lr11xx_gnss_constellation_mask_t* constellations_used );
+
+/*!
+ * @brief Activate the almanac update
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] constellations_to_update Bit mask of the constellations to mark to update. See @ref
+ * lr11xx_gnss_constellation_t for the possible values
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_set_almanac_update( const void*                            context,
+                                                const lr11xx_gnss_constellation_mask_t constellations_to_update );
+
+/*!
+ * @brief Function to read the almanac update configuration
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] constellations_to_update Bit mask of the constellations to mark to update. See @ref
+ * lr11xx_gnss_constellation_t for the possible values
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_almanac_update( const void*                       context,
+                                                 lr11xx_gnss_constellation_mask_t* constellations_to_update );
+
+/*!
+ * @brief Function to read the GNSS firmware version
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] version GNSS Firmware version currently running on the chip
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_firmware_version( const void* context, lr11xx_gnss_version_t* version );
+
+/*!
+ * @brief Function to read the supported constellation, GPS or BEIDOU other constellations
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] supported_constellations Bit mask of the constellations used. See @ref lr11xx_gnss_constellation_t for
+ * the possible values
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_supported_constellations( const void*                       context,
+                                                           lr11xx_gnss_constellation_mask_t* supported_constellations );
+
+/*!
+ * @brief Function to set the GNSS scan mode configuration
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] scan_mode  GNSS scan mode
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_scan_mode_t
+ */
+lr11xx_status_t lr11xx_gnss_set_scan_mode( const void* context, const lr11xx_gnss_scan_mode_t scan_mode );
+
+/*!
+ * @brief Gnss scan with no assisted parameters needed
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] date The actual date of scan. Its format is the number of seconds elapsed since January the 6th 1980
+ * 00:00:00 with leap seconds included.
+ * @param [in] effort_mode Effort mode @ref lr11xx_gnss_search_mode_t
+ * @param [in] gnss_input_parameters Bit mask indicating which information is added in the output payload @ref
+ * lr11xx_gnss_result_fields_legacy_e
+ * @param [in] nb_sat The expected number of satellite to provide. This value must be in the range [0:128]
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_scan_autonomous( const void* context, const lr11xx_gnss_date_t date,
+                                             const lr11xx_gnss_search_mode_t effort_mode,
+                                             const uint8_t gnss_input_parameters, const uint8_t nb_sat );
+
+/*!
+ * @brief Gnss scan with assisted parameters.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] date The actual date of scan. Its format is the number of seconds elapsed since January the 6th 1980
+ * 00:00:00 with leap seconds included.
+ * @param [in] effort_mode Effort mode @ref lr11xx_gnss_search_mode_t
+ * @param [in] gnss_input_parameters Bit mask indicating which information is added in the output payload @ref
+ * lr11xx_gnss_result_fields_legacy_e
+ * @param [in] nb_sat The expected number of satellite to provide. This value must be in the range [0:128]
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_scan_assisted( const void* context, const lr11xx_gnss_date_t date,
+                                           const lr11xx_gnss_search_mode_t effort_mode,
+                                           const uint8_t gnss_input_parameters, const uint8_t nb_sat );
+
+/*!
+ * @brief Function to set the assistance position.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] assistance_position, latitude 12 bits and longitude 12 bits
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_solver_assistance_position_t
+ */
+lr11xx_status_t lr11xx_gnss_set_assistance_position(
+    const void* context, const lr11xx_gnss_solver_assistance_position_t* assistance_position );
+
+/*!
+ * @brief Function to read the assistance position.
+ *
+ * The assistance position read may be different from the one set beforehand with @ref
+ * lr11xx_gnss_set_assistance_position due to a scaling computation.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] assistance_position, latitude 12 bits and longitude 12 bits
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_solver_assistance_position_t
+ */
+lr11xx_status_t lr11xx_gnss_read_assistance_position( const void*                               context,
+                                                      lr11xx_gnss_solver_assistance_position_t* assistance_position );
+
+/*!
+ * @brief Host receives an update from the network or assembles itself the update message and send it to the LR11XX.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] dmc_msg buffer containing the update the network
+ * @param [in] dmc_msg_len length of this buffer
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_push_dmc_msg( const void* context, uint8_t* dmc_msg, uint16_t dmc_msg_len );
+
+/*!
+ * @brief Get the GNSS context status
+ *
+ * This function returns the GNSS context status as a raw buffer. It is possible to use
+ * lr11xx_gnss_parse_context_status_buffer to obtain the details of the context status.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] context_status_buffer Pointer to a buffer to be filled with context status information. Must be at least
+ * 7 bytes long. It is up to the caller to ensure there is enough place in this buffer.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_parse_context_status_buffer
+ */
+lr11xx_status_t lr11xx_gnss_get_context_status( const void*                             context,
+                                                lr11xx_gnss_context_status_bytestream_t context_status_buffer );
+
+/*!
+ * @brief Get the number of detected satellites during last scan
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] nb_detected_satellites Number of satellites detected
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_nb_detected_satellites( const void* context, uint8_t* nb_detected_satellites );
+
+/*!
+ * @brief Get the satellites detected on last scan with their IDs, C/N (aka CNR) and doppler
+ *
+ * @note Doppler is returned with 6ppm accuracy.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] nb_detected_satellites Number of detected satellites on last scan (obtained by calling
+ * lr11xx_gnss_get_nb_detected_satellites)
+ * @param [out] detected_satellite_id_snr_doppler Pointer to an array of structures of size big enough to contain
+ * nb_detected_satellites elements
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_detected_satellites(
+    const void* context, const uint8_t nb_detected_satellites,
+    lr11xx_gnss_detected_satellite_t* detected_satellite_id_snr_doppler );
+
+/*!
+ * @brief Read RSSI on GNSS path
+ *
+ * This is a test function to read RSSI on GNSS path.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] rssi_gnss_dbm RSSI read on GNSS path in dbm
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_read_gnss_rssi_test( const void* context, int8_t* rssi_gnss_dbm );
+
+/**
+ * @brief Parse a raw buffer of context status
+ *
+ * @param [in] context_status_bytestream The raw buffer of context status to parse. It is up to the caller to ensure the
+ * buffer is at least LR11XX_GNSS_CONTEXT_STATUS_LENGTH bytes long
+ * @param [out] context_status Pointer to a structure of lr11xx_gnss_context_status_t to be filled with information from
+ * context_status_bytestream
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_gnss_get_context_status
+ */
+lr11xx_status_t lr11xx_gnss_parse_context_status_buffer(
+    const lr11xx_gnss_context_status_bytestream_t context_status_bytestream,
+    lr11xx_gnss_context_status_t*                 context_status );
+
+/**
+ * @brief Extract the destination from the result returned by a GNSS scan
+ *
+ * @param [in]  result_buffer       Pointer to the buffer holding the result
+ * @param [in]  result_buffer_size  Size of the result in byte
+ * @param [out] destination         Destination of the result
+ *
+ * @returns  Operation status
+ */
+lr11xx_status_t lr11xx_gnss_get_result_destination( const uint8_t* result_buffer, const uint16_t result_buffer_size,
+                                                    lr11xx_gnss_destination_t* destination );
+
+/**
+ * @brief Helper function that computes the age of an almanac.
+ *
+ * This function does not call the LR11XX.
+ * The almanac age is computed based on the following elements:
+ *     - almanac age as obtained from lr11xx_gnss_get_almanac_age_for_satellite
+ *     - the number of days elapsed between Epoch (January 6th 1980) and the GPS rollover reference of the current
+ * almanac
+ *     - the GPS date of today expressed in number of days elapsed since Epoch
+ *
+ * @remark It is important to use for nb_days_between_epoch_and_corresponding_gps_time_rollover the GPS time rollover
+ * corresponding to the reference of the almanac_date. This is especially true when current date is just after a GPS
+ * time rollover.
+ *
+ * @param [in] almanac_date Almanac date as obtained from lr11xx_gnss_get_almanac_age_for_satellite
+ * @param [in] nb_days_between_epoch_and_corresponding_gps_time_rollover Number of days elapsed between GPS Epoch and
+ * the GPS rollover corresponding to the almanac_date
+ * @param [in] nb_days_since_epoch Number of days elapsed between January 6th 1980 and now
+ *
+ * @returns Age of the almanac expressed in number of days between its start valid instant and now
+ */
+uint16_t lr11xx_gnss_compute_almanac_age( uint16_t almanac_date,
+                                          uint16_t nb_days_between_epoch_and_corresponding_gps_time_rollover,
+                                          uint16_t nb_days_since_epoch );
+
+/**
+ * @brief Compute the power consumption in uAh based on the time spent in signal acquisition and signal analysis.
+ *
+ * @param [in] regulator The regulator used during last GNSS scan
+ * @param [in] timings Timings allowing to compute the current consumption
+ * @param [in] constellations_used Bit mask of the constellations used
+ *
+ * @returns Current consumption in uAh
+ */
+uint32_t lr11xx_gnss_get_consumption( lr11xx_system_reg_mode_t regulator, lr11xx_gnss_timings_t timings,
+                                      lr11xx_gnss_constellation_mask_t constellations_used );
+
+/*!
+ * @brief Apply the workaround for the mixer configuration issue - only LR1120 chip is impacted
+ *
+ * @remark This function is always called when calling @ref lr11xx_gnss_scan_autonomous or @ref
+ * lr11xx_gnss_scan_assisted unless the macro LR11XX_DISABLE_MIXER_CFG_WORKAROUND is defined.
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_gnss_apply_mixer_cfg_workaround( const void* context );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_GNSS_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_gnss_types.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,322 @@
+/*!
+ * @file      lr11xx_gnss_types.h
+ *
+ * @brief     GNSS scan driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_GNSS_TYPES_H
+#define LR11XX_GNSS_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdbool.h>
+#include <stdint.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*!
+ * @brief Maximal buffer size
+ */
+#define LR11XX_GNSS_MAX_SIZE_ARRAY 2820  //!< (128sv * 22bytes + 4bytes for CRC)
+
+/*!
+ * @brief Number of almanacs in full update payload
+ */
+#define LR11XX_GNSS_FULL_UPDATE_N_ALMANACS ( 128 )
+
+/*!
+ * @brief Size of the almanac of a single satellite when reading
+ */
+#define LR11XX_GNSS_SINGLE_ALMANAC_READ_SIZE ( 22 )
+
+/*!
+ * @brief Size of the almanac of a single satellite when writing
+ */
+#define LR11XX_GNSS_SINGLE_ALMANAC_WRITE_SIZE ( 20 )
+
+/*!
+ * @brief Size of the almanac of the GNSS context status buffer
+ */
+#define LR11XX_GNSS_CONTEXT_STATUS_LENGTH ( 9 )
+
+/*!
+ * @brief Size of the whole almanac when reading
+ */
+#define LR11XX_GNSS_FULL_ALMANAC_READ_BUFFER_SIZE \
+    ( ( LR11XX_GNSS_FULL_UPDATE_N_ALMANACS * LR11XX_GNSS_SINGLE_ALMANAC_READ_SIZE ) + 4 )
+
+#define LR11XX_GNSS_DMC_ALMANAC_UPDATE_POS ( 1U )
+#define LR11XX_GNSS_DMC_ALMANAC_UPDATE_GPS_MASK ( 0x01UL << LR11XX_GNSS_DMC_ALMANAC_UPDATE_POS )
+#define LR11XX_GNSS_DMC_ALMANAC_UPDATE_BEIDOU_MASK ( 0x02UL << LR11XX_GNSS_DMC_ALMANAC_UPDATE_POS )
+
+#define LR11XX_GNSS_DMC_FREQUENCY_SEARCH_SPACE_MSB_POS ( 0U )
+#define LR11XX_GNSS_DMC_FREQUENCY_SEARCH_SPACE_MSB_MASK ( 0x01UL << LR11XX_GNSS_DMC_FREQUENCY_SEARCH_SPACE_MSB_POS )
+
+#define LR11XX_GNSS_DMC_FREQUENCY_SEARCH_SPACE_LSB_POS ( 7U )
+#define LR11XX_GNSS_DMC_FREQUENCY_SEARCH_SPACE_LSB_MASK ( 0x01UL << LR11XX_GNSS_DMC_FREQUENCY_SEARCH_SPACE_LSB_POS )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief Satellite ID type
+ */
+typedef uint8_t lr11xx_gnss_satellite_id_t;
+
+/*!
+ * @brief Bit mask indicating which information is added in the output payload - to be used with @ref
+ * LR11XX_GNSS_SCAN_MODE_0_SINGLE_SCAN_LEGACY
+ */
+enum lr11xx_gnss_result_fields_legacy_e
+{
+    LR11XX_GNSS_RESULTS_LEGACY_PSEUDO_RANGE_MASK = ( 1 << 0 ),  //!< Add pseudo-range information if set
+    LR11XX_GNSS_RESULTS_LEGACY_DOPPLER_MASK      = ( 1 << 1 ),  //!< Add all Doppler information if set - up to 5 if not
+    LR11XX_GNSS_RESULTS_LEGACY_BIT_CHANGE_MASK   = ( 1 << 2 ),  //!< Add bit change if set
+};
+
+/*!
+ * @brief bit mask indicating which information is added in the output payload - to be used with @ref
+ * LR11XX_GNSS_SCAN_MODE_3_SINGLE_SCAN_AND_5_FAST_SCANS
+ */
+enum lr11xx_gnss_result_fields_e
+{
+    LR11XX_GNSS_RESULTS_DOPPLER_ENABLE_MASK = ( 1 << 0 ),  //!< Add Doppler information if set
+    LR11XX_GNSS_RESULTS_DOPPLER_MASK = ( 1 << 1 ),     //!< Add up to 14 Doppler if set - up to 7 if not. Valid if @ref
+                                                       //!< LR11XX_GNSS_RESULTS_DOPPLER_ENABLE_MASK is set
+    LR11XX_GNSS_RESULTS_BIT_CHANGE_MASK = ( 1 << 2 ),  //!< Add bit change if set
+};
+
+/*!
+ * @brief Constellation identifiers
+ */
+typedef enum
+{
+    LR11XX_GNSS_GPS_MASK    = 0x01,
+    LR11XX_GNSS_BEIDOU_MASK = 0x02,
+} lr11xx_gnss_constellation_t;
+
+/*!
+ * @brief Bit mask of constellation configurations
+ *
+ * @see lr11xx_gnss_constellation_t
+ */
+typedef uint8_t lr11xx_gnss_constellation_mask_t;
+
+/*!
+ * @brief Search mode for GNSS scan
+ */
+typedef enum
+{
+    LR11XX_GNSS_OPTION_DEFAULT     = 0x00,  //!< Search all requested satellites or fail
+    LR11XX_GNSS_OPTION_BEST_EFFORT = 0x01,  //!< Add additional search if not all satellites are found
+} lr11xx_gnss_search_mode_t;
+
+/*!
+ * @brief GNSS response type indicates the destination: Host MCU, GNSS solver or GNSS DMC
+ */
+typedef enum
+{
+    LR11XX_GNSS_DESTINATION_HOST   = 0x00,  //!< Host MCU
+    LR11XX_GNSS_DESTINATION_SOLVER = 0x01,  //!< GNSS Solver
+    LR11XX_GNSS_DESTINATION_DMC    = 0x02,  //!< GNSS DMC
+} lr11xx_gnss_destination_t;
+
+/*!
+ * @brief Message to host indicating the status of the message
+ */
+typedef enum
+{
+    LR11XX_GNSS_HOST_OK                                            = 0x00,
+    LR11XX_GNSS_HOST_UNEXPECTED_CMD                                = 0x01,
+    LR11XX_GNSS_HOST_UNIMPLEMENTED_CMD                             = 0x02,
+    LR11XX_GNSS_HOST_INVALID_PARAMETERS                            = 0x03,
+    LR11XX_GNSS_HOST_MESSAGE_SANITY_CHECK_ERROR                    = 0x04,
+    LR11XX_GNSS_HOST_IQ_CAPTURE_FAILS                              = 0x05,
+    LR11XX_GNSS_HOST_NO_TIME                                       = 0x06,
+    LR11XX_GNSS_HOST_NO_SATELLITE_DETECTED                         = 0x07,
+    LR11XX_GNSS_HOST_ALMANAC_IN_FLASH_TOO_OLD                      = 0x08,
+    LR11XX_GNSS_HOST_ALMANAC_UPDATE_FAILS_CRC_ERROR                = 0x09,
+    LR11XX_GNSS_HOST_ALMANAC_UPDATE_FAILS_FLASH_INTEGRITY_ERROR    = 0x0A,
+    LR11XX_GNSS_HOST_ALMANAC_UPDATE_NOT_ALLOWED                    = 0x0B,
+    LR11XX_GNSS_HOST_ALMANAC_CRC_ERROR                             = 0x0C,
+    LR11XX_GNSS_HOST_ALMANAC_VERSION_NOT_SUPPORTED                 = 0x0D,
+    LR11XX_GNSS_HOST_NOT_ENOUGH_SV_DETECTED_TO_BUILD_A_NAV_MESSAGE = 0x10,
+} lr11xx_gnss_message_host_status_t;
+
+/*!
+ * @brief Message to DMC operation code
+ */
+typedef enum
+{
+    LR11XX_GNSS_DMC_STATUS = 0x18,  //!< Status message in payload
+} lr11xx_gnss_message_dmc_opcode_t;
+
+/*!
+ * @brief GNSS single or double scan mode
+ */
+typedef enum
+{
+    LR11XX_GNSS_SCAN_MODE_0_SINGLE_SCAN_LEGACY           = 0x00,  //!< Generated NAV message format = NAV1
+    LR11XX_GNSS_SCAN_MODE_3_SINGLE_SCAN_AND_5_FAST_SCANS = 0x03,  //!< Generated NAV message format = NAV2
+} lr11xx_gnss_scan_mode_t;
+
+/*!
+ * @brief GNSS error codes
+ */
+typedef enum lr11xx_gnss_error_code_e
+{
+    LR11XX_GNSS_NO_ERROR                            = 0,
+    LR11XX_GNSS_ERROR_ALMANAC_TOO_OLD               = 1,
+    LR11XX_GNSS_ERROR_UPDATE_CRC_MISMATCH           = 2,
+    LR11XX_GNSS_ERROR_UPDATE_FLASH_MEMORY_INTEGRITY = 3,
+    LR11XX_GNSS_ERROR_ALMANAC_UPDATE_NOT_ALLOWED = 4,  //!< Impossible to update more than one constellation at a time
+} lr11xx_gnss_error_code_t;
+
+/*!
+ * @brief GNSS frequency search space
+ */
+typedef enum lr11xx_gnss_freq_search_space_e
+{
+    LR11XX_GNSS_FREQUENCY_SEARCH_SPACE_250_HZ = 0,
+    LR11XX_GNSS_FREQUENCY_SEARCH_SPACE_500_HZ = 1,
+    LR11XX_GNSS_FREQUENCY_SEARCH_SPACE_1_KHZ  = 2,
+    LR11XX_GNSS_FREQUENCY_SEARCH_SPACE_2_KHZ  = 3,
+} lr11xx_gnss_freq_search_space_t;
+
+/*!
+ * @brief Representation of absolute time for GNSS operations
+ *
+ * The GNSS absolute time is represented as a 32 bits word that is the number of seconds elapsed since January 6th 1980,
+ * 00:00:00
+ *
+ * The GNSS absolute time must take into account the Leap Seconds between UTC time and GPS time.
+ */
+typedef uint32_t lr11xx_gnss_date_t;
+
+/*!
+ * @brief Buffer that holds data for all almanacs full update - when reading
+ */
+typedef uint8_t lr11xx_gnss_almanac_full_read_bytestream_t[LR11XX_GNSS_FULL_ALMANAC_READ_BUFFER_SIZE];
+
+/*!
+ * @brief Buffer that holds data for context status
+ */
+typedef uint8_t lr11xx_gnss_context_status_bytestream_t[LR11XX_GNSS_CONTEXT_STATUS_LENGTH];
+
+/*!
+ * @brief Assistance position.
+ */
+typedef struct lr11xx_gnss_solver_assistance_position_s
+{
+    float latitude;   //!< Latitude 12 bits (latitude in degree * 2048/90) with resolution 0.044°
+    float longitude;  //!< Longitude 12 bits (longitude in degree * 2048/180) with resolution 0.088°
+} lr11xx_gnss_solver_assistance_position_t;
+
+/*!
+ * @brief Detected SV structure
+ */
+typedef struct lr11xx_gnss_detected_satellite_s
+{
+    lr11xx_gnss_satellite_id_t satellite_id;
+    int8_t                     cnr;      //!< Carrier-to-noise ration (C/N) in dB
+    int16_t                    doppler;  //!< SV doppler in Hz
+} lr11xx_gnss_detected_satellite_t;
+
+/*!
+ * @brief GNSS timings of the LR11XX
+ */
+typedef struct lr11xx_gnss_timings_s
+{
+    uint32_t radio_ms;
+    uint32_t computation_ms;
+} lr11xx_gnss_timings_t;
+
+/*!
+ * @brief Version structure of the LR11XX GNSS firmware
+ */
+typedef struct lr11xx_gnss_version_s
+{
+    uint8_t gnss_firmware;  //!< Version of the firmware
+    uint8_t gnss_almanac;   //!< Version of the almanac format
+} lr11xx_gnss_version_t;
+
+/*!
+ * @brief Structure for GNSS context status
+ */
+typedef struct lr11xx_gnss_context_status_s
+{
+    uint8_t                         firmware_version;
+    uint32_t                        global_almanac_crc;
+    lr11xx_gnss_error_code_t        error_code;
+    bool                            almanac_update_gps;
+    bool                            almanac_update_beidou;
+    lr11xx_gnss_freq_search_space_t freq_search_space;
+} lr11xx_gnss_context_status_t;
+
+/*!
+ * @brief Structure for information about visible SV
+ */
+typedef struct lr11xx_gnss_visible_satellite_s
+{
+    lr11xx_gnss_satellite_id_t satellite_id;   //!< SV ID
+    int16_t                    doppler;        //!< SV doppler in Hz
+    int16_t                    doppler_error;  //!< SV doppler error - step of 125Hz
+} lr11xx_gnss_visible_satellite_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_GNSS_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_hal.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_hal.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_hal.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_hal.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,198 @@
+/*!
+ * @file      lr11xx_hal.h
+ *
+ * @brief     Hardware Abstraction Layer (HAL) interface for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_HAL_H
+#define LR11XX_HAL_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+#include <stdbool.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/**
+ * @brief Write this to SPI bus while reading data, or as a dummy/placeholder
+ */
+#define LR11XX_NOP ( 0x00 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief LR11XX HAL status
+ */
+typedef enum lr11xx_hal_status_e
+{
+    LR11XX_HAL_STATUS_OK    = 0,
+    LR11XX_HAL_STATUS_ERROR = 3,
+} lr11xx_hal_status_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Radio data transfer - write
+ *
+ * @param [in] context          Radio implementation parameters
+ * @param [in] command          Pointer to the buffer to be transmitted
+ * @param [in] command_length   Buffer size to be transmitted
+ * @param [in] data             Pointer to the buffer to be transmitted
+ * @param [in] data_length      Buffer size to be transmitted
+ *
+ * @returns Operation status
+ */
+lr11xx_hal_status_t lr11xx_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
+                                      const uint8_t* data, const uint16_t data_length );
+
+/*!
+ * @brief Radio data transfer - read
+ *
+ * @remark This is a two-step radio read operation. It consists of writing the command, releasing then re-asserting the
+ * NSS line, then reading a discarded dummy byte followed by data_length bytes of response data from the transceiver.
+ * While reading the dummy bytes and the response data, the implementation of this function must ensure that only zero
+ * bytes (NOP) are written to the SPI bus.
+ *
+ * @param [in] context          Radio implementation parameters
+ * @param [in] command          Pointer to the buffer to be transmitted
+ * @param [in] command_length   Buffer size to be transmitted
+ * @param [out] data            Pointer to the buffer to be received
+ * @param [in] data_length      Buffer size to be received
+ *
+ * @returns Operation status
+ *
+ * @remark Some hardware SPI implementations write arbitary values on the MOSI line while reading. If this is done on
+ * the LR11XX, non-zero values may be interpreted as commands. This driver does not exploit this functionality, and
+ * expects that zeros be sent on the MOSI line when this command is reading the command response data.
+ */
+lr11xx_hal_status_t lr11xx_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
+                                     uint8_t* data, const uint16_t data_length );
+
+/*!
+ * @brief  Direct read from the SPI bus
+ *
+ * @remark Unlike @ref lr11xx_hal_read, this is a simple direct SPI bus SS/read/nSS operation. While reading the
+ * response data, the implementation of this function must ensure that only zero bytes (NOP) are written to the SPI bus.
+ *
+ * @remark Formerly, that function depended on a lr11xx_hal_write_read API function, which required bidirectional SPI
+ * communication. Given that all other radio functionality can be implemented with unidirectional SPI, it has been
+ * decided to make this HAL API change to simplify implementation requirements.
+ *
+ * @remark Only required by the @ref lr11xx_system_get_status and @ref lr11xx_bootloader_get_status commands
+ *
+ * @param [in]  context      Radio implementation parameters
+ * @param [out] data         Pointer to the buffer to be received
+ * @param [in]  data_length  Buffer size to be received
+ *
+ * @returns Operation status
+ */
+lr11xx_hal_status_t lr11xx_hal_direct_read( const void* context, uint8_t* data, const uint16_t data_length );
+
+/*!
+ * @brief Reset the radio
+ *
+ * @param [in] context Radio implementation parameters
+ *
+ * @returns Operation status
+ */
+lr11xx_hal_status_t lr11xx_hal_reset( const void* context );
+
+/*!
+ * @brief Wake the radio up.
+ *
+ * @param [in] context Radio implementation parameters
+ *
+ * @returns Operation status
+ */
+lr11xx_hal_status_t lr11xx_hal_wakeup( const void* context );
+
+/*!
+ * @brief Return the computed CRC
+ *
+ * @param [in] initial_value initial value of the CRC
+ * @param [in] buffer Buffer containing data used to compute the CRC
+ * @param [in] length Length of buffer
+ *
+ * @returns CRC value
+ */
+inline static uint8_t lr11xx_hal_compute_crc( const uint8_t initial_value, const uint8_t* buffer, uint16_t length )
+{
+    uint8_t crc = initial_value;
+
+    for( uint16_t i = 0; i < length; i++ )
+    {
+        uint8_t extract = buffer[i];
+        uint8_t sum;
+
+        for( uint8_t j = 8; j > 0; j-- )
+        {
+            sum = ( crc ^ extract ) & 0x01;
+            crc >>= 1;
+
+            if( sum != 0 )
+            {
+                crc ^= 0x65;
+            }
+
+            extract >>= 1;
+        }
+    }
+
+    return crc;
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_HAL_H
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss.h	2023-11-01 14:18:43.271946064 -0700
@@ -0,0 +1,138 @@
+/*!
+ * @file      lr11xx_lr_fhss.h
+ *
+ * @brief     LR_FHSS driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_LR_FHSS_H
+#define LR11XX_LR_FHSS_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr11xx_lr_fhss_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/**
+ * @brief Length, in bytes, of a LR-FHSS sync word
+ */
+#define LR_FHSS_SYNC_WORD_BYTES ( 4 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Initialize the LR_FHSS
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_lr_fhss_init( const void* context );
+
+/**
+ * @brief Get the delay in microsecond between the last bit sent and the TX done interrupt
+ *
+ * @param [in]  params          lr11xx LR-FHSS parameter structure
+ * @param [in]  payload_length  Length of application-layer payload
+ *
+ * @returns Delay in microseconds
+ */
+uint16_t lr11xx_lr_fhss_get_bit_delay_in_us( const lr11xx_lr_fhss_params_t* params, uint16_t payload_length );
+
+/*!
+ * @brief Configure a payload to be sent with LR_FHSS
+ *
+ * When calling this method, lr11xx_radio_set_lr_fhss_sync_word is implicitely called to configure the sync word.
+ * Note that the syncword must be 4 bytes long.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] lr_fhss_params Parameter configuration structure of the LRFHSS
+ * @param [in] hop_sequence_id Seed used to derive the hopping sequence pattern. Only the nine LSBs are taken into
+ * account
+ * @param [in] payload The payload to send. It is the responsibility of the caller to ensure that this references an
+ * array containing at least payload_length elements
+ * @param [in] payload_length The length of the payload
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_lr_fhss_build_frame( const void* context, const lr11xx_lr_fhss_params_t* lr_fhss_params,
+                                            uint16_t hop_sequence_id, const uint8_t* payload, uint8_t payload_length );
+
+/*!
+ * @brief Get the time on air in ms for LR-FHSS transmission
+ *
+ * @param [in]  params         LR11XX LR-FHSS parameter structure
+ * @param [in]  payload_length Length of application-layer payload
+ *
+ * @returns Time-on-air value in ms for LR-FHSS transmission
+ */
+uint32_t lr11xx_lr_fhss_get_time_on_air_in_ms( const lr11xx_lr_fhss_params_t* params, uint16_t payload_length );
+
+/**
+ * @brief Return the number of hop sequences available using the given parameters
+ *
+ * @param [in] lr_fhss_params Parameter configuration structure of the LRFHSS
+ *
+ * @return Returns the number of valid hop sequences (512 or 384)
+ */
+unsigned int lr11xx_lr_fhss_get_hop_sequence_count( const lr11xx_lr_fhss_params_t* lr_fhss_params );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_LR_FHSS_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_lr_fhss_types.h	2023-11-01 14:19:06.536443180 -0700
@@ -0,0 +1,65 @@
+/*!
+ * @file      lr11xx_lr_fhss_types.h
+ *
+ * @brief     LR_FHSS types definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_LR_FHSS_TYPES_H
+#define LR11XX_LR_FHSS_TYPES_H
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr_fhss_v1_base_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief LR FHSS parameter structure
+ */
+typedef struct
+{
+    lr_fhss_v1_params_t lr_fhss_params;  //!< Base LR FHSS parameters
+    int8_t              device_offset;   //<! Per device offset to avoid collisions over the air. Possible values:
+                                         //<! - if lr_fhss_params.grid == LR_FHSS_V1_GRID_25391_HZ:
+                                         //<!     [-26, 25]
+                                         //<! - if lr_fhss_params.grid == LR_FHSS_V1_GRID_3906_HZ:
+                                         //<!     [-4, 3]
+} lr11xx_lr_fhss_params_t;
+
+#endif  // LR11XX_LR_FHSS_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio.h	2023-11-03 10:13:02.927401983 -0700
@@ -0,0 +1,957 @@
+/*!
+ * @file      lr11xx_radio.h
+ *
+ * @brief     Radio driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_RADIO_H
+#define LR11XX_RADIO_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr11xx_radio_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*!
+ * @brief Length in byte of the GFSK sync word
+ */
+#define LR11XX_RADIO_GFSK_SYNC_WORD_LENGTH 8
+
+/*!
+ * @brief Default GFSK sync word value
+ */
+#define LR11XX_RADIO_GFSK_SYNC_WORD_DEFAULT            \
+    {                                                  \
+        0x97, 0x23, 0x52, 0x25, 0x56, 0x53, 0x65, 0x64 \
+    }
+
+/*!
+ * @brief Length in byte of the LR-FHSS sync word
+ */
+#define LR11XX_RADIO_LR_FHSS_SYNC_WORD_LENGTH ( 4 )
+
+/*!
+ * @brief Ramp-up delay for the power amplifier in Sigfox context
+ *
+ * This parameter configures the delay to fine tune the ramp-up time of the power amplifier for BPSK operation.
+ */
+enum
+{
+    LR11XX_RADIO_SIGFOX_DBPSK_RAMP_UP_TIME_DEFAULT = 0x0000,  //!< No optimization
+    LR11XX_RADIO_SIGFOX_DBPSK_RAMP_UP_TIME_100_BPS = 0x1306,  //!< Ramp-up optimization for 100bps
+    LR11XX_RADIO_SIGFOX_DBPSK_RAMP_UP_TIME_600_BPS = 0x0325,  //!< Ramp-up optimization for 600bps
+};
+
+/*!
+ * @brief Ramp-down delay for the power amplifier in Sigfox context
+ *
+ * This parameter configures the delay to fine tune the ramp-down time of the power amplifier for BPSK operation.
+ */
+enum
+{
+    LR11XX_RADIO_SIGFOX_DBPSK_RAMP_DOWN_TIME_DEFAULT = 0x0000,  //!< No optimization
+    LR11XX_RADIO_SIGFOX_DBPSK_RAMP_DOWN_TIME_100_BPS = 0x1D70,  //!< Ramp-down optimization for 100bps
+    LR11XX_RADIO_SIGFOX_DBPSK_RAMP_DOWN_TIME_600_BPS = 0x04E1,  //!< Ramp-down optimization for 600bps
+};
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Reset internal statistics of the received packets
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_get_gfsk_stats, lr11xx_radio_get_lora_stats
+ */
+lr11xx_status_t lr11xx_radio_reset_stats( const void* context );
+
+/*!
+ * @brief Get the internal statistics of the GFSK received packets
+ *
+ * Internal statistics are reset on Power on Reset, by entering sleep mode without memory retention, or by calling @ref
+ * lr11xx_radio_reset_stats.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] stats The statistics structure of the received packets
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_reset_stats
+ */
+lr11xx_status_t lr11xx_radio_get_gfsk_stats( const void* context, lr11xx_radio_stats_gfsk_t* stats );
+
+/*!
+ * @brief Get the internal statistics of the LoRa received packets
+ *
+ * Internal statistics are reset on Power on Reset, by entering sleep mode without memory retention, or by calling @ref
+ * lr11xx_radio_reset_stats.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] stats The statistics structure of the received packets
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_reset_stats
+ */
+lr11xx_status_t lr11xx_radio_get_lora_stats( const void* context, lr11xx_radio_stats_lora_t* stats );
+
+/*!
+ * @brief Get the packet type currently configured
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] pkt_type The packet type currently configured
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_get_pkt_type( const void* context, lr11xx_radio_pkt_type_t* pkt_type );
+
+/*!
+ * @brief Get the length of last received packet, and the offset in the RX internal buffer of the first byte of the
+ * received payload
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] rx_buffer_status The structure of RX buffer status
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_get_rx_buffer_status( const void*                      context,
+                                                   lr11xx_radio_rx_buffer_status_t* rx_buffer_status );
+
+/*!
+ * @brief Get the status of last GFSK received packet
+ *
+ * The value depends on the received packet type
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] pkt_status The last received packet status
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_get_gfsk_pkt_status( const void* context, lr11xx_radio_pkt_status_gfsk_t* pkt_status );
+
+/*!
+ * @brief Get the status of last LoRa received packet
+ *
+ * The value depends on the received packet type
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] pkt_status The last received packet status
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_get_lora_pkt_status( const void* context, lr11xx_radio_pkt_status_lora_t* pkt_status );
+
+/*!
+ * @brief Get the instantaneous RSSI.
+ *
+ * This command can be used during reception of a packet
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] rssi_in_dbm Instantaneous RSSI.
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_get_rssi_inst( const void* context, int8_t* rssi_in_dbm );
+
+/*!
+ * @brief Set the GFSK modem sync word
+ *
+ * This command is used to set the GFSK nodem sync word. This command expects a 8-byte long array to be passed as sync
+ * word parameter. By default, the value is 0x9723522556536564.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] gfsk_sync_word The sync word to be configured
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_gfsk_sync_word( const void*   context,
+                                                 const uint8_t gfsk_sync_word[LR11XX_RADIO_GFSK_SYNC_WORD_LENGTH] );
+
+/*!
+ * @brief Set the LoRa modem sync word
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] sync_word The sync word to be configured
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_lora_sync_word( const void* context, const uint8_t sync_word );
+
+/*!
+ * @brief Set the syncword for LR-FHSS
+ *
+ * Default value: 0x2C0F7995
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] sync_word The syncword to set. It is up to the caller to ensure this array is at least four bytes long
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_lr_fhss_sync_word( const void*   context,
+                                                    const uint8_t sync_word[LR11XX_RADIO_LR_FHSS_SYNC_WORD_LENGTH] );
+
+/*!
+ * @brief Set the LoRa modem sync word to private / public
+ *
+ * This command is used to select which LoRa network is selected
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] network_type The network type to be configured
+ *
+ * @returns Operation status
+ *
+ * @warning This function is deprecated. Use lr11xx_radio_set_lora_sync_word for chip firmware equal to or more recent
+ * than 0x303.
+ */
+lr11xx_status_t lr11xx_radio_set_lora_public_network( const void*                            context,
+                                                      const lr11xx_radio_lora_network_type_t network_type );
+
+/*!
+ * @brief Start RX operations with a timeout in millisecond
+ *
+ * This command sets the LR11XX to RX mode. The radio must have been configured before using this command with @ref
+ * lr11xx_radio_set_pkt_type
+ *
+ * By default, the timeout parameter allows to return automatically to standby RC mode if no packets have been received
+ * after a certain amount of time. This behavior can be altered by @ref lr11xx_radio_set_rx_tx_fallback_mode and @ref
+ * lr11xx_radio_auto_tx_rx.
+ *
+ * @remark To set the radio in Rx continuous mode, the function @ref lr11xx_radio_set_rx_with_timeout_in_rtc_step has to
+ * be called with \p timeout_in_rtc_step set to 0xFFFFFF
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] timeout_in_ms The timeout configuration for RX operation
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_rx_tx_fallback_mode
+ */
+lr11xx_status_t lr11xx_radio_set_rx( const void* context, const uint32_t timeout_in_ms );
+
+/*!
+ * @brief Start RX operations with a timeout in RTC step
+ *
+ * This command sets the LR11XX to RX mode. The radio must have been configured before using this command with @ref
+ * lr11xx_radio_set_pkt_type
+ *
+ * By default, the timeout parameter allows to return automatically to standby RC mode if no packets have been received
+ * after a certain amount of time. This behavior can be altered by @ref lr11xx_radio_set_rx_tx_fallback_mode and @ref
+ * lr11xx_radio_auto_tx_rx.
+ *
+ * The timeout duration is obtained by:
+ * \f$ timeout\_duration\_ms = timeout \times \frac{1}{32.768} \f$
+ *
+ * Maximal timeout value is 0xFFFFFF, which gives a maximal timeout of 511 seconds.
+ *
+ * The timeout argument can also have the following special values:
+ * <table>
+ * <tr><th> Special values </th><th> Meaning </th>
+ * <tr><td> 0x000000 </td><td> RX single: LR11XX stays in RX mode until a
+ * packet is received, then switch to standby RC mode <tr><td> 0xFFFFFF
+ * </td><td> RX continuous: LR11XX stays in RX mode even after reception of a
+ * packet
+ * </table>
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] timeout_in_rtc_step The timeout configuration for RX operation
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_rx_tx_fallback_mode
+ */
+lr11xx_status_t lr11xx_radio_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step );
+
+/*!
+ * @brief Start TX operations
+ *
+ * This command sets the LR11XX to TX mode. The radio must have been configured before using this command with @ref
+ * lr11xx_radio_set_pkt_type
+ *
+ * By default, the timeout parameter allows to return automatically to standby RC mode if the packet has not been
+ * completely transmitted after a certain amount of time. This behavior can be altered by @ref
+ * lr11xx_radio_set_rx_tx_fallback_mode and @ref lr11xx_radio_auto_tx_rx.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] timeout_in_ms The timeout configuration for TX operation
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_rx_tx_fallback_mode
+ */
+lr11xx_status_t lr11xx_radio_set_tx( const void* context, const uint32_t timeout_in_ms );
+
+/*!
+ * @brief Start TX operations
+ *
+ * This command sets the LR11XX to TX mode. The radio must have been configured before using this command with @ref
+ * lr11xx_radio_set_pkt_type
+ *
+ * By default, the timeout parameter allows to return automatically to standby RC mode if the packet has not been
+ * completely transmitted after a certain amount of time. This behavior can be altered by @ref
+ * lr11xx_radio_set_rx_tx_fallback_mode and @ref lr11xx_radio_auto_tx_rx.
+ *
+ * The timeout duration is obtained by:
+ * \f$ timeout\_duration\_ms = timeout \times \frac{1}{32.768} \f$
+ *
+ * Maximal value is 0xFFFFFF.
+ *
+ * If the timeout argument is 0, then no timeout is used.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] timeout_in_rtc_step The timeout configuration for TX operation
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_rx_tx_fallback_mode
+ */
+lr11xx_status_t lr11xx_radio_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step );
+
+/*!
+ * @brief Set the frequency for future radio operations.
+ *
+ * This commands does not set frequency for Wi-Fi and GNSS scan operations.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] freq_in_hz The frequency in Hz to set for radio operations
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_rf_freq( const void* context, const uint32_t freq_in_hz );
+
+/*!
+ * @brief Configure automatic TX after RX or automatic RX after TX
+ *
+ * After issuing this command, using the command @ref SetTx will make the LR11XX doing the following:
+ *   - Enter TX mode as usual
+ *   - Enter configurable Intermediary mode during configurable delay
+ *   - Enter RX mode
+ *
+ * Similarly, after a @ref SetRx command, the LR11XX will do the following:
+ *   - Enter RX mode as usual
+ *   - Enter configurable Intermediary mode during configurable delay
+ *   - Enter TX mode
+ *
+ * In case delay is 0, the LR11XX does not enter Intermediary mode and directly enter the following mode.
+ *
+ * To disable this behavior, use this function with delay set to 0xFFFFFFFF.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] delay Time to spend in Intermediary mode expressed as steps of \f$\frac{1}{32.768 KHz}\f$ steps.
+ * @param [in] intermediary_mode The mode the LR11XX enters after first mode completion during delay time
+ * @param [in] timeout The timeout duration of the automatic RX or TX, expressed as steps of \f$ \frac{1}{32.768KHz} \f$
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_auto_tx_rx( const void* context, const uint32_t delay,
+                                         const lr11xx_radio_intermediary_mode_t intermediary_mode,
+                                         const uint32_t                         timeout );
+
+/*!
+ * @brief Set Channel Activity Detection configuration
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] cad_params The structure defining CAD configuration
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_cad_params( const void* context, const lr11xx_radio_cad_params_t* cad_params );
+
+/*!
+ * @brief Set the packet type
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] pkt_type Packet type to set
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_get_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_pkt_type( const void* context, const lr11xx_radio_pkt_type_t pkt_type );
+
+/*!
+ * @brief Set the modulation parameters for GFSK packets
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] mod_params The structure of modulation configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_gfsk_mod_params( const void*                           context,
+                                                  const lr11xx_radio_mod_params_gfsk_t* mod_params );
+
+/*!
+ * @brief Set the modulation parameters for BPSK packets
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] mod_params The structure of modulation configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_bpsk_mod_params( const void*                           context,
+                                                  const lr11xx_radio_mod_params_bpsk_t* mod_params );
+
+/*!
+ * @brief Set the modulation parameters for LoRa packets
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] mod_params The structure of modulation configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_lora_mod_params( const void*                           context,
+                                                  const lr11xx_radio_mod_params_lora_t* mod_params );
+
+/*!
+ * @brief Set the modulation parameters for LR-FHSS
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] mod_params The structure of modulation configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_lr_fhss_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_lr_fhss_mod_params( const void*                              context,
+                                                     const lr11xx_radio_mod_params_lr_fhss_t* mod_params );
+
+/*!
+ * @brief Set the packet parameters for GFSK packets
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] pkt_params The structure of packet configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_gfsk_mod_params
+ */
+lr11xx_status_t lr11xx_radio_set_gfsk_pkt_params( const void*                           context,
+                                                  const lr11xx_radio_pkt_params_gfsk_t* pkt_params );
+
+/*!
+ * @brief Set the packet parameters for BPSK packets
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] pkt_params The structure of packet configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_bpsk_mod_params
+ */
+lr11xx_status_t lr11xx_radio_set_bpsk_pkt_params( const void*                           context,
+                                                  const lr11xx_radio_pkt_params_bpsk_t* pkt_params );
+
+/*!
+ * @brief Set the packet parameters for LoRa packets
+ *
+ * The command @ref lr11xx_radio_set_pkt_type must be called prior this one.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] pkt_params The structure of packet configuration
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type, lr11xx_radio_set_lora_mod_params
+ */
+lr11xx_status_t lr11xx_radio_set_lora_pkt_params( const void*                           context,
+                                                  const lr11xx_radio_pkt_params_lora_t* pkt_params );
+
+/*!
+ * @brief Set the parameters for TX power and power amplifier ramp time
+ *
+ * The command @ref lr11xx_radio_set_pa_cfg must be called prior calling
+ * lr11xx_radio_set_tx_params.
+ *
+ * The range of possible TX output power values depends on PA selected with @ref lr11xx_radio_set_pa_cfg :
+ *   - for LPA: power value goes from -17dBm to +14dBm (ie. from 0xEF to 0x0E)
+ *   - for HPA: power value goes from -9dBm to +22dBm (ie. from 0xF7 to 0x16)
+ *
+ * Moreover, to use TX output power value higher than +10dBm, the @ref REGPASUPPLY_VBAT supply must have been selected
+ * with @ref lr11xx_radio_set_pa_cfg.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] pwr_in_dbm The TX output power in dBm
+ * @param [in] ramp_time The ramping time configuration for the PA
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_tx_params( const void* context, const int8_t pwr_in_dbm,
+                                            const lr11xx_radio_ramp_time_t ramp_time );
+
+/*!
+ * @brief Sets the Node and Broadcast address used for GFSK
+ *
+ * This setting is used only when filtering is enabled.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] node_address The node address used as filter
+ * @param [in] broadcast_address The broadcast address used as filter
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_pkt_address( const void* context, const uint8_t node_address,
+                                              const uint8_t broadcast_address );
+
+/*!
+ * @brief Alter the chip mode after successfull transmission or reception operation
+ *
+ * This setting is not used during Rx Duty Cycle mode or Auto Tx Rx.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] fallback_mode The chip mode to enter after successfull transmission or reception.
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_rx_tx_fallback_mode( const void*                         context,
+                                                      const lr11xx_radio_fallback_modes_t fallback_mode );
+
+/*!
+ * @brief Configure and start a Rx Duty Cycle operation
+ *
+ * It executes the following steps:
+ *     1. Reception: enters reception state for duration defined by rx_period
+ *         - If mode is LR11XX_RADIO_RX_DUTY_CYCLE_MODE_RX: it is standard RX mode
+ *         - If mode is LR11XX_RADIO_RX_DUTY_CYCLE_MODE_CAD (only in LoRa) : it is CAD operation
+ *     2. Depending on the over-the-air activity detection:
+ *         - In case of positive over-the-air detection, the rx_period timeout is recomputed to the value
+ *           \f$2 \times rx\_period + sleep\_period\f$
+ *         - If no air activity is detected, the LR11XX goes back to sleep mode with retention for a duration defined by
+ * sleep_period
+ *     3. On wake-up, the LR11XX restarts the process with the reception state.
+ *
+ * @remark If mode is configured to @ref LR11XX_RADIO_RX_DUTY_CYCLE_MODE_CAD, then the CAD configuration used in step 1.
+ * is the one set from the last call to @ref lr11xx_radio_set_cad_params.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] rx_period_in_ms The length of Rx period
+ * @param [in] sleep_period_in_ms The length of sleep period
+ * @param [in] mode The operation mode during Rx phase
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_cad_params
+ */
+lr11xx_status_t lr11xx_radio_set_rx_duty_cycle( const void* context, const uint32_t rx_period_in_ms,
+                                                const uint32_t                          sleep_period_in_ms,
+                                                const lr11xx_radio_rx_duty_cycle_mode_t mode );
+
+/*!
+ * @brief Configure and start a Rx Duty Cycle operation
+ *
+ * It executes the following steps:
+ *     1. Reception: enters reception state for duration defined by rx_period
+ *         - If mode is LR11XX_RADIO_RX_DUTY_CYCLE_MODE_RX: it is standard RX mode
+ *         - If mode is LR11XX_RADIO_RX_DUTY_CYCLE_MODE_CAD (only in LoRa) : it is CAD operation
+ *     2. Depending on the over-the-air activity detection:
+ *         - In case of positive over-the-air detection, the rx_period timeout is recomputed to the value
+ *           \f$2 \times rx\_period + sleep\_period\f$
+ *         - If no air activity is detected, the LR11XX goes back to sleep mode with retention for a duration defined by
+ * sleep_period
+ *     3. On wake-up, the LR11XX restarts the process with the reception state.
+ *
+ * @remark If mode is configured to @ref LR11XX_RADIO_RX_DUTY_CYCLE_MODE_CAD, then the CAD configuration used in step 1.
+ * is the one set from the last call to @ref lr11xx_radio_set_cad_params.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] rx_period_in_rtc_step The length of Rx period
+ * @param [in] sleep_period_in_rtc_step The length of sleep period
+ * @param [in] mode The operation mode during Rx phase
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_cad_params
+ */
+lr11xx_status_t lr11xx_radio_set_rx_duty_cycle_with_timings_in_rtc_step( const void*    context,
+                                                                         const uint32_t rx_period_in_rtc_step,
+                                                                         const uint32_t sleep_period_in_rtc_step,
+                                                                         const lr11xx_radio_rx_duty_cycle_mode_t mode );
+
+/*!
+ * @brief Set the Power Amplifier configuration
+ *
+ * It must be called prior using @ref lr11xx_radio_set_tx_params.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] pa_cfg The structure for PA configuration
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_pa_cfg( const void* context, const lr11xx_radio_pa_cfg_t* pa_cfg );
+
+/*!
+ * @brief Define on which event the Rx timeout shall be stopped
+ *
+ * The two options are:
+ *   - Syncword / Header detection
+ *   - Preamble detection
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] stop_timeout_on_preamble The choice of the event to be taken into account
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_stop_timeout_on_preamble( const void* context, const bool stop_timeout_on_preamble );
+
+/*!
+ * @brief Start the CAD mode
+ *
+ * The LoRa packet type shall be selected before this function is called. The fallback mode is configured with
+ * lr11xx_radio_set_cad_params.
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_cad_params, lr11xx_radio_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_cad( const void* context );
+
+/*!
+ * @brief Set the device into Tx continuous wave (RF tone).
+ *
+ * A packet type shall be selected before this function is called.
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_radio_set_pkt_type
+ */
+lr11xx_status_t lr11xx_radio_set_tx_cw( const void* context );
+
+/*!
+ * @brief Set the device into Tx continuous preamble (modulated signal).
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_tx_infinite_preamble( const void* context );
+
+/*!
+ * @brief Configure the LoRa modem to issue a RX timeout after an exact number of symbols given in parameter if no LoRa
+ * modulation is detected
+ *
+ * @warning Values of nb_symbol higher than 255 are only valid for chip firmware equal to or more recent than 0x308.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] nb_symbol number of symbols to compute the timeout
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_lora_sync_timeout( const void* context, const uint16_t nb_symbol );
+
+/*!
+ * @brief Configure the LoRa modem to issue a RX timeout after an exact number of symbols given in parameter if no LoRa
+ * modulation is detected
+ *
+ * @warning This command has been introduced in chip firware 0x0308 and is not available in earlier version
+ *
+ * @remark The number of symbol is computed as mantissa ^ (2*exponent + 1)
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] mantissa Mantissa - from 0 to 31 - to compute the number of symbols of the timeout
+ * @param [in] exponent Exponent - from 0 to 7 - to compute the number of symbols of the timeout
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_lora_sync_timeout_with_mantissa_exponent( const void* context, const uint8_t mantissa,
+                                                                           const uint8_t exponent );
+
+/*!
+ * @brief Configure the seed and the polynomial used to compute CRC in GFSK packet
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] seed Seed used to compute the CRC value
+ * @param [in] polynomial Polynomial used to compute the CRC value
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_gfsk_crc_params( const void* context, const uint32_t seed, const uint32_t polynomial );
+
+/*!
+ * @brief Configure the whitening seed used in GFSK packet
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] seed Whitening seed value
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_gfsk_whitening_seed( const void* context, const uint16_t seed );
+
+/*!
+ * @brief Configure the boost mode in reception
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] enable_boost_mode Boost mode activation
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_cfg_rx_boosted( const void* context, const bool enable_boost_mode );
+
+/*!
+ * @brief Set RSSI calibration table
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] rssi_cal_table RSSI calibration table
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_set_rssi_calibration( const void*                                  context,
+                                                   const lr11xx_radio_rssi_calibration_table_t* rssi_cal_table );
+
+/*!
+ * @brief Gets the radio bw parameter for a given bandwidth in Hz
+ *
+ * @param [in] bw_in_hz Requested GFSK Rx bandwidth
+ * @param [out] bw_parameter Radio parameter immediately above requested bw_in_hz
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_get_gfsk_rx_bandwidth( uint32_t bw_in_hz, lr11xx_radio_gfsk_bw_t* bw_parameter );
+
+/**
+ * @brief Compute the numerator for LoRa time-on-air computation.
+ *
+ * @remark To get the actual time-on-air in seconds, this value has to be divided by the LoRa bandwidth in Hertz.
+ *
+ * @param [in] pkt_p Pointer to the structure holding the LoRa packet parameters
+ * @param [in] mod_p Pointer to the structure holding the LoRa modulation parameters
+ *
+ * @returns LoRa time-on-air numerator
+ */
+uint32_t lr11xx_radio_get_lora_time_on_air_numerator( const lr11xx_radio_pkt_params_lora_t* pkt_p,
+                                                      const lr11xx_radio_mod_params_lora_t* mod_p );
+
+/**
+ * @brief Get the actual value in Hertz of a given LoRa bandwidth
+ *
+ * @param [in] bw LoRa bandwidth parameter
+ *
+ * @returns Actual LoRa bandwidth in Hertz
+ */
+uint32_t lr11xx_radio_get_lora_bw_in_hz( lr11xx_radio_lora_bw_t bw );
+
+/*!
+ * @brief Get the time on air in ms for LoRa transmission
+ *
+ * @param [in] pkt_p Pointer to a structure holding the LoRa packet parameters
+ * @param [in] mod_p Pointer to a structure holding the LoRa modulation parameters
+ *
+ * @returns Time-on-air value in ms for LoRa transmission
+ */
+uint32_t lr11xx_radio_get_lora_time_on_air_in_ms( const lr11xx_radio_pkt_params_lora_t* pkt_p,
+                                                  const lr11xx_radio_mod_params_lora_t* mod_p );
+
+/**
+ * @brief Compute the numerator for GFSK time-on-air computation.
+ *
+ * @remark To get the actual time-on-air in seconds, this value has to be divided by the GFSK bitrate in bits per
+ * second.
+ *
+ * @param [in] pkt_p Pointer to the structure holding the GFSK packet parameters
+ *
+ * @returns GFSK time-on-air numerator
+ */
+uint32_t lr11xx_radio_get_gfsk_time_on_air_numerator( const lr11xx_radio_pkt_params_gfsk_t* pkt_p );
+
+/**
+ * @brief Get the time on air in ms for GFSK transmission
+ *
+ * @param [in] pkt_p Pointer to a structure holding the GFSK packet parameters
+ * @param [in] mod_p Pointer to a structure holding the GFSK modulation parameters
+ *
+ * @returns Time-on-air value in ms for GFSK transmission
+ */
+uint32_t lr11xx_radio_get_gfsk_time_on_air_in_ms( const lr11xx_radio_pkt_params_gfsk_t* pkt_p,
+                                                  const lr11xx_radio_mod_params_gfsk_t* mod_p );
+
+/**
+ * @brief Get the number of RTC steps for a given time in millisecond
+ *
+ * @param [in] time_in_ms Timeout in millisecond
+ *
+ * @returns Number of RTC steps
+ */
+uint32_t lr11xx_radio_convert_time_in_ms_to_rtc_step( uint32_t time_in_ms );
+
+/*!
+ * @brief Configure the radio for BLE beaconing.
+ *
+ * The caller shall ensure that the payload, if provided, follows the format of the Advertising physical channel PDU as defined in the
+ * Bluetooth core specification.
+ *
+ * This automatically configures the syncword to 0x8e89bed6 and the 3-byte CRC (polynomial set to 0x100065b, seed set to
+ * 0x555555).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] channel_id BLE channel - allowed channels are 37, 38, 39
+ * @param [in] buffer Array of bytes to be used as beacon payload (optional)
+ * @param [in] length Number of bytes in the @ref buffer array
+ *
+ * @returns Operation status
+ *
+ * @note As opposed to the function @ref lr11xx_radio_cfg_and_send_ble_beacon, this function  only configures the radio
+ * interface for BLE beacon advertising. To actually start the transmission, the function @ref lr11xx_radio_set_tx must
+ * be called.
+ * @note The previously configured payload with @ref lr11xx_radio_cfg_ble_beacon or @ref
+ * lr11xx_radio_cfg_and_send_ble_beacon is sent if @p length is set to 0, except if a call to @ref
+ * lr11xx_regmem_write_buffer8, @ref lr11xx_lr_fhss_build_frame is done in between or @ref lr11xx_system_set_sleep with
+ * warm start disabled
+ *
+ * @sa lr11xx_radio_cfg_and_send_ble_beacon
+ * @sa lr11xx_radio_set_tx
+ */
+lr11xx_status_t lr11xx_radio_cfg_ble_beacon( const void* context, const uint8_t channel_id, const uint8_t* buffer,
+                                             const uint8_t length );
+
+/**
+ * @brief Get the information from the last received LoRa packet header (if @ref LR11XX_RADIO_LORA_PKT_EXPLICIT) or the
+ * locally configured settings (if @ref LR11XX_RADIO_LORA_PKT_IMPLICIT)
+ *
+ * @remark This function can be called only if @ref LR11XX_RADIO_PKT_TYPE_LORA is selected with @ref
+ * lr11xx_radio_set_pkt_type
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] is_crc_present  CRC configuration
+ * @param [out] cr              LoRa coding rate
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_get_lora_rx_info( const void* context, bool* is_crc_present, lr11xx_radio_lora_cr_t* cr );
+
+/*!
+ * @brief Configure the radio for BLE and send the given beacon on the desired channel.
+ *
+ * The caller shall ensure that the payload, if provided, follows the format of the Advertising physical channel PDU as defined in the
+ * Bluetooth core specification.
+ *
+ * This automatically configures the syncword to 0x8e89bed6 and the 3-byte CRC (polynomial set to 0x100065b, seed set to
+ * 0x555555).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] channel_id BLE channel - allowed channels are 37, 38, 39
+ * @param [in] buffer Array of bytes to be used as beacon payload (optional)
+ * @param [in] length Number of bytes in the @ref buffer array
+ *
+ * @returns Operation status
+ *
+ * @note This function combines the configuration for BLE beaconing - done with @ref lr11xx_radio_cfg_ble_beacon) -
+ * and the actual transmission - done with @ref lr11xx_radio_set_tx.
+ * @note The previously configured payload with @ref lr11xx_radio_cfg_ble_beacon or @ref
+ * lr11xx_radio_cfg_and_send_ble_beacon is sent if @p length is set to 0, except if a call to @ref
+ * lr11xx_regmem_write_buffer8, @ref lr11xx_lr_fhss_build_frame is done in between or @ref lr11xx_system_set_sleep with
+ * warm start disabled
+ *
+ * @sa lr11xx_radio_cfg_ble_beacon
+ */
+lr11xx_status_t lr11xx_radio_cfg_and_send_ble_beacon( const void* context, const uint8_t channel_id,
+                                                      const uint8_t* buffer, const uint8_t length );
+
+/*!
+ * @brief Apply the workaround for the high ACP limitation
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_radio_apply_high_acp_workaround( const void* context );
+
+/**
+ * @brief Get the mantissa and exponent for a given number of symbol
+ *
+ * @remark This function computes the [mantissa, exponent] duple which corresponds to nb_of_symb: the smallest
+ * value verifying both following conditions:
+ * - nb_of_symb >= nb_symbol; and
+ * - nb_of_symb = mant * 2 ^ (2 * exp + 1)
+ *
+ * @param [in] nb_symbol Number of symbols
+ * @param [out] mant Mantissa computed from nb_symb
+ * @param [out] ext Exponent computed from nb_symb
+ *
+ * @returns Number of symbols corresponding to the [mantissa, exponent] duple computed with the following formula:
+ * nb_of_symb = mant * 2 ^ (2 * exp + 1)
+ */
+uint16_t lr11xx_radio_convert_nb_symb_to_mant_exp( const uint16_t nb_symbol, uint8_t* mant, uint8_t* exp );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_RADIO_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_radio_types.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,642 @@
+/*!
+ * @file      lr11xx_radio_types.h
+ *
+ * @brief     Radio driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_RADIO_TYPES_H
+#define LR11XX_RADIO_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdbool.h>
+#include <stdint.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*!
+ * @brief Bit mask to set to indicate a LR-FHSS bitrate is defined in steps of 1/256 bit per seconds
+ */
+#define LR11XX_RADIO_LR_FHSS_BITRATE_DIVIDE_BY_256 ( 0x80000000 )
+
+/*!
+ * @brief LR-FHSS bitrate value at 488.28125 bps defined as steps of 1/256 bitrate per seconds
+ */
+#define LR11XX_RADIO_LR_FHSS_BITRATE_IN_256_BPS_STEPS ( 125000 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief Power Amplifier Selection values
+ *
+ * - Low-power Power Amplifier can reach up to 14dBm
+ * - High-power Power Amplifier can reach up to 22 dBm
+ */
+typedef enum
+{
+    LR11XX_RADIO_PA_SEL_LP = 0x00,  //!< Low-power Power Amplifier
+    LR11XX_RADIO_PA_SEL_HP = 0x01,  //!< High-power Power Amplifier
+    LR11XX_RADIO_PA_SEL_HF = 0x02,  //!< High-frequency Power Amplifier
+} lr11xx_radio_pa_selection_t;
+
+/*!
+ * @brief GFSK Address Filtering configurations
+ *
+ * If Address Filtering is enabled but a wrong address is received, therefore the reception is aborted and the address
+ * error flag of packet status is set.
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_ADDRESS_FILTERING_DISABLE      = 0x00,  //!< Filter deactivated
+    LR11XX_RADIO_GFSK_ADDRESS_FILTERING_NODE_ADDRESS = 0x01,  //!< Filter on Node Address
+    LR11XX_RADIO_GFSK_ADDRESS_FILTERING_NODE_AND_BROADCAST_ADDRESSES =
+        0x02,  //!< Filtering on Node and Broadcast addresses
+} lr11xx_radio_gfsk_address_filtering_t;
+
+/*!
+ * @brief Chip mode after successfull transmission or reception
+ *
+ * Unused for RX duty cycle and AutoTxRx operations
+ */
+typedef enum
+{
+    LR11XX_RADIO_FALLBACK_STDBY_RC   = 0x01,  //!< Standby RC (Default)
+    LR11XX_RADIO_FALLBACK_STDBY_XOSC = 0x02,  //!< Standby XOSC
+    LR11XX_RADIO_FALLBACK_FS         = 0x03   //!< FS
+} lr11xx_radio_fallback_modes_t;
+
+/*!
+ * @brief Ramping time for PA
+ *
+ * This parameter is the ramping time of the PA. A high value improves spectral quality.
+ */
+typedef enum
+{
+    LR11XX_RADIO_RAMP_16_US  = 0x00,  //!< 16 us Ramp Time
+    LR11XX_RADIO_RAMP_32_US  = 0x01,  //!< 32 us Ramp Time
+    LR11XX_RADIO_RAMP_48_US  = 0x02,  //!< 48 us Ramp Time (Default)
+    LR11XX_RADIO_RAMP_64_US  = 0x03,  //!< 64 us Ramp Time
+    LR11XX_RADIO_RAMP_80_US  = 0x04,  //!< 80 us Ramp Time
+    LR11XX_RADIO_RAMP_96_US  = 0x05,  //!< 96 us Ramp Time
+    LR11XX_RADIO_RAMP_112_US = 0x06,  //!< 112 us Ramp Time
+    LR11XX_RADIO_RAMP_128_US = 0x07,  //!< 128 us Ramp Time
+    LR11XX_RADIO_RAMP_144_US = 0x08,  //!< 144 us Ramp Time
+    LR11XX_RADIO_RAMP_160_US = 0x09,  //!< 160 us Ramp Time
+    LR11XX_RADIO_RAMP_176_US = 0x0A,  //!< 176 us Ramp Time
+    LR11XX_RADIO_RAMP_192_US = 0x0B,  //!< 192 us Ramp Time
+    LR11XX_RADIO_RAMP_208_US = 0x0C,  //!< 208 us Ramp Time
+    LR11XX_RADIO_RAMP_240_US = 0x0D,  //!< 240 us Ramp Time
+    LR11XX_RADIO_RAMP_272_US = 0x0E,  //!< 272 us Ramp Time
+    LR11XX_RADIO_RAMP_304_US = 0x0F,  //!< 304 us Ramp Time
+} lr11xx_radio_ramp_time_t;
+
+/*!
+ * @brief LoRa network type configuration
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_NETWORK_PRIVATE = 0x00,  //!< LoRa private network
+    LR11XX_RADIO_LORA_NETWORK_PUBLIC  = 0x01,  //!< LoRa public network
+} lr11xx_radio_lora_network_type_t;
+
+/*!
+ * @brief LoRa Spreading Factor configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_SF5  = 0x05,  //!< Spreading Factor 5
+    LR11XX_RADIO_LORA_SF6  = 0x06,  //!< Spreading Factor 6
+    LR11XX_RADIO_LORA_SF7  = 0x07,  //!< Spreading Factor 7
+    LR11XX_RADIO_LORA_SF8  = 0x08,  //!< Spreading Factor 8
+    LR11XX_RADIO_LORA_SF9  = 0x09,  //!< Spreading Factor 9
+    LR11XX_RADIO_LORA_SF10 = 0x0A,  //!< Spreading Factor 10
+    LR11XX_RADIO_LORA_SF11 = 0x0B,  //!< Spreading Factor 11
+    LR11XX_RADIO_LORA_SF12 = 0x0C,  //!< Spreading Factor 12
+} lr11xx_radio_lora_sf_t;
+
+/*!
+ * @brief LoRa Bandwidth configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_BW_10  = 0x08,  //!< Bandwidth 10.42 kHz
+    LR11XX_RADIO_LORA_BW_15  = 0x01,  //!< Bandwidth 15.63 kHz
+    LR11XX_RADIO_LORA_BW_20  = 0x09,  //!< Bandwidth 20.83 kHz
+    LR11XX_RADIO_LORA_BW_31  = 0x02,  //!< Bandwidth 31.25 kHz
+    LR11XX_RADIO_LORA_BW_41  = 0x0A,  //!< Bandwidth 41.67 kHz
+    LR11XX_RADIO_LORA_BW_62  = 0x03,  //!< Bandwidth 62.50 kHz
+    LR11XX_RADIO_LORA_BW_125 = 0x04,  //!< Bandwidth 125.00 kHz
+    LR11XX_RADIO_LORA_BW_250 = 0x05,  //!< Bandwidth 250.00 kHz
+    LR11XX_RADIO_LORA_BW_500 = 0x06,  //!< Bandwidth 500.00 kHz
+    LR11XX_RADIO_LORA_BW_200 = 0x0D,  //!< Bandwidth 203.00 kHz, 2G4 and compatible with LR112x chips only
+    LR11XX_RADIO_LORA_BW_400 = 0x0E,  //!< Bandwidth 406.00 kHz, 2G4 and compatible with LR112x chips only
+    LR11XX_RADIO_LORA_BW_800 = 0x0F,  //!< Bandwidth 812.00 kHz, 2G4 and compatible with LR112x chips only
+} lr11xx_radio_lora_bw_t;
+
+/*!
+ * @brief LoRa Coding Rate configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_NO_CR     = 0x00,  //!< No Coding Rate
+    LR11XX_RADIO_LORA_CR_4_5    = 0x01,  //!< Coding Rate 4/5 Short Interleaver
+    LR11XX_RADIO_LORA_CR_4_6    = 0x02,  //!< Coding Rate 4/6 Short Interleaver
+    LR11XX_RADIO_LORA_CR_4_7    = 0x03,  //!< Coding Rate 4/7 Short Interleaver
+    LR11XX_RADIO_LORA_CR_4_8    = 0x04,  //!< Coding Rate 4/8 Short Interleaver
+    LR11XX_RADIO_LORA_CR_LI_4_5 = 0x05,  //!< Coding Rate 4/5 Long Interleaver
+    LR11XX_RADIO_LORA_CR_LI_4_6 = 0x06,  //!< Coding Rate 4/6 Long Interleaver
+    LR11XX_RADIO_LORA_CR_LI_4_8 = 0x07,  //!< Coding Rate 4/8 Long Interleaver
+} lr11xx_radio_lora_cr_t;
+
+/*!
+ * @brief Values for intermediary mode
+ */
+typedef enum
+{
+    LR11XX_RADIO_MODE_SLEEP = 0x00,  //!< Sleep / Not recommended with LR1110 FW from 0x0303 to 0x0307 and LR1120 FW
+                                     //!< 0x0101 in case of transition from Rx to Tx in LoRa
+    LR11XX_RADIO_MODE_STANDBY_RC   = 0x01,  //!< Standby RC
+    LR11XX_RADIO_MODE_STANDBY_XOSC = 0x02,  //!< Standby XOSC
+    LR11XX_RADIO_MODE_FS           = 0x03   //!< Frequency Synthesis
+} lr11xx_radio_intermediary_mode_t;
+
+/*!
+ * @brief GFSK Cyclic Redundancy Check configurations
+ *
+ * If this value is set to something other than CRC_OFF, a CRC is automatically computed and added after the end of the
+ * payload on transmitter side. On receiver side, the CRC check is automatically processed.
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_CRC_OFF         = 0x01,  //!< CRC check deactivated
+    LR11XX_RADIO_GFSK_CRC_1_BYTE      = 0x00,
+    LR11XX_RADIO_GFSK_CRC_2_BYTES     = 0x02,
+    LR11XX_RADIO_GFSK_CRC_1_BYTE_INV  = 0x04,
+    LR11XX_RADIO_GFSK_CRC_2_BYTES_INV = 0x06,
+} lr11xx_radio_gfsk_crc_type_t;
+
+/*!
+ * @brief GFSK data whitening configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_DC_FREE_OFF                   = 0x00,  //!< Whitening deactivated
+    LR11XX_RADIO_GFSK_DC_FREE_WHITENING             = 0x01,  //!< Whitening enabled
+    LR11XX_RADIO_GFSK_DC_FREE_WHITENING_SX128X_COMP = 0x03,  //!< Whitening enabled - SX128x compatibility
+} lr11xx_radio_gfsk_dc_free_t;
+
+/*!
+ * @brief GFSK Header Type configurations
+ *
+ * This parameter indicates whether or not the payload length is sent and read over the air.
+ *
+ * If the payload length is known beforehand by both transmitter and receiver, therefore there is no need to send it
+ * over the air. Otherwise, setting this parameter to LR11XX_RADIO_GFSK_PKT_VAR_LEN will make the modem to automatically
+ * prepand a byte containing the payload length to the the payload on transmitter side. On receiver side, this first
+ * byte is read to set the payload length to read.
+ *
+ * This configuration is only available for GFSK packet types.
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_PKT_FIX_LEN = 0x00,  //!< Payload length is not sent/read over the air
+    LR11XX_RADIO_GFSK_PKT_VAR_LEN = 0x01,  //!< Payload length is sent/read over the air
+    LR11XX_RADIO_GFSK_PKT_VAR_LEN_SX128X_COMP =
+        0x02,  //!< Payload length is sent/read over the air - SX128x compatibility
+} lr11xx_radio_gfsk_pkt_len_modes_t;
+
+/*!
+ * @brief GFSK Preamble Detector Length configurations
+ *
+ * This parameter sets the minimum length of preamble bits to be received to continue reception of incoming packet. If a
+ * packet with preamble length lower than this value is being received, the reception stops without generating IRQ.
+ *
+ * This parameter has no impact on TX operations.
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_PREAMBLE_DETECTOR_OFF        = 0x00,
+    LR11XX_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS  = 0x04,
+    LR11XX_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_16BITS = 0x05,
+    LR11XX_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_24BITS = 0x06,
+    LR11XX_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_32BITS = 0x07
+} lr11xx_radio_gfsk_preamble_detector_t;
+
+/*!
+ * @brief LoRa Cyclic Redundancy Check configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_CRC_OFF = 0x00,  //!< CRC deactivated
+    LR11XX_RADIO_LORA_CRC_ON  = 0x01,  //!< CRC activated
+} lr11xx_radio_lora_crc_t;
+
+/*!
+ * @brief LoRa Header type configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_PKT_EXPLICIT = 0x00,  //!< Explicit header: transmitted over the air
+    LR11XX_RADIO_LORA_PKT_IMPLICIT = 0x01,  //!< Implicit header: not transmitted over the air
+} lr11xx_radio_lora_pkt_len_modes_t;
+
+/*!
+ * @brief LoRa IQ mode configurations
+ *
+ * LoRa IQ modes are mutually exclusives: a physical packet sent with standard IQ will not be received by a receiver
+ * configured with inverted IQ.
+ */
+typedef enum
+{
+    LR11XX_RADIO_LORA_IQ_STANDARD = 0x00,  //!< IQ standard
+    LR11XX_RADIO_LORA_IQ_INVERTED = 0x01,  //!< IQ inverted
+} lr11xx_radio_lora_iq_t;
+
+/*!
+ * @brief Packet type values
+ */
+typedef enum
+{
+    LR11XX_RADIO_PKT_NONE         = 0x00,  //!< State after cold start, Wi-Fi or GNSS capture
+    LR11XX_RADIO_PKT_TYPE_GFSK    = 0x01,  //!< GFSK modulation
+    LR11XX_RADIO_PKT_TYPE_LORA    = 0x02,  //!< LoRa modulation
+    LR11XX_RADIO_PKT_TYPE_BPSK    = 0x03,  //!< BPSK modulation
+    LR11XX_RADIO_PKT_TYPE_LR_FHSS = 0x04,  //!< LR-FHSS modulation
+    LR11XX_RADIO_PKT_TYPE_RANGING = 0x05,  //!< Ranging packet
+} lr11xx_radio_pkt_type_t;
+
+/*!
+ * @brief Select power amplifier supply source
+ */
+typedef enum
+{
+    LR11XX_RADIO_PA_REG_SUPPLY_VREG = 0x00,  //!< Power amplifier supplied by the main regulator
+    LR11XX_RADIO_PA_REG_SUPPLY_VBAT = 0x01   //!< Power amplifier supplied by the battery
+} lr11xx_radio_pa_reg_supply_t;
+
+/*!
+ * @brief RX Duty Cycle Modes
+ */
+typedef enum
+{
+    LR11XX_RADIO_RX_DUTY_CYCLE_MODE_RX  = 0x00,  //!< LoRa/GFSK: Uses Rx for listening to packets
+    LR11XX_RADIO_RX_DUTY_CYCLE_MODE_CAD = 0x01,  //!< Only in LoRa: Uses CAD to listen for over-the-air activity
+} lr11xx_radio_rx_duty_cycle_mode_t;
+
+/*!
+ * @brief GFSK Bandwidth configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_BW_4800   = 0x1F,  //!< Bandwidth 4.8 kHz DSB
+    LR11XX_RADIO_GFSK_BW_5800   = 0x17,  //!< Bandwidth 5.8 kHz DSB
+    LR11XX_RADIO_GFSK_BW_7300   = 0x0F,  //!< Bandwidth 7.3 kHz DSB
+    LR11XX_RADIO_GFSK_BW_9700   = 0x1E,  //!< Bandwidth 9.7 kHz DSB
+    LR11XX_RADIO_GFSK_BW_11700  = 0x16,  //!< Bandwidth 11.7 kHz DSB
+    LR11XX_RADIO_GFSK_BW_14600  = 0x0E,  //!< Bandwidth 14.6 kHz DSB
+    LR11XX_RADIO_GFSK_BW_19500  = 0x1D,  //!< Bandwidth 19.5 kHz DSB
+    LR11XX_RADIO_GFSK_BW_23400  = 0x15,  //!< Bandwidth 23.4 kHz DSB
+    LR11XX_RADIO_GFSK_BW_29300  = 0x0D,  //!< Bandwidth 29.3 kHz DSB
+    LR11XX_RADIO_GFSK_BW_39000  = 0x1C,  //!< Bandwidth 39.0 kHz DSB
+    LR11XX_RADIO_GFSK_BW_46900  = 0x14,  //!< Bandwidth 46.9 kHz DSB
+    LR11XX_RADIO_GFSK_BW_58600  = 0x0C,  //!< Bandwidth 58.6 kHz DSB
+    LR11XX_RADIO_GFSK_BW_78200  = 0x1B,  //!< Bandwidth 78.2 kHz DSB
+    LR11XX_RADIO_GFSK_BW_93800  = 0x13,  //!< Bandwidth 93.8 kHz DSB
+    LR11XX_RADIO_GFSK_BW_117300 = 0x0B,  //!< Bandwidth 117.3 kHz DSB
+    LR11XX_RADIO_GFSK_BW_156200 = 0x1A,  //!< Bandwidth 156.2 kHz DSB
+    LR11XX_RADIO_GFSK_BW_187200 = 0x12,  //!< Bandwidth 187.2 kHz DSB
+    LR11XX_RADIO_GFSK_BW_234300 = 0x0A,  //!< Bandwidth 232.3 kHz DSB
+    LR11XX_RADIO_GFSK_BW_312000 = 0x19,  //!< Bandwidth 312.0 kHz DSB
+    LR11XX_RADIO_GFSK_BW_373600 = 0x11,  //!< Bandwidth 373.6 kHz DSB
+    LR11XX_RADIO_GFSK_BW_467000 = 0x09   //!< Bandwidth 467.0 kHz DSB
+} lr11xx_radio_gfsk_bw_t;
+
+/*!
+ * @brief Possible automatic actions when Channel Activity Detection operations terminate
+ *
+ * For RADIO_EXIT_MODE_CAD_RX, LR11XX enters RX mode on activity detected. The timeout value for this RX operation is
+ * defined as:
+ *
+ * \f$ 31.25us \times timeout \f$
+ *
+ * With \f$ timeout \f$ defined in RadioCadParams_t::timeout
+ *
+ * If the CAD operation is negative with RADIO_CAD_EXIT_MODE_RX or if CAD operation is positive with
+ * RADIO_CAD_EXIT_MODE_TX, therefore the LR11XX enters Standby RC mode.
+ */
+typedef enum
+{
+    LR11XX_RADIO_CAD_EXIT_MODE_STANDBYRC = 0x00,  //!< Enter standby RC mode after CAD operation
+    LR11XX_RADIO_CAD_EXIT_MODE_RX        = 0x01,  //!< Enter in RX mode if an activity is detected
+    LR11XX_RADIO_CAD_EXIT_MODE_TX        = 0x10,  //!< Enter in TX mode if no activity is detected
+} lr11xx_radio_cad_exit_mode_t;
+
+/*!
+ * @brief Pulse shape configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_GFSK_PULSE_SHAPE_OFF   = 0x00,  //!< No filter applied
+    LR11XX_RADIO_GFSK_PULSE_SHAPE_BT_03 = 0x08,  //!< Gaussian BT 0.3
+    LR11XX_RADIO_GFSK_PULSE_SHAPE_BT_05 = 0x09,  //!< Gaussian BT 0.5
+    LR11XX_RADIO_GFSK_PULSE_SHAPE_BT_07 = 0x0A,  //!< Gaussian BT 0.7
+    LR11XX_RADIO_GFSK_PULSE_SHAPE_BT_1  = 0x0B   //!< Gaussian BT 1.0
+} lr11xx_radio_gfsk_pulse_shape_t;
+
+/*!
+ * @brief BPSK pulse shape configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_DBPSK_PULSE_SHAPE = 0x16,  //!< Double OSR / RRC / BT 0.7
+} lr11xx_radio_bpsk_pulse_shape_t;
+
+/*!
+ * @brief LR-FHSS bitrate configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LR_FHSS_BITRATE_488_BPS =
+        ( int ) ( LR11XX_RADIO_LR_FHSS_BITRATE_DIVIDE_BY_256 +
+                  LR11XX_RADIO_LR_FHSS_BITRATE_IN_256_BPS_STEPS ),  //!< 488.28215 bps
+} lr11xx_radio_lr_fhss_bitrate_t;
+
+/*!
+ * @brief LR-FHSS pulse shape configurations
+ */
+typedef enum
+{
+    LR11XX_RADIO_LR_FHSS_PULSE_SHAPE_BT_1 = 0x0B  //!< Gaussian BT 1.0
+} lr11xx_radio_lr_fhss_pulse_shape_t;
+
+/*!
+ * @brief Channel Activity Detection parameters
+ *
+ * Parameters detPeak and detMin are to be used for tuning the sensitivity of Channel Activity Detection. It depends on
+ * Spreading Factor, Bandwidth and symbolNum.
+ *
+ * For detPeak, the 5 MSBits are encoding the integer part, the 3 LSBits are encoding 1/8 of the decimal part. For
+ * instance, \f$detPeak = 50\f$ (= 0x32) leads to a ratio being \f$6 + 2 * 1/8 = 6.25\f$.
+ *
+ * detMin is unit free and represents the ratio between the minimal power of a correlation peak and measurement gain
+ * that can be considered as a peak detection. It helps to avoid detection on noise. Authorized values a from 0 to 181.
+ */
+typedef struct lr11xx_radio_cad_params_s
+{
+    uint8_t cad_symb_nb;                         //!< Number of symbols used for CAD detection
+    uint8_t cad_detect_peak;                     //!< Ratio for CAD between correlator peak and average
+                                                 //!< (Default 0x32)
+    uint8_t cad_detect_min;                      //!< Minimum power of the correlation peak to be
+                                                 //!< considered as a positive CAD (Default 0x0A)
+    lr11xx_radio_cad_exit_mode_t cad_exit_mode;  //!< Automated action on CAD completion
+    uint32_t                     cad_timeout;    //!< Value used to compute timeout
+} lr11xx_radio_cad_params_t;
+
+/*!
+ * @brief Status of GFSK received packet
+ */
+typedef struct lr11xx_radio_pkt_status_gfsk_s
+{
+    int8_t  rssi_sync_in_dbm;  //!< RSSI value latched on detection of the last received packet Sync Address
+    int8_t  rssi_avg_in_dbm;   //!< RSSI averaged over the payload of the last received packet
+    uint8_t rx_len_in_bytes;   //!< Length of the last received packet [Bytes]
+    bool    is_addr_err;  //!< Address filtering status. Asserted if received packet address does not match node address
+                          //!< nor broadcast address
+    bool is_crc_err;      //!< CRC status of the current packet (applicable only in RX, with CRC enabled)
+    bool is_len_err;      //!< Asserted when the length of last received packet is greater than the maximal length
+                          //!< (applicable only in RX with variable length packet)
+    bool is_abort_err;    //!< Asserted when the current packet has been aborted (applicable in RX and TX)
+    bool is_received;     //!< Asserted when packet reception is done (applicable in RX)
+    bool is_sent;         //!< Asserted when packet transmission is done (applicable in TX)
+} lr11xx_radio_pkt_status_gfsk_t;
+
+/*!
+ * @brief Status of received packet
+ */
+typedef struct lr11xx_radio_pkt_status_lora_s
+{
+    int8_t rssi_pkt_in_dbm;         //!< Average RSSI over last received packet.
+    int8_t snr_pkt_in_db;           //!< SNR estimated on last received packet.
+    int8_t signal_rssi_pkt_in_dbm;  //!< RSSI of last packet latched after
+} lr11xx_radio_pkt_status_lora_t;
+
+/*!
+ * @brief Length and offset of received packet
+ */
+typedef struct lr11xx_radio_rx_buffer_status_s
+{
+    uint8_t pld_len_in_bytes;      //!< Length of received packet [Bytes]
+    uint8_t buffer_start_pointer;  //!< Offset in the reception buffer of
+                                   //!< first byte received [Bytes]
+} lr11xx_radio_rx_buffer_status_t;
+
+/*!
+ * @brief GFSK packet statistic structure
+ */
+typedef struct lr11xx_radio_stats_gfsk_s
+{
+    uint16_t nb_pkt_received;   //!< Total number of received packets
+    uint16_t nb_pkt_crc_error;  //!< Total number of received packets with CRC error
+    uint16_t nb_pkt_len_error;  //!< Total number of received packets with a length error
+} lr11xx_radio_stats_gfsk_t;
+
+/*!
+ * @brief LoRa packet statistic structure
+ */
+typedef struct lr11xx_radio_stats_lora_s
+{
+    uint16_t nb_pkt_received;      //!< Total number of received packets
+    uint16_t nb_pkt_crc_error;     //!< Total number of received packets with CRC error
+    uint16_t nb_pkt_header_error;  //!< Total number of packets with header error
+    uint16_t nb_pkt_falsesync;     //!< Total number of false sync
+} lr11xx_radio_stats_lora_t;
+
+/*!
+ * @brief Modulation configuration for GFSK packet
+ */
+typedef struct lr11xx_radio_mod_params_gfsk_s
+{
+    uint32_t                        br_in_bps;     //!< GFSK bitrate [bit/s]
+    lr11xx_radio_gfsk_pulse_shape_t pulse_shape;   //!< GFSK pulse shape
+    lr11xx_radio_gfsk_bw_t          bw_dsb_param;  //!< GFSK bandwidth
+    uint32_t                        fdev_in_hz;    //!< GFSK frequency deviation [Hz]
+} lr11xx_radio_mod_params_gfsk_t;
+
+/*!
+ * @brief Modulation configuration for BPSK packet
+ */
+typedef struct lr11xx_radio_mod_params_bpsk_s
+{
+    uint32_t                        br_in_bps;    //!< BPSK bitrate [bit/s]
+    lr11xx_radio_bpsk_pulse_shape_t pulse_shape;  //!< BPSK pulse shape
+} lr11xx_radio_mod_params_bpsk_t;
+
+/*!
+ * @brief Modulation configuration for LoRa packet
+ */
+typedef struct lr11xx_radio_mod_params_lora_s
+{
+    lr11xx_radio_lora_sf_t sf;    //!< LoRa spreading factor
+    lr11xx_radio_lora_bw_t bw;    //!< LoRa bandwidth
+    lr11xx_radio_lora_cr_t cr;    //!< LoRa coding rate
+    uint8_t                ldro;  //!< LoRa LDRO
+} lr11xx_radio_mod_params_lora_t;
+
+/*!
+ * @brief Modulation configuration for LR-FHSS packets
+ */
+typedef struct lr11xx_radio_mod_params_lr_fhss_s
+{
+    lr11xx_radio_lr_fhss_bitrate_t     br_in_bps;    //!< LR-FHSS bitrate
+    lr11xx_radio_lr_fhss_pulse_shape_t pulse_shape;  //!< LR-FHSS pulse shape
+} lr11xx_radio_mod_params_lr_fhss_t;
+
+/*!
+ * @brief Packet parameter configuration for GFSK packets
+ */
+typedef struct lr11xx_radio_pkt_params_gfsk_s
+{
+    uint16_t                              preamble_len_in_bits;   //!< GFSK Preamble length [bits]
+    lr11xx_radio_gfsk_preamble_detector_t preamble_detector;      //!< GFSK Preamble detection configuration
+    uint8_t                               sync_word_len_in_bits;  //!< GFSK Syncword length [bits]
+    lr11xx_radio_gfsk_address_filtering_t address_filtering;      //!< GFSK Address filtering/comparison configuration
+    lr11xx_radio_gfsk_pkt_len_modes_t     header_type;            //!< GFSK Header type configuration
+    uint8_t                               pld_len_in_bytes;       //!< GFSK Payload length [bytes]
+    lr11xx_radio_gfsk_crc_type_t          crc_type;               //!< GFSK CRC configuration
+    lr11xx_radio_gfsk_dc_free_t           dc_free;                //!< GFSK Whitening configuration
+} lr11xx_radio_pkt_params_gfsk_t;
+
+/*!
+ * @brief Packet parameter configuration for BPSK packets
+ */
+typedef struct lr11xx_radio_pkt_params_bpsk_s
+{
+    uint8_t  pld_len_in_bytes;  //!< Payload length [bytes]
+    uint16_t ramp_up_delay;     //!< Delay to fine tune ramp-up time, if non-zero
+    uint16_t ramp_down_delay;   //!< Delay to fine tune ramp-down time, if non-zero
+    uint16_t pld_len_in_bits;   //!< If non-zero, used to ramp down PA before end of a payload with length that is not a
+                                //!< multiple of 8. pld_len_in_bits <= pld_len_in_bytes * 8
+} lr11xx_radio_pkt_params_bpsk_t;
+
+/*!
+ * @brief Packet parameter configuration for LoRa packets
+ */
+typedef struct lr11xx_radio_pkt_params_lora_s
+{
+    uint16_t                          preamble_len_in_symb;  //!< LoRa Preamble length [symbols]
+    lr11xx_radio_lora_pkt_len_modes_t header_type;           //!< LoRa Header type configuration
+    uint8_t                           pld_len_in_bytes;      //!< LoRa Payload length [bytes]
+    lr11xx_radio_lora_crc_t           crc;                   //!< LoRa CRC configuration
+    lr11xx_radio_lora_iq_t            iq;                    //!< LoRa IQ configuration
+} lr11xx_radio_pkt_params_lora_t;
+
+/*!
+ * @brief Configuration of Power Amplifier
+ *
+ * @ref pa_duty_cycle controls the duty cycle of Power Amplifier according to:
+ * \f$ dutycycle = 0.2 + 0.04 \times pa_duty_cycle \f$
+ * It can be used to adapt the TX multi-band operation using a single-matching network.
+ *
+ * The allowed duty cycle values for LPA are from 0.2 to 0.48 (by step of 0.04). Therefore possible values for
+ * pa_duty_cycle go from 0 to 7.
+ *
+ * The allowed duty cycle values for HPA go from 0.2 to 0.36 (by step of 0.04). Therefore in this case, the possible
+ * values for pa_duty_cycle go from 0 to 4.
+ *
+ * @ref pa_hp_sel controls the number of slices for HPA according to: \f$ \#slices = pa_hp_sel + 1 \f$
+ */
+typedef struct lr11xx_radio_pa_cfg_s
+{
+    lr11xx_radio_pa_selection_t  pa_sel;         //!< Power Amplifier selection
+    lr11xx_radio_pa_reg_supply_t pa_reg_supply;  //!< Power Amplifier regulator supply source
+    uint8_t                      pa_duty_cycle;  //!< Power Amplifier duty cycle (Default 0x04)
+    uint8_t                      pa_hp_sel;      //!< Number of slices for HPA (Default 0x07)
+} lr11xx_radio_pa_cfg_t;
+
+/*!
+ * @brief RSSI calibration table
+ */
+typedef struct lr11xx_radio_rssi_calibration_table_s
+{
+    struct
+    {
+        uint8_t g4;
+        uint8_t g5;
+        uint8_t g6;
+        uint8_t g7;
+        uint8_t g8;
+        uint8_t g9;
+        uint8_t g10;
+        uint8_t g11;
+        uint8_t g12;
+        uint8_t g13;
+        uint8_t g13hp1;
+        uint8_t g13hp2;
+        uint8_t g13hp3;
+        uint8_t g13hp4;
+        uint8_t g13hp5;
+        uint8_t g13hp6;
+        uint8_t g13hp7;
+    } gain_tune;  //!< Used to set gain tune value for RSSI calibration
+
+    int16_t gain_offset;  //!< Used to set gain offset value for RSSI calibration
+} lr11xx_radio_rssi_calibration_table_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_RADIO_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging.h	2023-11-01 13:54:44.861751439 -0700
@@ -0,0 +1,234 @@
+/**
+ * @file      lr11xx_ranging.h
+ *
+ * @brief     Ranging driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_RANGING_H
+#define LR11XX_RANGING_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+#include "lr11xx_ranging_types.h"
+#include "lr11xx_radio_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/**
+ * @brief Length in byte of the ranging result
+ */
+#define LR11XX_RANGING_RESULT_LENGTH ( 4 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTION PROTOTYPES ---------------------------------------------
+ */
+
+/**
+ * @brief Set the ranging address for this subordinate device.
+ *
+ * @param [in] context      Chip implementation context
+ * @param [in] address      32-bit subordinate address (default is 0x00000019)
+ * @param [in] check_length Number of bytes to be checked when comparing the device's
+ *                          address with request address value contained in received
+ *                          ranging frames (valid range 1..4, default is 4)
+ *
+ * @returns Operation status
+ *
+ * @note The address set by this function is only used in subordinate mode, that is,
+ * when receiving ranging requests. While processing received request packets,
+ * the ranging subordinate compares @p check_length bytes (LSB first) of
+ * the request address with its own address. Packets with non-matching request
+ * addresses are discarded.
+ */
+lr11xx_status_t lr11xx_ranging_set_address( const void* context, const uint32_t address, const uint8_t check_length );
+
+/**
+ * @brief Set the ranging address used for requests sent in manager mode.
+ *
+ * @param [in] context         Chip implementation context
+ * @param [in] request_address 32-bit request address (default is 0x00000019)
+ *
+ * @returns Operation status
+ *
+ * @note The request address set by this function is only used in manager mode,
+ * that is, when sending ranging requests. The @p request_address is copied
+ * into the corresponding field in the next ranging request sent.
+ */
+lr11xx_status_t lr11xx_ranging_set_request_address( const void* context, const uint32_t request_address );
+
+/**
+ * @brief Set the transceiver RX/TX delay indicator to be compensated during ranging.
+ *
+ * The transceiver hardware induces a delay depending on the physical layer
+ * configuration (bandwidth, spreading factor). To achieve the desired ranging
+ * accuracy, this delay needs to be compensated by a calibration value.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] delay_indicator   Delay value corresponding to the used bandwidth and spreading factor
+ *
+ * @returns lr11xx_status_t Operation status
+ *
+ * @note The same delay_indicator value needs to be configured in both manager and subordinate devices.
+ */
+lr11xx_status_t lr11xx_ranging_set_rx_tx_delay_indicator( const void* context, const uint32_t delay_indicator );
+
+/**
+ * @brief Configure ranging specific parameters.
+ *
+ * It is recommended to always call this command when configuring the ranging operation with @p nb_symbols = 15.
+ * This value balances the ranging accuracy and power consumption.
+ *
+ * @param [in] context    Chip implementation context
+ * @param [in] nb_symbols Number of symbols contained in responses sent by subordinates
+ *
+ * @returns lr11xx_status_t Operation status
+ *
+ * @note The ranging parameters need to be configured in both manager and subordinate devices.
+ */
+lr11xx_status_t lr11xx_ranging_set_parameters( const void* context, const uint8_t nb_symbols );
+
+/**
+ * @brief Get the ranging result on the manager device.
+ *
+ * Retrieve the ranging result item corresponding to the given item type @p type.
+ *
+ * @param [in]  context Chip implementation context
+ * @param [in]  type    Result item type to be retrieved
+ * @param [out] result  Result data buffer
+ *
+ * @returns lr11xx_status_t Operation status
+ *
+ * @note This function is only available on devices in manager mode after
+ * the ranging is terminated.
+ */
+lr11xx_status_t lr11xx_ranging_get_raw_result( const void* context, const lr11xx_ranging_result_type_t type,
+                                               uint8_t result[LR11XX_RANGING_RESULT_LENGTH] );
+
+/**
+ * @brief Get the recommended hardware delay indicator on ranging TX/RX.
+ *
+ * @param [in]  bw    LoRa bandwidth used for ranging
+ * @param [in]  sf    LoRa spreading factor used for ranging
+ * @param [out] delay_indicator Recommended hardware delay indicator for the given physical layer configuration
+ *
+ * @returns Operation status
+ * @retval LR11XX_STATUS_OK on success
+ * @retval LR11XX_STATUS_ERROR if the given physical layer configuration is invalid
+ */
+lr11xx_status_t lr11xx_ranging_get_recommended_rx_tx_delay_indicator( lr11xx_radio_lora_bw_t bw,
+                                                                      lr11xx_radio_lora_sf_t sf,
+                                                                      uint32_t*              delay_indicator );
+
+/**
+ * @brief Set recommended hardware delay indicator on ranging TX/RX for SF/BW.
+ *
+ * This helper function calls first @p lr11xx_ranging_get_recommended_rx_tx_delay_indicator to get the recommended delay
+ * indicator value for the given SF/BW, then it calls @p lr11xx_ranging_set_rx_tx_delay_indicator to configure the
+ * LR11xx.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in]  bw    LoRa bandwidth used for ranging
+ * @param [in]  sf    LoRa spreading factor used for ranging
+ *
+ * @returns Operation status
+ * @retval LR11XX_STATUS_OK on success
+ * @retval LR11XX_STATUS_ERROR if the given physical layer configuration is invalid or other error
+ */
+lr11xx_status_t lr11xx_ranging_set_recommended_rx_tx_delay_indicator( const void* context, lr11xx_radio_lora_bw_t bw,
+                                                                      lr11xx_radio_lora_sf_t sf );
+
+/**
+ * @brief Convert the raw distance result obtained from the device to a distance result [m].
+ *
+ * This function is meaningful only to convert a ranging result obtained by calling @p lr11xx_ranging_get_raw_result
+ * with type set to @p LR11XX_RANGING_RESULT_TYPE_RAW
+ *
+ * @param [in] ranging_bw Bandwidth used during ranging
+ * @param [in] raw_distance_buf Buffer containing the raw distance result
+ *
+ * @returns int32_t Distance result [m]
+ *
+ * @see lr11xx_ranging_get_raw_result
+ *
+ * @note The caller must ensure that the @p ranging_bw parameter is one of the supported ones,
+ * i.e., #LR11XX_RADIO_LORA_BW_125, #LR11XX_RADIO_LORA_BW_250, #LR11XX_RADIO_LORA_BW_500.
+ */
+int32_t lr11xx_ranging_distance_raw_to_meter( lr11xx_radio_lora_bw_t ranging_bw,
+                                              const uint8_t          raw_distance_buf[LR11XX_RANGING_RESULT_LENGTH] );
+
+/**
+ * @brief Convert the raw RSSI result obtained from the device to an RSSI result.
+ *
+ * This function is meaningful only to convert a ranging result obtained by calling @p lr11xx_ranging_get_raw_result
+ * with type set to @p LR11XX_RANGING_RESULT_TYPE_RSSI
+ *
+ * @param [in] raw_rssi_buf Buffer containing the raw RSSI result
+ *
+ * @returns int8_t RSSI result [dBm]
+ *
+ * @see lr11xx_ranging_get_raw_result
+ */
+static inline int8_t lr11xx_ranging_rssi_raw_to_value( const uint8_t raw_rssi_buf[LR11XX_RANGING_RESULT_LENGTH] )
+{
+    // Only the last byte is meaningful
+    return -( int8_t )( raw_rssi_buf[3] >> 1 );
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_RANGING_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_ranging_types.h	2023-11-01 13:55:09.330470273 -0700
@@ -0,0 +1,82 @@
+/**
+ * @file      lr11xx_ranging_types.h
+ *
+ * @brief     Ranging driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_RANGING_TYPES_H
+#define LR11XX_RANGING_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/**
+ * @brief Ranging result types
+ */
+typedef enum lr11xx_ranging_result_type_e
+{
+    LR11XX_RANGING_RESULT_TYPE_RAW = 0,  ///< Raw distance result
+    LR11XX_RANGING_RESULT_TYPE_RSSI,     ///< Ranging RSSI
+} lr11xx_ranging_result_type_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTION PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_RANGING_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_regmem.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_regmem.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_regmem.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_regmem.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,207 @@
+/*!
+ * @file      lr11xx_regmem.h
+ *
+ * @brief     Register/memory driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_REGMEM_H
+#define LR11XX_REGMEM_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*!
+ * @brief Maximum number of words that can be written to / read from a LR11XX chip with regmem32 commands
+ */
+#define LR11XX_REGMEM_MAX_WRITE_READ_WORDS 64
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Write up to 64 words into register memory space of LR11XX.
+ *
+ * A word is 32-bit long. The writing operations write contiguously in register memory, starting at the address
+ * provided.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] address The register memory address to start writing operation
+ * @param [in] data The buffer of words to write into memory. Its size must be enough to contain length words.
+ * @param [in] length Number of words to write into memory
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_regmem_read_regmem32
+ */
+lr11xx_status_t lr11xx_regmem_write_regmem32( const void* context, const uint32_t address, const uint32_t* buffer,
+                                              const uint8_t length );
+
+/*!
+ * @brief Read up to 64 words into register memory space of LR11XX.
+ *
+ * A word is 32-bit long. The reading operations read contiguously from register memory, starting at the address
+ * provided.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] address The register memory address to start reading operation
+ * @param [in] length Number of words to read from memory
+ * @param [out] buffer Pointer to a words array to be filled with content from memory. Its size must be enough to
+ * contain at least length words.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_regmem_write_regmem32
+ */
+lr11xx_status_t lr11xx_regmem_read_regmem32( const void* context, const uint32_t address, uint32_t* buffer,
+                                             const uint8_t length );
+
+/*!
+ * @brief Write bytes into register memory space of LR11XX.
+ *
+ * A byte is 8-bit long. The writing operations write contiguously in register memory, starting at the address provided.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] address The register memory address to start writing operation
+ * @param [in] data The buffer of bytes to write into memory. Its size must be enough to contain length bytes
+ * @param [in] length Number of bytes to write into memory
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_regmem_read_mem8
+ */
+lr11xx_status_t lr11xx_regmem_write_mem8( const void* context, const uint32_t address, const uint8_t* buffer,
+                                          const uint8_t length );
+
+/*!
+ * @brief Read bytes into register memory space of LR11XX.
+ *
+ * A byte is 8-bit long. The reading operations read contiguously from register memory, starting at the address
+ * provided.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] address The register memory address to start reading operation
+ * @param [in] length Number of bytes to read from memory
+ * @param [in] buffer Pointer to a byte array to be filled with content from memory. Its size must be enough to contain
+ * at least length bytes
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_regmem_write_mem8
+ */
+lr11xx_status_t lr11xx_regmem_read_mem8( const void* context, const uint32_t address, uint8_t* buffer,
+                                         const uint8_t length );
+
+/*!
+ * @brief Write bytes into radio TX buffer memory space of LR11XX.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] data The buffer of bytes to write into radio buffer. Its size must be enough to contain length bytes
+ * @param [in] length Number of bytes to write into radio buffer
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_regmem_read_buffer8
+ */
+lr11xx_status_t lr11xx_regmem_write_buffer8( const void* context, const uint8_t* buffer, const uint8_t length );
+
+/*!
+ * @brief Read bytes from radio RX buffer memory space of LR11XX.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] offset Memory offset to start reading
+ * @param [in] length Number of bytes to read from radio buffer
+ * @param [in] data Pointer to a byte array to be filled with content from radio buffer. Its size must be enough to
+ * contain at least length bytes
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_regmem_write_buffer8
+ */
+lr11xx_status_t lr11xx_regmem_read_buffer8( const void* context, uint8_t* buffer, const uint8_t offset,
+                                            const uint8_t length );
+
+/*!
+ * @brief Clear radio RX buffer
+ *
+ * Set to 0x00 all content of the radio RX buffer
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_regmem_clear_rxbuffer( const void* context );
+
+/*!
+ * @brief Read-modify-write data at given register/memory address
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] address The register memory address to be modified
+ * @param [in] mask The mask to be applied on read data
+ * @param [in] data The data to be written
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_regmem_write_regmem32_mask( const void* context, const uint32_t address, const uint32_t mask,
+                                                   const uint32_t data );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_REGMEM_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,585 @@
+/*!
+ * @file      lr11xx_system.h
+ *
+ * @brief     System driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_SYSTEM_H
+#define LR11XX_SYSTEM_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr11xx_system_types.h"
+#include "lr11xx_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*!
+ * @brief Frequency step in MHz used to compute the image calibration parameter
+ *
+ * @see lr11xx_system_calibrate_image_in_mhz
+ */
+#define LR11XX_SYSTEM_IMAGE_CALIBRATION_STEP_IN_MHZ 4
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Reset the radio
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_reset( const void* context );
+
+/**
+ * @brief Wake the radio up from sleep mode.
+ *
+ * @param [in]  context Chip implementation context.
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_wakeup( const void* context );
+
+/*!
+ * @brief Return stat1, stat2, and irq_status
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] stat1      Pointer to a variable for holding stat1. Can be NULL.
+ * @param [out] stat2      Pointer to a variable for holding stat2. Can be NULL.
+ * @param [out] irq_status Pointer to a variable for holding irq_status. Can be NULL.
+ *
+ * @returns Operation status
+ *
+ * @remark To simplify system integration, this function does not actually execute the GetStatus command, which would
+ * require bidirectional SPI communication. It obtains the stat1, stat2, and irq_status values by performing an ordinary
+ * SPI read (which is required to send null/NOP bytes on the MOSI line). This is possible since the LR11XX returns these
+ * values automatically whenever a read that does not directly follow a response-carrying command is performed.
+ * Unlike with the GetStatus command, however, the reset status information is NOT cleared by this command. The function
+ * @ref lr11xx_system_clear_reset_status_info may be used for this purpose when necessary.
+ */
+lr11xx_status_t lr11xx_system_get_status( const void* context, lr11xx_system_stat1_t* stat1,
+                                          lr11xx_system_stat2_t* stat2, lr11xx_system_irq_mask_t* irq_status );
+
+/*!
+ * @brief Clear the reset status information stored in stat2
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_clear_reset_status_info( const void* context );
+
+/*!
+ * @brief Return irq_status
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] irq_status irq_status status variable
+ *
+ * @returns Operation status
+ */
+static inline lr11xx_status_t lr11xx_system_get_irq_status( const void* context, lr11xx_system_irq_mask_t* irq_status )
+{
+    return lr11xx_system_get_status( context, 0, 0, irq_status );
+}
+
+/*!
+ * @brief Return the version of the system (hardware and software)
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] version Pointer to the structure holding the system version
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_get_version( const void* context, lr11xx_system_version_t* version );
+
+/*!
+ * @brief Return the system errors
+ *
+ * Errors may be fixed following:
+ * - calibration error can be fixed by attempting another RC calibration;
+ * - XOsc related errors may be due to hardware problems, can be fixed by reset;
+ * - PLL lock related errors can be due to not-locked PLL, or by attempting to use an out-of-band frequency, can be
+ * fixed by executing a PLL calibration, or by using other frequencies.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] errors Pointer to a value holding error flags
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_calibrate, lr11xx_system_calibrate_image, lr11xx_system_clear_errors
+ */
+lr11xx_status_t lr11xx_system_get_errors( const void* context, uint16_t* errors );
+
+/*!
+ * @brief Clear all error flags pending.
+ *
+ * This function cannot be used to clear flags individually.
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_get_errors
+ */
+lr11xx_status_t lr11xx_system_clear_errors( const void* context );
+
+/*!
+ * @brief lr11xx_system_calibrate the requested blocks
+ *
+ * This function can be called in any mode of the chip.
+ *
+ * The chip will return to standby RC mode on exit. Potential calibration issues can be read out with
+ * lr11xx_system_get_errors command.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] calib_param Structure holding the reference to blocks to be calibrated
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_get_errors
+ */
+lr11xx_status_t lr11xx_system_calibrate( const void* context, const uint8_t calib_param );
+
+/*!
+ * @brief Configure the regulator mode to be used in specific modes
+ *
+ * This function shall only be called in standby RC mode.
+ *
+ * The reg_mode parameter defines if the DC-DC converter is switched on in the following modes: STANDBY XOSC, FS, RX, TX
+ * and RX_CAPTURE.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] reg_mode Regulator mode configuration
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_set_reg_mode( const void* context, const lr11xx_system_reg_mode_t reg_mode );
+
+/*!
+ * @brief Launch an image calibration valid for all frequencies inside an interval, in steps
+ *
+ * This function can be called in any mode of the chip.
+ *
+ * The chip will return to standby RC mode on exit. Potential calibration issues can be read out with
+ * lr11xx_system_get_errors command.
+ *
+ * The frequencies given in parameters are defined in 4MHz step (Eg. 900MHz corresponds to 0xE1). If freq1 = freq2, only
+ * one calibration is performed.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] freq1 Image calibration interval lower bound, in steps
+ * @param [in] freq2 Image calibration interval upper bound, in steps
+ *
+ * @remark freq1 must be less than or equal to freq2
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_get_errors
+ */
+lr11xx_status_t lr11xx_system_calibrate_image( const void* context, const uint8_t freq1, const uint8_t freq2 );
+
+/*!
+ * @brief Launch an image calibration valid for all frequencies inside an interval, in MHz
+ *
+ * @remark This function relies on @ref lr11xx_system_calibrate_image
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] freq1_in_mhz Image calibration interval lower bound, in MHz
+ * @param [in] freq2_in_mhz Image calibration interval upper bound, in MHz
+ *
+ * @remark freq1 must be less than or equal to freq2
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_calibrate_image
+ */
+lr11xx_status_t lr11xx_system_calibrate_image_in_mhz( const void* context, const uint16_t freq1_in_mhz,
+                                                      const uint16_t freq2_in_mhz );
+
+/*!
+ * @brief Set the RF switch configurations for each RF setup
+ *
+ * This function shall only be called in standby RC mode.
+ *
+ * By default, no DIO is used to control a RF switch. All DIOs are set in High-Z mode.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] rf_switch_cfg Pointer to a structure that holds the switches configuration
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_set_dio_as_rf_switch( const void*                         context,
+                                                    const lr11xx_system_rfswitch_cfg_t* rf_switch_cfg );
+
+/*!
+ * @brief Set which interrupt signals are redirected to the dedicated DIO pin
+ *
+ * By default, no interrupt signal is redirected.
+ *
+ * The dedicated DIO pin will remain asserted until all redirected interrupt signals are cleared with a call to
+ * lr11xx_system_clear_irq_status.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] irqs_to_enable_dio1 Variable that holds the interrupt mask for dio1
+ * @param [in] irqs_to_enable_dio2 Variable that holds the interrupt mask for dio2
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_clear_irq_status
+ */
+lr11xx_status_t lr11xx_system_set_dio_irq_params( const void*                    context,
+                                                  const lr11xx_system_irq_mask_t irqs_to_enable_dio1,
+                                                  const lr11xx_system_irq_mask_t irqs_to_enable_dio2 );
+
+/*!
+ * @brief Clear requested bits in the internal pending interrupt register
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] irqs_to_clear Variable that holds the interrupts to be cleared
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_clear_irq_status( const void* context, const lr11xx_system_irq_mask_t irqs_to_clear );
+
+/**
+ * @brief This helper function clears any radio irq status flags that are set and returns the flags that were cleared.
+ *
+ * @param [in] context Chip implementation context.
+ * @param [out] irq Pointer to a variable for holding the system interrupt status. Can be NULL.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_get_irq_status, lr11xx_system_clear_irq_status
+ */
+lr11xx_status_t lr11xx_system_get_and_clear_irq_status( const void* context, lr11xx_system_irq_mask_t* irq );
+
+/*!
+ * @brief Defines which clock is used as Low Frequency (LF) clock
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] lfclock_cfg Low frequency clock configuration
+ * @param [in] wait_for_32k_ready Tells the radio if it has to check if 32k source is ready before driving busy low
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_calibrate, lr11xx_system_calibrate_image
+ */
+lr11xx_status_t lr11xx_system_cfg_lfclk( const void* context, const lr11xx_system_lfclk_cfg_t lfclock_cfg,
+                                         const bool wait_for_32k_ready );
+
+/*!
+ * @brief Enable and configure TCXO supply voltage and detection timeout
+ *
+ * This function shall only be called in standby RC mode.
+ *
+ * The timeout parameter is the maximum time the firmware waits for the TCXO to be ready. The timeout duration is given
+ * by: \f$ timeout\_duration\_us = timeout \times 30.52 \f$
+ *
+ * The TCXO mode can be disabled by setting timeout parameter to 0.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] tune Supply voltage value
+ * @param [in] timeout Gating time before which the radio starts its Rx / Tx operation
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_calibrate, lr11xx_system_calibrate_image
+ */
+lr11xx_status_t lr11xx_system_set_tcxo_mode( const void* context, const lr11xx_system_tcxo_supply_voltage_t tune,
+                                             const uint32_t timeout );
+
+/*!
+ * @brief Software reset of the chip.
+ *
+ * This function should be used to reboot the chip in a specified mode. Rebooting in flash mode presumes that the
+ * content in flash memory is not corrupted (i.e. the integrity check performed by the bootloader before executing the
+ * first instruction in flash is OK).
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] stay_in_bootloader Selector to stay in bootloader or execute flash code after reboot. If true, the
+ * bootloader will not execute the flash code but activate SPI interface to allow firmware upgrade
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_reboot( const void* context, const bool stay_in_bootloader );
+
+/*!
+ * @brief Returns the value of Vbat
+ *
+ * Vbat value (in V) is a function of Vana (typ. 1.35V) using the following
+ * formula: \f$ Vbat_{V} = (5 \times \frac{Vbat}{255} - 1) \times Vana \f$
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] vbat A pointer to the Vbat value
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_get_vbat( const void* context, uint8_t* vbat );
+
+/*!
+ * @brief Returns the value of Temp
+ *
+ * The temperature (in °C) is a function of Vana (typ. 1.35V), Vbe25 (Vbe voltage @ 25°C, typ. 0.7295V) and VbeSlope
+ * (typ. -1.7mV/°C) using the following formula:
+ * \f$ Temperature_{°C} = (\frac{Temp(10:0)}{2047} \times Vana - Vbe25) \times \frac{1000}{VbeSlope} + 25 \f$
+ *
+ * @remark If a TCXO is used, make sure to configure it with @ref lr11xx_system_set_tcxo_mode before calling this
+ * function
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] temp A pointer to the Temp value
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_get_temp( const void* context, uint16_t* temp );
+
+/*!
+ * @brief Set the device into Sleep or Deep Sleep Mode
+ *
+ * The sleep_cfg parameter defines in which sleep mode the device is put and if it wakes up after a given time on the
+ * RTC event.
+ *
+ * The sleep_time parameter is taken into account only when RtcTimeout = 1. It sets the sleep time in number of clock
+ * cycles: \f$ sleep\_time\_ms = sleep_time \times \frac{1}{32.768} \f$
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] sleep_cfg Sleep mode configuration
+ * @param [in] sleep_time Value of the RTC timeout (if RtcTimeout = 1)
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_set_standby, lr11xx_system_set_fs
+ */
+lr11xx_status_t lr11xx_system_set_sleep( const void* context, const lr11xx_system_sleep_cfg_t sleep_cfg,
+                                         const uint32_t sleep_time );
+
+/*!
+ * @brief Set the device into the requested Standby mode
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] standby_cfg Stand by mode configuration (RC or XOSC)
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_set_sleep, lr11xx_system_set_fs
+ */
+lr11xx_status_t lr11xx_system_set_standby( const void* context, const lr11xx_system_standby_cfg_t standby_cfg );
+
+/*!
+ * @brief Set the device into Frequency Synthesis (FS) mode
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_set_standby, lr11xx_system_set_sleep
+ */
+lr11xx_status_t lr11xx_system_set_fs( const void* context );
+
+/*!
+ * @brief Erase an info page
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] info_page_id Info page to be erased. Only LR11XX_SYSTEM_INFOPAGE_1 is allowed.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_write_infopage, lr11xx_system_read_infopage
+ */
+lr11xx_status_t lr11xx_system_erase_infopage( const void* context, const lr11xx_system_infopage_id_t info_page_id );
+
+/*!
+ * @brief Write data in an info page
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] info_page_id Info page where data are written. Only LR11XX_SYSTEM_INFOPAGE_1 is allowed.
+ * @param [in] address Address within the info page (aligned on 32-bit data)
+ * @param [in] data Pointer to the data to write (data buffer shall be - at least - length words long)
+ * @param [in] length Number of 32-bit data to write (maximum value is 64)
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_erase_infopage, lr11xx_system_read_infopage
+ */
+lr11xx_status_t lr11xx_system_write_infopage( const void* context, const lr11xx_system_infopage_id_t info_page_id,
+                                              const uint16_t address, const uint32_t* data, const uint8_t length );
+
+/*!
+ * @brief Read data from an info page
+ *
+ * It is possible to cross from page 0 to 1 if (address + length >= 512)
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] info_page_id Info page where data are read
+ * @param [in] address Address within the info page (aligned on 32-bit data)
+ * @param [out] data Pointer to the data to read (data buffer shall be - at least - length words long)
+ * @param [in] length Number of 32-bit data to read (maximum value is 64)
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_system_erase_infopage, lr11xx_system_write_infopage
+ */
+lr11xx_status_t lr11xx_system_read_infopage( const void* context, const lr11xx_system_infopage_id_t info_page_id,
+                                             const uint16_t address, uint32_t* data, const uint8_t length );
+
+/*!
+ * @brief Read and return the Unique Identifier of the LR11XX
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] unique_identifier The buffer to be filled with the Unique Identifier of the LR11XX. It is up to the
+ * application to ensure unique_identifier is long enough to hold the unique identifier
+ *
+ * @returns Operation status
+ *
+ * @see LR11XX_SYSTEM_UID_LENGTH
+ */
+lr11xx_status_t lr11xx_system_read_uid( const void* context, lr11xx_system_uid_t unique_identifier );
+
+/*!
+ * @brief Read and return the Join EUI of the LR11XX
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] join_eui The buffer to be filled with Join EUI of the LR11XX. It is up to the application to ensure
+ * join_eui is long enough to hold the join EUI
+ *
+ * @returns Operation status
+ *
+ * @see LR11XX_SYSTEM_JOIN_EUI_LENGTH
+ */
+lr11xx_status_t lr11xx_system_read_join_eui( const void* context, lr11xx_system_join_eui_t join_eui );
+
+/*!
+ * @brief Compute and return the PIN of the LR11XX based on factory default EUIs
+ *
+ * @remark Calling this command also triggers a derivation of network and application keys (available as @ref
+ * LR11XX_CRYPTO_KEYS_IDX_NWK_KEY and @ref LR11XX_CRYPTO_KEYS_IDX_APP_KEY) based on factory default EUIs
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] pin The buffer to be filled with PIN of the LR11XX. It is up to the application to ensure pin is long
+ * enough to hold the PIN
+ *
+ * @returns Operation status
+ *
+ * @see LR11XX_SYSTEM_PIN_LENGTH
+ */
+lr11xx_status_t lr11xx_system_read_pin( const void* context, lr11xx_system_pin_t pin );
+
+/*!
+ * @brief Compute and return the PIN of the LR11XX based on EUIs provided as parameters
+ *
+ * @remark Calling this command also triggers a derivation of network and application keys (available as @ref
+ * LR11XX_CRYPTO_KEYS_IDX_NWK_KEY and @ref LR11XX_CRYPTO_KEYS_IDX_APP_KEY) based on EUIs provided as parameters
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] device_eui Custom Device EUI
+ * @param [in] join_eui Custom Join EUI
+ * @param [in] rfu Parameter RFU - shall be set to 0x00
+ * @param [out] pin The buffer to be filled with PIN of the LR11XX. It is up to the application to ensure pin is long
+ * enough to hold the PIN
+ *
+ * @returns Operation status
+ *
+ * @see LR11XX_SYSTEM_PIN_LENGTH
+ */
+lr11xx_status_t lr11xx_system_read_pin_custom_eui( const void* context, lr11xx_system_uid_t device_eui,
+                                                   lr11xx_system_join_eui_t join_eui, uint8_t rfu,
+                                                   lr11xx_system_pin_t pin );
+
+/*!
+ * @brief Read and return a 32-bit random number
+ *
+ * @remark Radio operating mode must be set into standby.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] random_number 32-bit random number
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_get_random_number( const void* context, uint32_t* random_number );
+
+/*!
+ * @brief Enable the CRC on SPI transactions
+ *
+ * @remark This command shall always be sent with a CRC (to both enable and disable the feature). The function does not
+ * take care of this additional byte - which is under the responsibility of the underlying HAL functions
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] enable_crc CRC
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_enable_spi_crc( const void* context, bool enable_crc );
+
+/*!
+ * @brief Configure the GPIO drive in sleep mode
+ *
+ * @remark GPIO stands for RF switch and IRQ line DIOs
+ *
+ * @note This command is available from firmware version 0x0306
+ *
+ * @param [in] context       Chip implementation context
+ * @param [in] enable_drive  GPIO drive configuration (true: enabled / false: disabled)
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_system_drive_dio_in_sleep_mode( const void* context, bool enable_drive );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_SYSTEM_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_system_types.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,350 @@
+/*!
+ * @file      lr11xx_system_types.h
+ *
+ * @brief     System driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_SYSTEM_TYPES_H
+#define LR11XX_SYSTEM_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+#include <stdbool.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*!
+ * @brief Length in byte of the LR11XX version blob
+ */
+#define LR11XX_SYSTEM_VERSION_LENGTH ( 4 )
+
+/*!
+ * @brief Length of the LR11XX Unique Identifier in bytes
+ *
+ * The LR11XX Unique Identifiers is an 8 byte long buffer
+ */
+#define LR11XX_SYSTEM_UID_LENGTH ( 8 )
+#define LR11XX_SYSTEM_JOIN_EUI_LENGTH ( 8 )
+#define LR11XX_SYSTEM_PIN_LENGTH ( 4 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/**
+ * @brief Fixed-length array to store a UID
+ */
+typedef uint8_t lr11xx_system_uid_t[LR11XX_SYSTEM_UID_LENGTH];
+
+/**
+ * @brief Fixed-length array to store a joinEUI
+ */
+typedef uint8_t lr11xx_system_join_eui_t[LR11XX_SYSTEM_JOIN_EUI_LENGTH];
+
+/**
+ * @brief Fixed-length array to store a PIN
+ */
+typedef uint8_t lr11xx_system_pin_t[LR11XX_SYSTEM_PIN_LENGTH];
+
+/**
+ * @brief Type to store system interrupt flags
+ */
+typedef uint32_t lr11xx_system_irq_mask_t;
+
+/**
+ * @brief Interrupt flags
+ */
+enum lr11xx_system_irq_e
+{
+    LR11XX_SYSTEM_IRQ_NONE                   = ( 0 << 0 ),
+    LR11XX_SYSTEM_IRQ_TX_DONE                = ( 1 << 2 ),
+    LR11XX_SYSTEM_IRQ_RX_DONE                = ( 1 << 3 ),
+    LR11XX_SYSTEM_IRQ_PREAMBLE_DETECTED      = ( 1 << 4 ),
+    LR11XX_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID = ( 1 << 5 ),
+    LR11XX_SYSTEM_IRQ_HEADER_ERROR           = ( 1 << 6 ),
+    LR11XX_SYSTEM_IRQ_CRC_ERROR              = ( 1 << 7 ),
+    LR11XX_SYSTEM_IRQ_CAD_DONE               = ( 1 << 8 ),
+    LR11XX_SYSTEM_IRQ_CAD_DETECTED           = ( 1 << 9 ),
+    LR11XX_SYSTEM_IRQ_TIMEOUT                = ( 1 << 10 ),
+    LR11XX_SYSTEM_IRQ_LR_FHSS_INTRA_PKT_HOP  = ( 1 << 11 ),
+    LR11XX_SYSTEM_IRQ_RANGING_REQ_VALID      = ( 1 << 14 ),
+    LR11XX_SYSTEM_IRQ_RANGING_REQ_DISCARDED  = ( 1 << 15 ),
+    LR11XX_SYSTEM_IRQ_RANGING_RESP_DONE      = ( 1 << 16 ),
+    LR11XX_SYSTEM_IRQ_RANGING_EXCH_VALID     = ( 1 << 17 ),
+    LR11XX_SYSTEM_IRQ_RANGING_TIMEOUT        = ( 1 << 18 ),
+    LR11XX_SYSTEM_IRQ_GNSS_SCAN_DONE         = ( 1 << 19 ),
+    LR11XX_SYSTEM_IRQ_WIFI_SCAN_DONE         = ( 1 << 20 ),
+    LR11XX_SYSTEM_IRQ_EOL                    = ( 1 << 21 ),
+    LR11XX_SYSTEM_IRQ_CMD_ERROR              = ( 1 << 22 ),
+    LR11XX_SYSTEM_IRQ_ERROR                  = ( 1 << 23 ),
+    LR11XX_SYSTEM_IRQ_FSK_LEN_ERROR          = ( 1 << 24 ),
+    LR11XX_SYSTEM_IRQ_FSK_ADDR_ERROR         = ( 1 << 25 ),
+    LR11XX_SYSTEM_IRQ_LORA_RX_TIMESTAMP =
+        ( 1 << 27 ),  //!< Available since firmware LR1110 0x0308 / LR1120 0x0102 / LR1121 0x0102
+    LR11XX_SYSTEM_IRQ_ALL_MASK =
+        LR11XX_SYSTEM_IRQ_TX_DONE | LR11XX_SYSTEM_IRQ_RX_DONE | LR11XX_SYSTEM_IRQ_PREAMBLE_DETECTED |
+        LR11XX_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID | LR11XX_SYSTEM_IRQ_HEADER_ERROR | LR11XX_SYSTEM_IRQ_CRC_ERROR |
+        LR11XX_SYSTEM_IRQ_CAD_DONE | LR11XX_SYSTEM_IRQ_CAD_DETECTED | LR11XX_SYSTEM_IRQ_TIMEOUT |
+        LR11XX_SYSTEM_IRQ_LR_FHSS_INTRA_PKT_HOP | LR11XX_SYSTEM_IRQ_RANGING_REQ_VALID |
+        LR11XX_SYSTEM_IRQ_RANGING_REQ_DISCARDED | LR11XX_SYSTEM_IRQ_RANGING_RESP_DONE |
+        LR11XX_SYSTEM_IRQ_RANGING_EXCH_VALID | LR11XX_SYSTEM_IRQ_RANGING_TIMEOUT |
+        LR11XX_SYSTEM_IRQ_GNSS_SCAN_DONE | LR11XX_SYSTEM_IRQ_WIFI_SCAN_DONE |
+        LR11XX_SYSTEM_IRQ_EOL | LR11XX_SYSTEM_IRQ_CMD_ERROR | LR11XX_SYSTEM_IRQ_ERROR |
+        LR11XX_SYSTEM_IRQ_FSK_LEN_ERROR | LR11XX_SYSTEM_IRQ_FSK_ADDR_ERROR | LR11XX_SYSTEM_IRQ_LORA_RX_TIMESTAMP,
+};
+
+/**
+ * @brief Calibration flags
+ */
+enum lr11xx_system_calibration_e
+{
+    LR11XX_SYSTEM_CALIB_LF_RC_MASK  = ( 1 << 0 ),
+    LR11XX_SYSTEM_CALIB_HF_RC_MASK  = ( 1 << 1 ),
+    LR11XX_SYSTEM_CALIB_PLL_MASK    = ( 1 << 2 ),
+    LR11XX_SYSTEM_CALIB_ADC_MASK    = ( 1 << 3 ),
+    LR11XX_SYSTEM_CALIB_IMG_MASK    = ( 1 << 4 ),
+    LR11XX_SYSTEM_CALIB_PLL_TX_MASK = ( 1 << 5 ),
+};
+
+typedef uint8_t lr11xx_system_cal_mask_t;
+
+/**
+ * @brief Error flags
+ */
+enum lr11xx_system_errors_e
+{
+    LR11XX_SYSTEM_ERRORS_LF_RC_CALIB_MASK   = ( 1 << 0 ),
+    LR11XX_SYSTEM_ERRORS_HF_RC_CALIB_MASK   = ( 1 << 1 ),
+    LR11XX_SYSTEM_ERRORS_ADC_CALIB_MASK     = ( 1 << 2 ),
+    LR11XX_SYSTEM_ERRORS_PLL_CALIB_MASK     = ( 1 << 3 ),
+    LR11XX_SYSTEM_ERRORS_IMG_CALIB_MASK     = ( 1 << 4 ),
+    LR11XX_SYSTEM_ERRORS_HF_XOSC_START_MASK = ( 1 << 5 ),
+    LR11XX_SYSTEM_ERRORS_LF_XOSC_START_MASK = ( 1 << 6 ),
+    LR11XX_SYSTEM_ERRORS_PLL_LOCK_MASK      = ( 1 << 7 ),
+};
+
+typedef uint16_t lr11xx_system_errors_t;
+
+/**
+ * @brief Chip modes
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_CHIP_MODE_SLEEP     = 0x00,
+    LR11XX_SYSTEM_CHIP_MODE_STBY_RC   = 0x01,
+    LR11XX_SYSTEM_CHIP_MODE_STBY_XOSC = 0x02,
+    LR11XX_SYSTEM_CHIP_MODE_FS        = 0x03,
+    LR11XX_SYSTEM_CHIP_MODE_RX        = 0x04,
+    LR11XX_SYSTEM_CHIP_MODE_TX        = 0x05,
+    LR11XX_SYSTEM_CHIP_MODE_LOC       = 0x06,
+} lr11xx_system_chip_modes_t;
+
+/**
+ * @brief Reset status
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_RESET_STATUS_CLEARED      = 0x00,
+    LR11XX_SYSTEM_RESET_STATUS_ANALOG       = 0x01,
+    LR11XX_SYSTEM_RESET_STATUS_EXTERNAL     = 0x02,
+    LR11XX_SYSTEM_RESET_STATUS_SYSTEM       = 0x03,
+    LR11XX_SYSTEM_RESET_STATUS_WATCHDOG     = 0x04,
+    LR11XX_SYSTEM_RESET_STATUS_IOCD_RESTART = 0x05,
+    LR11XX_SYSTEM_RESET_STATUS_RTC_RESTART  = 0x06,
+} lr11xx_system_reset_status_t;
+
+/**
+ * @brief Command status
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_CMD_STATUS_FAIL = 0x00,
+    LR11XX_SYSTEM_CMD_STATUS_PERR = 0x01,
+    LR11XX_SYSTEM_CMD_STATUS_OK   = 0x02,
+    LR11XX_SYSTEM_CMD_STATUS_DATA = 0x03,
+} lr11xx_system_command_status_t;
+
+/**
+ * @brief Low-frequency clock modes
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_LFCLK_RC   = 0x00,  //!<  (Default)
+    LR11XX_SYSTEM_LFCLK_XTAL = 0x01,
+    LR11XX_SYSTEM_LFCLK_EXT  = 0x02
+} lr11xx_system_lfclk_cfg_t;
+
+/**
+ * @brief Regulator modes
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_REG_MODE_LDO  = 0x00,  //!< (Default)
+    LR11XX_SYSTEM_REG_MODE_DCDC = 0x01,
+} lr11xx_system_reg_mode_t;
+
+/**
+ * @brief Info page ID
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_INFOPAGE_0 = 0x00,  //!< Info page #0
+    LR11XX_SYSTEM_INFOPAGE_1 = 0x01,  //!< Info page #1
+} lr11xx_system_infopage_id_t;
+
+/**
+ * @brief RF switch configuration pin
+ */
+enum lr11xx_system_rfswitch_cfg_pin_e
+{
+    LR11XX_SYSTEM_RFSW0_HIGH = ( 1 << 0 ),
+    LR11XX_SYSTEM_RFSW1_HIGH = ( 1 << 1 ),
+    LR11XX_SYSTEM_RFSW2_HIGH = ( 1 << 2 ),
+    LR11XX_SYSTEM_RFSW3_HIGH = ( 1 << 3 ),
+    LR11XX_SYSTEM_RFSW4_HIGH = ( 1 << 4 ),
+};
+
+/**
+ * @brief RF switch configuration structure definition
+ */
+typedef struct lr11xx_system_rfswitch_cfg_s
+{
+    uint8_t enable;
+    uint8_t standby;
+    uint8_t rx;
+    uint8_t tx;
+    uint8_t tx_hp;
+    uint8_t tx_hf;
+    uint8_t gnss;
+    uint8_t wifi;
+} lr11xx_system_rfswitch_cfg_t;
+
+/**
+ * @brief Stand by configuration values
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_STANDBY_CFG_RC   = 0x00,
+    LR11XX_SYSTEM_STANDBY_CFG_XOSC = 0x01
+} lr11xx_system_standby_cfg_t;
+
+/**
+ * @brief TCXO supply voltage values
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_TCXO_CTRL_1_6V = 0x00,  //!< Supply voltage = 1.6v
+    LR11XX_SYSTEM_TCXO_CTRL_1_7V = 0x01,  //!< Supply voltage = 1.7v
+    LR11XX_SYSTEM_TCXO_CTRL_1_8V = 0x02,  //!< Supply voltage = 1.8v
+    LR11XX_SYSTEM_TCXO_CTRL_2_2V = 0x03,  //!< Supply voltage = 2.2v
+    LR11XX_SYSTEM_TCXO_CTRL_2_4V = 0x04,  //!< Supply voltage = 2.4v
+    LR11XX_SYSTEM_TCXO_CTRL_2_7V = 0x05,  //!< Supply voltage = 2.7v
+    LR11XX_SYSTEM_TCXO_CTRL_3_0V = 0x06,  //!< Supply voltage = 3.0v
+    LR11XX_SYSTEM_TCXO_CTRL_3_3V = 0x07,  //!< Supply voltage = 3.3v
+} lr11xx_system_tcxo_supply_voltage_t;
+
+/**
+ * @brief Status register 1 structure definition
+ */
+typedef struct lr11xx_system_stat1_s
+{
+    lr11xx_system_command_status_t command_status;
+    bool                           is_interrupt_active;
+} lr11xx_system_stat1_t;
+
+/**
+ * @brief Status register 2 structure definition
+ */
+typedef struct lr11xx_system_stat2_s
+{
+    lr11xx_system_reset_status_t reset_status;
+    lr11xx_system_chip_modes_t   chip_mode;
+    bool                         is_running_from_flash;
+} lr11xx_system_stat2_t;
+
+/**
+ * @brief Chip type values
+ */
+typedef enum
+{
+    LR11XX_SYSTEM_VERSION_TYPE_LR1110 = 0x01,
+    LR11XX_SYSTEM_VERSION_TYPE_LR1120 = 0x02,
+    LR11XX_SYSTEM_VERSION_TYPE_LR1121 = 0x03,
+} lr11xx_system_version_type_t;
+
+/**
+ * @brief Version structure definition
+ */
+typedef struct lr11xx_system_version_s
+{
+    uint8_t                      hw;
+    lr11xx_system_version_type_t type;
+    uint16_t                     fw;
+} lr11xx_system_version_t;
+
+/**
+ * @brief Sleep configuration structure definition
+ */
+typedef struct lr11xx_system_sleep_cfg_s
+{
+    bool is_warm_start;
+    bool is_rtc_timeout;
+} lr11xx_system_sleep_cfg_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_SYSTEM_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_types.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,76 @@
+/*!
+ * @file      lr11xx_types.h
+ *
+ * @brief     Type definitions for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_TYPES_H
+#define LR11XX_TYPES_H
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+#define LR11XX_CMD_LENGTH_MAX ( 512 )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/**
+ * @brief LR11XX status
+ */
+typedef enum lr11xx_status_e
+{
+    LR11XX_STATUS_OK    = 0,
+    LR11XX_STATUS_ERROR = 3,
+} lr11xx_status_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#endif  // LR11XX_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,628 @@
+/*!
+ * @file      lr11xx_wifi.h
+ *
+ * @brief     Wi-Fi passive scan driver definition for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_WIFI_H
+#define LR11XX_WIFI_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include "lr11xx_regmem.h"
+#include "lr11xx_wifi_types.h"
+#include "lr11xx_types.h"
+#include "lr11xx_system_types.h"
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+#ifndef LR11XX_WIFI_N_RESULTS_MAX_PER_CHUNK
+/*!
+ * @brief The number of results max to fetch per SPI communication with the chip
+ *
+ * This macro is used by the internals of the driver to size the internal
+ * buffers of the driver used in the *read results* functions.
+ *
+ * It can be defined externally at compile time, or just before including this file.
+ *
+ * Its value can be programmatically obtained at runtime by calling lr11xx_wifi_get_nb_results_max_per_chunk() function.
+ *
+ * Its default value is set to the maximum number of results saved by LR11XX chip.
+ *
+ * @warning Its value must be in the range [1,32] (inclusive). Defining out of this range leads to undefined behavior.
+ */
+#define LR11XX_WIFI_N_RESULTS_MAX_PER_CHUNK LR11XX_WIFI_MAX_RESULTS
+#endif  // LR11XX_WIFI_N_RESULTS_MAX_PER_CHUNK
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+/*!
+ * @brief Start a Wi-Fi passive scan operation
+ *
+ * During the complete passive scan operation, the LR11XX remains busy and cannot receive any commands. Using this
+ * command **DOES** reset the results already obtained by previous passive scan operations.
+ *
+ * The result can be read at the end of the passive scan issuing the command lr11xx_wifi_get_nb_results (to get the
+ * number of results to read) and lr11xx_wifi_read_basic_complete_results or
+ * lr11xx_wifi_read_basic_mac_type_channel_results to actually get the result bytes.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] signal_type The type of Wi-Fi Signals to scan for. If LR11XX_WIFI_TYPE_SCAN_B_G_N is selected, the LR11XX
+ * already starts by scanning all selected channels for Wi-Fi signals B. Then the LR11XX scans all selected channels for
+ * Wi-Fi signals G/N.
+ * @param [in] channels Mask of the Wi-Fi channels to scan
+ * @param [in] scan_mode Scan mode to execute
+ * @param [in] max_results The maximal number of results to gather. When this limit is reached, the passive scan
+ * automatically stop. Range of allowed values is [1:32]. Note that value 0 is forbidden.
+ * @param [in] nb_scan_per_channel The number of internal scan sequences per channel scanned. Range of accepted values
+ * is [1:255]. Note that value 0 is forbidden.
+ * @param [in] timeout_in_ms The maximal duration of a single preamble search. Expressed in ms. Range of allowed values
+ * is [1:65535]. Note that value 0 is forbidden.
+ * @param [in] abort_on_timeout If true, the beacon search jumps to next configured Wi-Fi channel (or stop if there is
+ * no more channel to scan) as soon as a search timeout is encountered
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_read_basic_complete_results, lr11xx_wifi_read_basic_mac_type_channel_results
+ */
+lr11xx_status_t lr11xx_wifi_scan( const void* context, const lr11xx_wifi_signal_type_scan_t signal_type,
+                                  const lr11xx_wifi_channel_mask_t channels, const lr11xx_wifi_mode_t scan_mode,
+                                  const uint8_t max_results, const uint8_t nb_scan_per_channel,
+                                  const uint16_t timeout_in_ms, const bool abort_on_timeout );
+
+/*!
+ * @brief Start a Wi-Fi passive scan for country codes extraction
+ *
+ * This command starts a Wi-Fi passive scan operation for Beacons and Probe Responses on Wi-Fi type B only. It is to be
+ * used to extract the Country Code fields.
+ *
+ * During the passive scan, the results are filtered to keep only single MAC addresses.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] channels_mask Mask of the Wi-Fi channels to scan
+ * @param [in] nb_max_results The maximum number of country code to gather. When this limit is reached, the passive scan
+ * automatically stops. Maximal value is 32
+ * @param [in] nb_scan_per_channel Maximal number of scan attempts per channel. Maximal value is 255
+ * @param [in] timeout_in_ms The maximal duration of a single beacon search. Expressed in ms. Maximal value is 65535 ms
+ * @param [in] abort_on_timeout If true, the beacon search jumps to next configured Wi-Fi channel (or stop if there is
+ * no more channel to scan) as soon as a search timeout is encountered
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_search_country_code( const void* context, const lr11xx_wifi_channel_mask_t channels_mask,
+                                                 const uint8_t nb_max_results, const uint8_t nb_scan_per_channel,
+                                                 const uint16_t timeout_in_ms, const bool abort_on_timeout );
+
+/*!
+ * @brief Start a Wi-Fi passive scan operation with duration stop conditions
+ *
+ * This passive scan API does not require the number of scan per channel, so
+ * that it searches for Wi-Fi signals until it finds one, or until the
+ * exhaustion of timeout_per_scan_ms or timeout_per_channel_ms.
+ *
+ * The maximal duration of a scan is determined by the number of channels to scan times the timeout_per_channel_ms
+ * configured. However, this duration may be exceeded depending on the crystal drift of the clock source and on the
+ * instant the last Wi-Fi signal is detected by the device.
+ * Therefore the maximal duration of a Wi-Fi scan with this API is provided by the following equations:
+ *
+ * For signal type being `LR11XX_WIFI_TYPE_SCAN_B`, `LR11XX_WIFI_TYPE_SCAN_G` or `LR11XX_WIFI_TYPE_SCAN_N`:
+ *
+ * \f$ T_{max} = N_{channel} \times ((1 + Xtal_{precision})timeout\_per\_channel + T_{offset} ) \f$
+ *
+ * \f$ Xtal_{precision} \f$ depends on the crystal used as clock source.
+ * If the clock source is configured with 32kHz internal RC, then \f$ Xtal_{precision} = 1/100 \f$
+ *
+ * \f$ T_{offset} \f$ depends on the \f$ signal\_type \f$ and the \f$scan\_mode\f$ selected:
+ *
+ *   - LR11XX_WIFI_TYPE_SCAN_B:
+ *     - if \f$scan\_mode != LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$: 2.31 ms
+ *     - if \f$scan\_mode == LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$: 9.59 ms
+ *   - LR11XX_WIFI_TYPE_SCAN_G:
+ *     - if \f$scan\_mode != LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$: 52.55 ms
+ *     - if \f$scan\_mode == LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$: N/A
+ *
+ * For signal type being `LR11XX_WIFI_TYPE_SCAN_B_G_N`:
+ *
+ * \f$ T_{max} = 2 \times N_{channel} \times (1 + Xtal_{precision})timeout\_per\_channel + T_{offset} \f$
+ *
+ * \f$ T_{offset} \f$ depends on the \f$scan\_mode\f$ selected:
+ * - \f$scan\_mode != LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$: 54.86 ms
+ * - \f$scan\_mode == LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$: 9.59 ms.
+ *
+ * @note With \f$scan\_mode != LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$ the T_offset is actually the worst case of
+ * Wi-Fi type B and Wi-Fi type G/N. Moreover, the Wi-Fi types G and N are scanned within the same steps (it is not two
+ * different scans). So the T_offset is the addition of 2.31 + 52.55 = 54.86.
+ *
+ * @note With \f$scan\_mode == LR11XX\_WIFI\_SCAN\_MODE\_FULL\_BEACON\f$, only Wi-Fi types B can be scanned. So scans
+ * for Wi-Fi types G/N are silently discarded. Therefore the T_offset is the same as for scan with Wi-Fi type B.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] signal_type The type of Wi-Fi Signals to scan for. If LR11XX_WIFI_TYPE_SCAN_B_G_N is selected, the LR11XX
+ * already starts by scanning all selected channels for Wi-Fi signals B. Then the LR11XX scans all selected channels for
+ * Wi-Fi signals G/N.
+ * @param [in] channels Mask of the Wi-Fi channels to scan
+ * @param [in] scan_mode Scan mode to execute
+ * @param [in] max_results The maximal number of results to gather. When this
+ * limit is reached, the passive scan automatically stop. Maximal value is 32
+ * @param [in] timeout_per_channel_ms The time to spend scanning one channel. Expressed in ms. Value 0 is forbidden and
+ * will result in the raise of WIFI_SCAN_DONE interrupt, with stat1.command_status being set to
+ * LR11XX_SYSTEM_CMD_STATUS_PERR
+ * @param [in] timeout_per_scan_ms The maximal time to spend in preamble detection for each single scan. The time spent
+ * on preamble search is reset at each new preamble search. If the time spent on preamble search reach this timeout, the
+ * scan on the current channel stops and start on next channel. If set to 0, the command will keep listening until
+ * exhaustion of timeout_per_channel_ms or until nb_max_results is reached. Expressed in ms. Range of allowed values is
+ * [0:65535].
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_read_basic_results, lr11xx_wifi_read_extended_results
+ */
+lr11xx_status_t lr11xx_wifi_scan_time_limit( const void* context, const lr11xx_wifi_signal_type_scan_t signal_type,
+                                             const lr11xx_wifi_channel_mask_t channels,
+                                             const lr11xx_wifi_mode_t scan_mode, const uint8_t max_results,
+                                             const uint16_t timeout_per_channel_ms,
+                                             const uint16_t timeout_per_scan_ms );
+
+/*!
+ * @brief Start a Wi-Fi passive scan for country codes extraction with duration stop conditions
+ *
+ * This command starts a Wi-Fi passive scan operation for Beacons and Probe Responses on Wi-Fi type B only. It is to be
+ * used to extract the Country Code fields.
+ * This passive scan API does not require the number of scan per channel, so that it searches for Wi-Fi signals until it
+ * finds one, or until the exhaustion of timeout_per_scan_ms or timeout_per_channel_ms.
+ *
+ * The maximal duration of a scan is determined by the number of channels to scan times the timeout_per_channel_ms
+ * configured. However, this duration may be exceeded depending on the crystal drift of the clock source and on the
+ * instant the last Wi-Fi signal is detected by the device.
+ * Therefore the maximal duration of a Wi-Fi scan with this API is provided by the following equation:
+ *
+ * \f$ T_{max} = N_{channel} \times ((1 + Xtal_{precision})timeout\_per\_channel + T_{offset} ) \f$
+ *
+ * \f$ Xtal_{precision} \f$ depends on the crystal used as clock source.
+ * If the clock source is configured with 32kHz internal RC, then \f$ Xtal_{precision} = 1/100 \f$
+ *
+ * \f$ T_{offset} \f$ is always the same: 9.59 ms.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] channels_mask Mask of the Wi-Fi channels to scan
+ * @param [in] nb_max_results The maximum number of country code to gather. When this limit is reached, the passive scan
+ * automatically stops. Maximal value is 32
+ * @param [in] timeout_per_channel_ms The time to spend scanning one channel. Expressed in ms. Value 0 is forbidden and
+ * will result in the raise of WIFI_SCAN_DONE interrupt, with stat1.command_status being set to
+ * LR11XX_SYSTEM_CMD_STATUS_PERR
+ * @param [in] timeout_per_scan_ms The maximal time to spend in preamble detection for each single scan. The time spent
+ * on preamble search is reset at each new preamble search. If the time spent on preamble search reach this timeout, the
+ * scan on the current channel stops and start on next channel. If set to 0, the command will keep listening until
+ * exhaustion of timeout_per_channel_ms or until nb_max_results is reached. Expressed in ms. Range of allowed values is
+ * [0:65535].
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_search_country_code_time_limit( const void*                      context,
+                                                            const lr11xx_wifi_channel_mask_t channels_mask,
+                                                            const uint8_t                    nb_max_results,
+                                                            const uint16_t                   timeout_per_channel_ms,
+                                                            const uint16_t                   timeout_per_scan_ms );
+
+/*!
+ * @brief Returns the number of results currently available in LR11XX
+ *
+ * It can be called before lr11xx_wifi_read_basic_complete_results or lr11xx_wifi_read_basic_mac_type_channel_results to
+ * know the number of results.
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] nb_results The number of results available in the LR11XX
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_read_basic_complete_results, lr11xx_wifi_read_basic_mac_type_channel_results
+ */
+lr11xx_status_t lr11xx_wifi_get_nb_results( const void* context, uint8_t* nb_results );
+
+/*!
+ * @brief Read basic complete results
+ *
+ * This function can be used to fetch all results in a row, or one after the other.
+ * It corresponds to result format @ref ::LR11XX_WIFI_RESULT_FORMAT_BASIC_COMPLETE.
+ *
+ * An example of usage to fetch all results in a row is:
+ * \code{.cpp}
+ * uint8_t nb_results = 0;
+ * lr11xx_wifi_get_nb_results(&radio, &nb_results);
+ * lr11xx_wifi_basic_complete_result_t all_results[LR11XX_WIFI_MAX_RESULTS] = {0};
+ * lr11xx_wifi_read_basic_complete_results(&radio, 0, nb_results, all_results);
+ * \endcode
+ *
+ * On the other hand, fetching result one after the other:
+ * \code{.cpp}
+ * uint8_t nb_results = 0;
+ * lr11xx_wifi_get_nb_results(&radio, &nb_results);
+ * lr11xx_wifi_basic_complete_result_t single_results = {0};
+ * for(uint8_t index_result = 0; index_result < nb_results; index_result++){
+ *   lr11xx_wifi_read_basic_complete_results(&radio, index_result, 1, &single_results);
+ *   // Do something with single_results
+ * }
+ * \endcode
+ *
+ * @remark This result fetching function **MUST** be used only if the scan function call was made with Scan Mode set to
+ * @ref ::LR11XX_WIFI_SCAN_MODE_BEACON or @ref ::LR11XX_WIFI_SCAN_MODE_BEACON_AND_PKT.
+ * Refer to @ref lr11xx_wifi_are_scan_mode_result_format_compatible to know which scan mode and result format are
+ * compatible.
+ *
+ * @param [in] radio Radio abstraction
+ * @param [in] start_result_index Result index from which starting to fetch the results
+ * @param [in] nb_results Number of results to fetch
+ * @param [out] results Pointer to an array of result structures to populate. It is up to the caller to ensure this
+ * array can hold at least nb_results elements.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_are_scan_mode_result_format_compatible, lr11xx_wifi_read_basic_mac_type_channel_results,
+ * lr11xx_wifi_read_extended_full_results
+ */
+lr11xx_status_t lr11xx_wifi_read_basic_complete_results( const void* context, const uint8_t start_result_index,
+                                                         const uint8_t                        nb_results,
+                                                         lr11xx_wifi_basic_complete_result_t* results );
+
+/*!
+ * @brief Read basic MAC, Wi-Fi type and channel results
+ *
+ * This function can be used to fetch all results in a row, or one after the other.
+ * It corresponds to result format @ref ::LR11XX_WIFI_RESULT_FORMAT_BASIC_MAC_TYPE_CHANNEL.
+ *
+ * An example of usage to fetch all results in a row is:
+ * \code{.cpp}
+ * uint8_t nb_results = 0;
+ * lr11xx_wifi_get_nb_results(&radio, &nb_results);
+ * lr11xx_wifi_basic_mac_type_channel_result_t all_results[LR11XX_WIFI_MAX_RESULTS] = {0};
+ * lr11xx_wifi_read_basic_mac_type_channel_results(&radio, 0, nb_results, all_results);
+ * \endcode
+ *
+ * On the other hand, fetching result one after the other:
+ * \code{.cpp}
+ * uint8_t nb_results = 0;
+ * lr11xx_wifi_get_nb_results(&radio, &nb_results);
+ * lr11xx_wifi_basic_mac_type_channel_result_t single_results = {0};
+ * for(uint8_t index_result = 0; index_result < nb_results; index_result++){
+ *   lr11xx_wifi_read_basic_mac_type_channel_results(&radio, index_result, 1, &single_results);
+ *   // Do something with single_results
+ * }
+ * \endcode
+ *
+ * @remark This result fetching function **MUST** be used only if the scan function call was made with Scan Mode set to
+ * @ref ::LR11XX_WIFI_SCAN_MODE_BEACON or @ref ::LR11XX_WIFI_SCAN_MODE_BEACON_AND_PKT.
+ * Refer to @ref lr11xx_wifi_are_scan_mode_result_format_compatible to know which scan mode and result format are
+ * compatible.
+ *
+ * @param [in] radio Radio abstraction
+ * @param [in] start_result_index Result index from which starting to fetch the results
+ * @param [in] nb_results Number of results to fetch
+ * @param [out] results Pointer to an array of result structures to populate. It is up to the caller to ensure this
+ * array can hold at least nb_results elements.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_are_scan_mode_result_format_compatible, lr11xx_wifi_read_basic_complete_results,
+ * lr11xx_wifi_read_extended_full_results
+ */
+lr11xx_status_t lr11xx_wifi_read_basic_mac_type_channel_results( const void* context, const uint8_t start_result_index,
+                                                                 const uint8_t nb_results,
+                                                                 lr11xx_wifi_basic_mac_type_channel_result_t* results );
+
+/*!
+ * @brief Read extended complete results
+ *
+ * This function can be used to fetch all results in a row, or one after the other.
+ * It corresponds to result format @ref ::LR11XX_WIFI_RESULT_FORMAT_EXTENDED_FULL.
+ *
+ * An example of usage to fetch all results in a row is:
+ * \code{.cpp}
+ * uint8_t nb_results = 0;
+ * lr11xx_wifi_get_nb_results(&radio, &nb_results);
+ * lr11xx_wifi_extended_full_result_t all_results[LR11XX_WIFI_MAX_RESULTS] = {0};
+ * lr11xx_wifi_read_extended_full_results(&radio, 0, nb_results, all_results);
+ * \endcode
+ *
+ * On the other hand, fetching result one after the other:
+ * \code{.cpp}
+ * uint8_t nb_results = 0;
+ * lr11xx_wifi_get_nb_results(&radio, &nb_results);
+ * lr11xx_wifi_extended_full_result_t single_results = {0};
+ * for(uint8_t index_result = 0; index_result < nb_results; index_result++){
+ *   lr11xx_wifi_read_extended_full_results(&radio, index_result, 1, &single_results);
+ *   // Do something with single_results
+ * }
+ * \endcode
+ *
+ * @remark This result fetching function **MUST** be used only if the scan function call was made with Scan Mode set to
+ * @ref ::LR11XX_WIFI_SCAN_MODE_FULL_BEACON.
+ * Refer to @ref lr11xx_wifi_are_scan_mode_result_format_compatible to know which scan mode and result format are
+ * compatible.
+ *
+ * @param [in] radio Radio abstraction
+ * @param [in] start_result_index Result index from which starting to fetch the results
+ * @param [in] nb_results Number of results to fetch
+ * @param [out] results Pointer to an array of result structures to populate. It is up to the caller to ensure this
+ * array can hold at least nb_results elements.
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_are_scan_mode_result_format_compatible, lr11xx_wifi_read_basic_complete_results,
+ * lr11xx_wifi_read_basic_mac_type_channel_results
+ */
+lr11xx_status_t lr11xx_wifi_read_extended_full_results( const void* radio, const uint8_t start_result_index,
+                                                        const uint8_t                       nb_results,
+                                                        lr11xx_wifi_extended_full_result_t* results );
+
+/*!
+ * @brief Reset the internal counters of cumulative timing
+ *
+ * @param [in] context Chip implementation context
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_reset_cumulative_timing( const void* context );
+
+/*!
+ * @brief Read the internal counters of cumulative timing
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] timing A pointer to the cumulative timing structure to populate
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_read_cumulative_timing( const void* context, lr11xx_wifi_cumulative_timings_t* timing );
+
+/*!
+ * @brief Get size of country code search results
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] nb_country_code_results Number of country results to read
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_get_nb_country_code_results( const void* context, uint8_t* nb_country_code_results );
+
+/*!
+ * @brief Read country code results
+ *
+ * The total number of country code results to read is obtained from a previous call to
+ * lr11xx_wifi_get_nb_country_code_results
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] start_result_index The result index to start reading results from
+ * @param [in] nb_country_results Number of country code results to read
+ * @param [out] country_code_results An array of lr11xx_wifi_country_code_t to be filled. It is up to the application to
+ * ensure this array is big enough to hold nb_country_results elements
+ *
+ * @returns Operation status
+ *
+ * @see lr11xx_wifi_get_nb_country_code_results, lr11xx_wifi_search_country_code
+ */
+lr11xx_status_t lr11xx_wifi_read_country_code_results( const void* context, const uint8_t start_result_index,
+                                                       const uint8_t               nb_country_results,
+                                                       lr11xx_wifi_country_code_t* country_code_results );
+
+/*!
+ * @brief Configure the timestamp used to discriminate mobile access points from gateways.
+ *
+ * This filtering is based on the hypothesis that mobile access points have timestamp shorter than gateways.
+ *
+ * @param [in] context Chip implementation context
+ * @param [in] timestamp_in_s Timestamp value in second
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_cfg_timestamp_ap_phone( const void* context, uint32_t timestamp_in_s );
+
+/*!
+ * @brief Get the internal wifi firmware version
+ *
+ * @param [in] context Chip implementation context
+ * @param [out] wifi_version The wifi version structure populated with version numbers
+ *
+ * @returns Operation status
+ */
+lr11xx_status_t lr11xx_wifi_read_version( const void* context, lr11xx_wifi_version_t* wifi_version );
+
+/*!
+ * @brief Retreive channel information from channel info byte
+ *
+ * This method is to be called with on the WiFi channel info byte of a scan result.
+ *
+ * As the WiFi passive scan allows to get Access Point MAC address from Packet WiFi frames, it is possible that the
+ * frame does not comes from the Access Point, but from a device. In that case, the RSSI reported by LR11XX is the one
+ * of the frame received from the device and not from the Access Point. The rssi_validity flag allows to detect that
+ * case.
+ *
+ * It is possible for an Access Point to be a mobile AP, which is of low interest for location purpose. The LR11XX tries
+ * to detect mobile AP based on Access Point up time and set the flag mac_origin_estimation accordingly.
+ *
+ * @param [in] channel_info The channel info byte to retrieve channel information from. It is obtained from WiFi
+ * passive scan result
+ * @param [out] channel The channel of the scanned mac address
+ * @param [out] rssi_validity The validity of the scanned MAC address
+ * @param [out] mac_origin_estimation Indicates the estimation of MAC address origin by LR11XX
+ *
+ * @see lr11xx_wifi_read_basic_complete_results, lr11xx_wifi_read_basic_mac_type_channel_results,
+ * lr11xx_wifi_cfg_timestamp_ap_phone
+ */
+void lr11xx_wifi_parse_channel_info( const lr11xx_wifi_channel_info_byte_t channel_info, lr11xx_wifi_channel_t* channel,
+                                     bool* rssi_validity, lr11xx_wifi_mac_origin_t* mac_origin_estimation );
+
+/*!
+ * @brief Helper method to retrieve channel from channel info byte
+ *
+ * @param [in] channel_info The chanel info byte from passive scan result
+ *
+ * @returns The channel of scanned MAC address
+ *
+ * @see lr11xx_wifi_parse_channel_info
+ */
+lr11xx_wifi_channel_t lr11xx_wifi_extract_channel_from_info_byte( const lr11xx_wifi_channel_info_byte_t channel_info );
+
+/*!
+ * @brief Retrieve the Frame Type, Frame Subtype, To/From DS fields from a frame info byte
+ *
+ * This method is intended to be called on the channel info byte of a passive scan result structure.
+ *
+ * The from_ds/to_ds (Distribution Station) fields have the following meaning:
+ *
+ * <table>
+ * <tr><th> to_ds value </th><th> from_ds value </th><th> Meaning </th>
+ * <tr><td>  False </td><td> False  </td><td> Frame was between two Stations
+ * </td> <tr><td>  True </td><td> False  </td><td> Frame was from Station to
+ * Access Point </td> <tr><td>  False </td><td> True  </td><td> Frame was sent
+ * from Access Point or Distribution Stations </td> <tr><td>  True </td><td>
+ * True  </td><td> Mesh network only, frame was between Stations </td>
+ * </table>
+ *
+ * @param [in] frame_type_info The frame info byte from passive scan result
+ * @param [out] frame_type The Frame Type of the received frame
+ * @param [out] frame_sub_type The Frame SubType of the frame received
+ * @param [out] to_ds to_ds field of the frame received
+ * @param [out] from_ds from_ds field of the frame received
+ */
+void lr11xx_wifi_parse_frame_type_info( const lr11xx_wifi_frame_type_info_byte_t frame_type_info,
+                                        lr11xx_wifi_frame_type_t*                frame_type,
+                                        lr11xx_wifi_frame_sub_type_t* frame_sub_type, bool* to_ds, bool* from_ds );
+
+/*!
+ * @brief Retrieve the data rate information from data rate info byte
+ *
+ * This method is intended to be called on a data rate info byte of a passive scan result structure.
+ *
+ * @param [in] data_rate_info The data rate info byte from a passive scan result
+ * @param [out] wifi_signal_type The wifi signal type of the scanned frame
+ * @param [out] wifi_data_rate The data rate of the scanned frame
+ */
+void lr11xx_wifi_parse_data_rate_info( const lr11xx_wifi_datarate_info_byte_t data_rate_info,
+                                       lr11xx_wifi_signal_type_result_t*      wifi_signal_type,
+                                       lr11xx_wifi_datarate_t*                wifi_data_rate );
+
+/*!
+ * @brief Return the maximal number of results to read per SPI communication
+ *
+ * This function **DOES NOT** communicates with the LR11XX. It returns the driver maximal number of Wi-Fi results it can
+ * retrieve per SPI communication.
+ *
+ * @remark It is a driver limitation, not a LR11XX limitation, that avoid allocating temporary buffers of size too big
+ * when reading Wi-Fi passive scan results.
+ *
+ * @returns The maximal number of results to fetch per SPI calls
+ *
+ * @see LR11XX_WIFI_N_RESULTS_MAX_PER_CHUNK
+ */
+uint8_t lr11xx_wifi_get_nb_results_max_per_chunk( void );
+
+/*!
+ * @brief Helper method to retrieve the signal type from data rate info byte
+ *
+ * @param [in] data_rate_info The data rate info byte from a passive scan result
+ *
+ * @returns The Signal Type of the scanned frame
+ */
+lr11xx_wifi_signal_type_result_t lr11xx_wifi_extract_signal_type_from_data_rate_info(
+    const lr11xx_wifi_datarate_info_byte_t data_rate_info );
+
+/*!
+ * @brief Helper function to check if a buffer is a well-formed UTF-8 byte sequence
+ *
+ * @param [in] buffer The buffer holding the bytes to be analyzed
+ * @param [in] length The number of bytes in the buffer
+ *
+ * @returns The result of the check
+ */
+bool lr11xx_wifi_is_well_formed_utf8_byte_sequence( const uint8_t* buffer, const uint8_t length );
+
+/*!
+ * @brief Check that Wi-Fi scan mode and result format are compatible
+ *
+ * The possible combination of Wi-Fi scan modes and result format are the following:
+ *
+ * <table>
+ * <tr> <th> Scan Mode <th> Type/Sub-type selected <th> Corresponding read result function
+ * <tr> <td> @ref ::LR11XX_WIFI_SCAN_MODE_BEACON <td> Management/Beacon and Management/Probe Response <td rowspan="2">
+ * @ref lr11xx_wifi_read_basic_complete_results, @ref lr11xx_wifi_read_basic_mac_type_channel_results <tr> <td>
+ * @ref ::LR11XX_WIFI_SCAN_MODE_BEACON_AND_PKT <td> Some from Management, Control and Data Types <tr> <td>
+ * @ref ::LR11XX_WIFI_SCAN_MODE_FULL_BEACON <td> Management/Beacon and Management/Probe Response <td rowspan="2"> @ref
+ * lr11xx_wifi_read_extended_full_results <tr> <td> @ref ::LR11XX_WIFI_SCAN_MODE_UNTIL_SSID <td> Management/Beacon and
+ * Management/Probe Response - until SSID field
+ * </table>
+ *
+ * @param scan_mode The scan mode used when calling the scan API
+ * @param result_format The result format used when calling the read result API
+ * @retval true The scan mode and result format are compatible
+ * @retval false The scan mode and result format are not compatible.
+ */
+bool lr11xx_wifi_are_scan_mode_result_format_compatible( lr11xx_wifi_mode_t          scan_mode,
+                                                         lr11xx_wifi_result_format_t result_format );
+
+/**
+ * @brief Compute the power consumption in uAh based on the cumulative timing.
+ *
+ * @param [in] regulator The regulator used during last Wi-Fi passive scan
+ * @param [in] timing  Cumulative timing structure to use for computation
+ *
+ * @returns Current consumption in uAh
+ */
+uint64_t lr11xx_wifi_get_consumption( lr11xx_system_reg_mode_t regulator, lr11xx_wifi_cumulative_timings_t timing );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_WIFI_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr11xx_wifi_types.h	2023-11-01 08:09:54.863151680 -0700
@@ -0,0 +1,410 @@
+/*!
+ * @file      lr11xx_wifi_types.h
+ *
+ * @brief     Wi-Fi passive scan driver types for LR11XX
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_WIFI_TYPES_H
+#define LR11XX_WIFI_TYPES_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdbool.h>
+#include <stdint.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+#define LR11XX_WIFI_MAC_ADDRESS_LENGTH ( 6 )
+#define LR11XX_WIFI_MAX_RESULTS ( 32 )
+#define LR11XX_WIFI_RESULT_SSID_LENGTH ( 32 )
+#define LR11XX_WIFI_MAX_COUNTRY_CODE ( 32 )
+#define LR11XX_WIFI_STR_COUNTRY_CODE_SIZE ( 2 )
+
+#define LR11XX_WIFI_CHANNEL_1_POS ( 0U )  //!< Channel at frequency 2.412 GHz
+#define LR11XX_WIFI_CHANNEL_1_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_1_POS )
+#define LR11XX_WIFI_CHANNEL_2_POS ( 1U )  //!< Channel at frequency 2.417 GHz
+#define LR11XX_WIFI_CHANNEL_2_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_2_POS )
+#define LR11XX_WIFI_CHANNEL_3_POS ( 2U )  //!< Channel at frequency 2.422 GHz
+#define LR11XX_WIFI_CHANNEL_3_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_3_POS )
+#define LR11XX_WIFI_CHANNEL_4_POS ( 3U )  //!< Channel at frequency 2.427 GHz
+#define LR11XX_WIFI_CHANNEL_4_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_4_POS )
+#define LR11XX_WIFI_CHANNEL_5_POS ( 4U )  //!< Channel at frequency 2.432 GHz
+#define LR11XX_WIFI_CHANNEL_5_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_5_POS )
+#define LR11XX_WIFI_CHANNEL_6_POS ( 5U )  //!< Channel at frequency 2.437 GHz
+#define LR11XX_WIFI_CHANNEL_6_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_6_POS )
+#define LR11XX_WIFI_CHANNEL_7_POS ( 6U )  //!< Channel at frequency 2.442 GHz
+#define LR11XX_WIFI_CHANNEL_7_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_7_POS )
+#define LR11XX_WIFI_CHANNEL_8_POS ( 7U )  //!< Channel at frequency 2.447 GHz
+#define LR11XX_WIFI_CHANNEL_8_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_8_POS )
+#define LR11XX_WIFI_CHANNEL_9_POS ( 8U )  //!< Channel at frequency 2.452 GHz
+#define LR11XX_WIFI_CHANNEL_9_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_9_POS )
+#define LR11XX_WIFI_CHANNEL_10_POS ( 9U )  //!< Channel at frequency 2.457 GHz
+#define LR11XX_WIFI_CHANNEL_10_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_10_POS )
+#define LR11XX_WIFI_CHANNEL_11_POS ( 10U )  //!< Channel at frequency 2.462 GHz
+#define LR11XX_WIFI_CHANNEL_11_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_11_POS )
+#define LR11XX_WIFI_CHANNEL_12_POS ( 11U )  //!< Channel at frequency 2.467 GHz
+#define LR11XX_WIFI_CHANNEL_12_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_12_POS )
+#define LR11XX_WIFI_CHANNEL_13_POS ( 12U )  //!< Channel at frequency 2.472 GHz
+#define LR11XX_WIFI_CHANNEL_13_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_13_POS )
+#define LR11XX_WIFI_CHANNEL_14_POS ( 13U )  //!< Channel at frequency 2.484 GHz
+#define LR11XX_WIFI_CHANNEL_14_MASK ( 0x01UL << LR11XX_WIFI_CHANNEL_14_POS )
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/*!
+ * @brief Type to store a Wi-Fi channel mask
+ */
+typedef uint16_t lr11xx_wifi_channel_mask_t;
+
+/*!
+ * @brief Type to store a Wi-Fi channel info byte
+ */
+typedef uint8_t lr11xx_wifi_channel_info_byte_t;
+
+/*!
+ * @brief Type to store a Wi-Fi datarate info byte
+ */
+typedef uint8_t lr11xx_wifi_datarate_info_byte_t;
+
+/*!
+ * @brief Type to store a Wi-Fi frame type info byte
+ */
+typedef uint8_t lr11xx_wifi_frame_type_info_byte_t;
+
+/*!
+ * @brief Type to store a Wi-Fi frame sub_type
+ */
+typedef uint8_t lr11xx_wifi_frame_sub_type_t;
+
+/*!
+ * @brief Wi-Fi FCS info byte
+ */
+typedef struct lr11xx_wifi_fcs_info_byte_s
+{
+    bool is_fcs_ok;       //!< True if the LR11XX has checked the FCS and the check succeeded
+    bool is_fcs_checked;  //!< True if the LR11XX has checked the FCS
+} lr11xx_wifi_fcs_info_byte_t;
+
+/*!
+ * @brief Type to store a MAC address
+ */
+typedef uint8_t lr11xx_wifi_mac_address_t[LR11XX_WIFI_MAC_ADDRESS_LENGTH];
+
+/*!
+ * @brief Type to store the Country Code
+ */
+typedef uint8_t lr11xx_wifi_country_code_str_t[LR11XX_WIFI_STR_COUNTRY_CODE_SIZE];
+
+/*!
+ * @brief Wi-Fi Channels index
+ */
+typedef enum
+{
+    LR11XX_WIFI_NO_CHANNEL   = 0x00,
+    LR11XX_WIFI_CHANNEL_1    = 0x01,  //!< Channel at frequency 2.412 GHz
+    LR11XX_WIFI_CHANNEL_2    = 0x02,  //!< Channel at frequency 2.417 GHz
+    LR11XX_WIFI_CHANNEL_3    = 0x03,  //!< Channel at frequency 2.422 GHz
+    LR11XX_WIFI_CHANNEL_4    = 0x04,  //!< Channel at frequency 2.427 GHz
+    LR11XX_WIFI_CHANNEL_5    = 0x05,  //!< Channel at frequency 2.432 GHz
+    LR11XX_WIFI_CHANNEL_6    = 0x06,  //!< Channel at frequency 2.437 GHz
+    LR11XX_WIFI_CHANNEL_7    = 0x07,  //!< Channel at frequency 2.442 GHz
+    LR11XX_WIFI_CHANNEL_8    = 0x08,  //!< Channel at frequency 2.447 GHz
+    LR11XX_WIFI_CHANNEL_9    = 0x09,  //!< Channel at frequency 2.452 GHz
+    LR11XX_WIFI_CHANNEL_10   = 0x0A,  //!< Channel at frequency 2.457 GHz
+    LR11XX_WIFI_CHANNEL_11   = 0x0B,  //!< Channel at frequency 2.462 GHz
+    LR11XX_WIFI_CHANNEL_12   = 0x0C,  //!< Channel at frequency 2.467 GHz
+    LR11XX_WIFI_CHANNEL_13   = 0x0D,  //!< Channel at frequency 2.472 GHz
+    LR11XX_WIFI_CHANNEL_14   = 0x0E,  //!< Channel at frequency 2.484 GHz
+    LR11XX_WIFI_ALL_CHANNELS = 0x0F,
+} lr11xx_wifi_channel_t;
+
+/*!
+ * @brief WiFi theoretical Datarates
+ */
+typedef enum
+{
+    LR11XX_WIFI_DATARATE_1_MBPS    = 1,
+    LR11XX_WIFI_DATARATE_2_MBPS    = 2,
+    LR11XX_WIFI_DATARATE_6_MBPS    = 3,
+    LR11XX_WIFI_DATARATE_9_MBPS    = 4,
+    LR11XX_WIFI_DATARATE_12_MBPS   = 5,
+    LR11XX_WIFI_DATARATE_18_MBPS   = 6,
+    LR11XX_WIFI_DATARATE_24_MBPS   = 7,
+    LR11XX_WIFI_DATARATE_36_MBPS   = 8,
+    LR11XX_WIFI_DATARATE_48_MBPS   = 9,
+    LR11XX_WIFI_DATARATE_54_MBPS   = 10,
+    LR11XX_WIFI_DATARATE_6_5_MBPS  = 11,
+    LR11XX_WIFI_DATARATE_13_MBPS   = 12,
+    LR11XX_WIFI_DATARATE_19_5_MBPS = 13,
+    LR11XX_WIFI_DATARATE_26_MBPS   = 14,
+    LR11XX_WIFI_DATARATE_39_MBPS   = 15,
+    LR11XX_WIFI_DATARATE_52_MBPS   = 16,
+    LR11XX_WIFI_DATARATE_58_MBPS   = 17,
+    LR11XX_WIFI_DATARATE_65_MBPS   = 18,
+    LR11XX_WIFI_DATARATE_7_2_MBPS  = 19,
+    LR11XX_WIFI_DATARATE_14_4_MBPS = 20,
+    LR11XX_WIFI_DATARATE_21_7_MBPS = 21,
+    LR11XX_WIFI_DATARATE_28_9_MBPS = 22,
+    LR11XX_WIFI_DATARATE_43_3_MBPS = 23,
+    LR11XX_WIFI_DATARATE_57_8_MBPS = 24,
+    LR11XX_WIFI_DATARATE_65_2_MBPS = 25,
+    LR11XX_WIFI_DATARATE_72_2_MBPS = 26,
+} lr11xx_wifi_datarate_t;
+
+/*!
+ * @brief WiFi Frame Types
+ */
+typedef enum
+{
+    LR11XX_WIFI_FRAME_TYPE_MANAGEMENT = 0x00,
+    LR11XX_WIFI_FRAME_TYPE_CONTROL    = 0x01,
+    LR11XX_WIFI_FRAME_TYPE_DATA       = 0x02,
+} lr11xx_wifi_frame_type_t;
+
+/*!
+ * @brief The WiFi MAC address origin
+ *
+ * @see lr11xx_wifi_parse_channel_info for details about the MAC address origin estimation of the LR11XX
+ */
+typedef enum
+{
+    LR11XX_WIFI_ORIGIN_BEACON_FIX_AP    = 1,  //!< MAC address extracted from a packet coming from a fix Access Point
+    LR11XX_WIFI_ORIGIN_BEACON_MOBILE_AP = 2,  //!< MAC address extracted from a packet coming from a mobile Access Point
+    LR11XX_WIFI_ORIGIN_UNKNOWN = 3,  //!< Impossible to determine the origin of the packet the MAC is extracted from
+} lr11xx_wifi_mac_origin_t;
+
+/*!
+ * @brief Wi-Fi signal type for passive scanning configuration
+ *
+ * Note it is not possible to configure the WiFi passive scanning to search Wi-Fi type N GreenField. Only Wi-Fi type N
+ * Mixed Mode can be scanned by LR11XX.
+ *
+ * @warning ::LR11XX_WIFI_TYPE_SCAN_G and ::LR11XX_WIFI_TYPE_SCAN_N configurations are implemented the same way, and
+ * both will scan Wi-Fi type G **AND** Wi-Fi type N.
+ */
+typedef enum
+{
+    LR11XX_WIFI_TYPE_SCAN_B     = 0x01,  //!< Wi-Fi B
+    LR11XX_WIFI_TYPE_SCAN_G     = 0x02,  //!< Wi-Fi G
+    LR11XX_WIFI_TYPE_SCAN_N     = 0x03,  //!< Wi-Fi N
+    LR11XX_WIFI_TYPE_SCAN_B_G_N = 0x04,  //!< Wi-Fi B and Wi-Fi G/N
+} lr11xx_wifi_signal_type_scan_t;
+
+/*!
+ * @brief Wi-Fi signal type for passive scan results
+ *
+ * Note that the Wi-Fi N detected is Wi-Fi N Mixed mode, and not GreenField.
+ */
+typedef enum
+{
+    LR11XX_WIFI_TYPE_RESULT_B = 0x01,  //!< WiFi B
+    LR11XX_WIFI_TYPE_RESULT_G = 0x02,  //!< WiFi G
+    LR11XX_WIFI_TYPE_RESULT_N = 0x03,  //!< WiFi N
+} lr11xx_wifi_signal_type_result_t;
+
+/*!
+ * @brief Wi-Fi scan mode
+ *
+ * When the LR11XX receives a Wi-Fi frame, it starts demodulating it. Depending on the scan mode selected, only some
+ * Wi-Fi frame type/sub-types are to be kept. The demodulation step is stopped as soon as the LR11XX detects the current
+ * Wi-Fi frame is not of the required type/sub-types. This saves scan time and consumption.
+ *
+ * A Wi-Fi frame is never completely demodulated. The ::LR11XX_WIFI_SCAN_MODE_FULL_BEACON uses a special configuration
+ * allowing to demodulate more fields (until Frame Check Sequence field), at a price of higher scan duration and higher
+ * consumption.
+ *
+ * @note Not all results formats are available depending on the scan mode selected. Refer to
+ * @ref lr11xx_wifi_are_scan_mode_result_format_compatible to know which result formats are available depending on scan
+ * mode selected.
+ *
+ * @see lr11xx_wifi_are_scan_mode_result_format_compatible
+ */
+typedef enum
+{
+    LR11XX_WIFI_SCAN_MODE_BEACON =
+        1,  //!< Exposes Beacons and Probe Responses Access Points frames until Period Beacon field (Basic result)
+    LR11XX_WIFI_SCAN_MODE_BEACON_AND_PKT =
+        2,  //!< Exposes some Management Access Points frames until Period Beacon field, and some other packets frame
+            //!< until third Mac Address field (Basic result)
+    LR11XX_WIFI_SCAN_MODE_FULL_BEACON =
+        4,  //!< Exposes Beacons and Probes Responses Access Points frames until Frame Check Sequence (FCS) field
+            //!< (Extended result). In this mode, only signal type LR11XX_WIFI_TYPE_SCAN_B is executed and other signal
+            //!< types are silently discarded.
+    LR11XX_WIFI_SCAN_MODE_UNTIL_SSID = 5,  //!< Exposes Beacons and Probes Responses Access Points frames until the end
+                                           //!< of SSID field (Extended result) - available since firmware 0x0306
+} lr11xx_wifi_mode_t;
+
+/*!
+ * @brief Cumulative timings
+ *
+ * This structure is representing the cumulative time spent in the different modes of Wi-Fi passive scanning procedure.
+ * All timings are provided in [us].
+ * */
+typedef struct lr11xx_wifi_cumulative_timings_s
+{
+    uint32_t rx_detection_us;    //!< Cumulative time spent during NFE or TOA
+    uint32_t rx_correlation_us;  //!< Cumulative time spent during preamble detection
+    uint32_t rx_capture_us;      //!< Cumulative time spent during signal acquisition
+    uint32_t demodulation_us;    //!< Cumulative time spent during software demodulation
+} lr11xx_wifi_cumulative_timings_t;
+
+/*!
+ * @brief Basic complete result structure
+ *
+ * The beacon period is expressed in TU (Time Unit). 1 TU is 1024 microseconds.
+ */
+typedef struct lr11xx_wifi_basic_complete_result_s
+{
+    lr11xx_wifi_datarate_info_byte_t   data_rate_info_byte;
+    lr11xx_wifi_channel_info_byte_t    channel_info_byte;
+    int8_t                             rssi;
+    lr11xx_wifi_frame_type_info_byte_t frame_type_info_byte;
+    lr11xx_wifi_mac_address_t          mac_address;
+    int16_t                            phi_offset;
+    uint64_t timestamp_us;  //!< Indicate the up-time of the Access Point transmitting the Beacon [us]
+    uint16_t beacon_period_tu;
+} lr11xx_wifi_basic_complete_result_t;
+
+/*!
+ * @brief Basic MAC, type, channel result structure
+ */
+typedef struct lr11xx_wifi_basic_mac_type_channel_result_s
+{
+    lr11xx_wifi_datarate_info_byte_t data_rate_info_byte;
+    lr11xx_wifi_channel_info_byte_t  channel_info_byte;
+    int8_t                           rssi;
+    lr11xx_wifi_mac_address_t        mac_address;
+} lr11xx_wifi_basic_mac_type_channel_result_t;
+
+/*!
+ * @brief Extended full result structure
+ *
+ * @note The beacon period is expressed in TU (Time Unit). 1 TU is 1024 microseconds.
+ *
+ * @remark When used with @ref ::LR11XX_WIFI_SCAN_MODE_UNTIL_SSID, the following field are always set to 0:
+ *      - field is_fcs_ok and is_fcs_checked in fcs_check_byte structure
+ *      - current_channel
+ *      - country_code
+ *      - io_regulation
+ */
+typedef struct
+{
+    lr11xx_wifi_datarate_info_byte_t data_rate_info_byte;
+    lr11xx_wifi_channel_info_byte_t  channel_info_byte;
+    int8_t                           rssi;
+    uint8_t                          rate;           //!< Rate index
+    uint16_t                         service;        //!< Service value
+    uint16_t                         length;         //!< Length of MPDU (in microseconds for WiFi B, bytes for WiFi G)
+    uint16_t                         frame_control;  //!< Frame Control structure
+    lr11xx_wifi_mac_address_t        mac_address_1;
+    lr11xx_wifi_mac_address_t        mac_address_2;
+    lr11xx_wifi_mac_address_t        mac_address_3;
+    uint64_t                         timestamp_us;  //!< Indicate the up-time of the Access Point
+                                                    //!< transmitting the Beacon [us]
+    uint16_t beacon_period_tu;
+    uint16_t seq_control;                                 //!< Sequence Control value
+    uint8_t  ssid_bytes[LR11XX_WIFI_RESULT_SSID_LENGTH];  //!< Service Set
+                                                          //!< IDentifier
+    lr11xx_wifi_channel_t          current_channel;       //!< Current channel indicated in the Wi-Fi frame
+    lr11xx_wifi_country_code_str_t country_code;          //!< Country Code
+    uint8_t                        io_regulation;         //!< Input Output Regulation
+    lr11xx_wifi_fcs_info_byte_t    fcs_check_byte;        //!< Frame Check Sequence info
+    int16_t                        phi_offset;
+} lr11xx_wifi_extended_full_result_t;
+
+/*!
+ * @brief Wi-Fi scan result formats
+ *
+ * @note Result format to use depends on the scan mode selected when calling @ref lr11xx_wifi_scan or @ref
+ * lr11xx_wifi_scan_time_limit API. Refer to @ref lr11xx_wifi_are_scan_mode_result_format_compatible to know which
+ * result formats are available depending on scan mode selected.
+ *
+ * @see lr11xx_wifi_are_scan_mode_result_format_compatible
+ */
+typedef enum
+{
+    LR11XX_WIFI_RESULT_FORMAT_BASIC_COMPLETE,          //!< Basic complete result format: @ref
+                                                       //!< lr11xx_wifi_basic_complete_result_t
+    LR11XX_WIFI_RESULT_FORMAT_BASIC_MAC_TYPE_CHANNEL,  //!<  Basic MAC/type/channel result format: @ref
+                                                       //!<  lr11xx_wifi_basic_mac_type_channel_result_t
+    LR11XX_WIFI_RESULT_FORMAT_EXTENDED_FULL,  //!< Extended full result format: @ref lr11xx_wifi_extended_full_result_t
+} lr11xx_wifi_result_format_t;
+
+/*!
+ * @brief Wi-Fi country code structure
+ */
+typedef struct lr11xx_wifi_country_code_s
+{
+    lr11xx_wifi_country_code_str_t  country_code;
+    uint8_t                         io_regulation;  //!< Input Output Regulation
+    lr11xx_wifi_channel_info_byte_t channel_info_byte;
+    lr11xx_wifi_mac_address_t       mac_address;
+} lr11xx_wifi_country_code_t;
+
+/*!
+ * @brief Wi-Fi firmware version
+ */
+typedef struct lr11xx_wifi_version_s
+{
+    uint8_t major;
+    uint8_t minor;
+} lr11xx_wifi_version_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_WIFI_TYPES_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr_fhss_v1_base_types.h gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr_fhss_v1_base_types.h
--- sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr_fhss_v1_base_types.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/lib/lora_fsk/lr11xx/include/semtech/lr_fhss_v1_base_types.h	2023-11-01 14:19:43.257226763 -0700
@@ -0,0 +1,127 @@
+/**
+ * @file      lr_fhss_v1_base_types.h
+ *
+ * @brief     Radio-independent LR-FHSS base type definitions, version 1
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR_FHSS_V1_BASE_TYPES_H__
+#define LR_FHSS_V1_BASE_TYPES_H__
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+#include <stdbool.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+/**
+ * @brief LR-FHSS modulation type
+ */
+typedef enum lr_fhss_v1_modulation_type_e
+{
+    LR_FHSS_V1_MODULATION_TYPE_GMSK_488 = 0,
+} lr_fhss_v1_modulation_type_t;
+
+/**
+ * @brief LR-FHSS coding rate
+ */
+typedef enum lr_fhss_v1_cr_e
+{
+    LR_FHSS_V1_CR_5_6 = 0x00,
+    LR_FHSS_V1_CR_2_3 = 0x01,
+    LR_FHSS_V1_CR_1_2 = 0x02,
+    LR_FHSS_V1_CR_1_3 = 0x03,
+} lr_fhss_v1_cr_t;
+
+/**
+ * @brief LR-FHSS grid
+ */
+typedef enum lr_fhss_v1_grid_e
+{
+    LR_FHSS_V1_GRID_25391_HZ = 0x00,
+    LR_FHSS_V1_GRID_3906_HZ  = 0x01,
+} lr_fhss_v1_grid_t;
+
+/**
+ * @brief LR-FHSS bandwidth
+ */
+typedef enum lr_fhss_v1_bw_e
+{
+    LR_FHSS_V1_BW_39063_HZ   = 0x00,
+    LR_FHSS_V1_BW_85938_HZ   = 0x01,
+    LR_FHSS_V1_BW_136719_HZ  = 0x02,
+    LR_FHSS_V1_BW_183594_HZ  = 0x03,
+    LR_FHSS_V1_BW_335938_HZ  = 0x04,
+    LR_FHSS_V1_BW_386719_HZ  = 0x05,
+    LR_FHSS_V1_BW_722656_HZ  = 0x06,
+    LR_FHSS_V1_BW_773438_HZ  = 0x07,
+    LR_FHSS_V1_BW_1523438_HZ = 0x08,
+    LR_FHSS_V1_BW_1574219_HZ = 0x09,
+} lr_fhss_v1_bw_t;
+
+/**
+ * @brief LR-FHSS parameter structure
+ */
+typedef struct lr_fhss_v1_params_s
+{
+    const uint8_t*               sync_word; /**< 4-byte sync word */
+    lr_fhss_v1_modulation_type_t modulation_type;
+    lr_fhss_v1_cr_t              cr;
+    lr_fhss_v1_grid_t            grid;
+    lr_fhss_v1_bw_t              bw;
+    bool                         enable_hopping;
+    uint8_t                      header_count; /**< Number of header blocks */
+} lr_fhss_v1_params_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+#endif  // LR_FHSS_V1_BASE_TYPES_H__
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/common/Kconfig.defconfig gitlab_sidewalk/samples/common/Kconfig.defconfig
--- sidewalk/samples/common/Kconfig.defconfig	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/samples/common/Kconfig.defconfig	2023-11-01 08:09:54.867151757 -0700
@@ -59,7 +59,7 @@
 	default 50 if SHELL
 
 config SHELL_STACK_SIZE
-	default 8192 if SIDEWALK_CLI
+	default 8192 if SIDEWALK_CLI || LR1110_CLI
 
 config HEAP_MEM_POOL_SIZE
 	default 1024
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/get_full_almanac.py gitlab_sidewalk/samples/get_full_almanac.py
--- sidewalk/samples/get_full_almanac.py	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/get_full_almanac.py	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,92 @@
+"""
+The Clear BSD License
+Copyright Semtech Corporation 2021. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted (subject to the limitations in the disclaimer
+below) provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of the Semtech corporation nor the
+      names of its contributors may be used to endorse or promote products
+      derived from this software without specific prior written permission.
+
+NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.
+"""
+
+import base64
+import requests
+
+import sys
+from argparse import ArgumentParser
+
+
+def main():
+
+    # The file in which the almanac will be written to
+    filename_default = "almanac.h"
+    parser = ArgumentParser(
+        description="Companion software that generates almanac header file to be compiled for LR1110/LR1120 embedded full almanac update."
+    )
+    parser.add_argument(
+        "mgs_token", help="MGS LoRa Cloud token to use to fetch the almanac"
+    )
+    parser.add_argument(
+        "-f",
+        "--output_file",
+        help="file that will contain the results",
+        default=filename_default,
+    )
+    args = parser.parse_args()
+
+    mgs_token = args.mgs_token
+    filename = args.output_file
+
+    # Build request URL
+    url = "https://mgs.loracloud.com/api/v1/almanac/full"
+    print("Requesting latest full almanac image available...")
+
+    # HTTP request to MGS
+    my_header = {"Authorization": mgs_token}
+    res = requests.get(url, headers=my_header)
+
+    if res.status_code != 200:
+        print("ERROR: failed to get almanac - " + str(res))
+        sys.exit(2)
+    else:
+        print("Success")
+
+    raw_bytes = bytes(base64.b64decode(res.json()["result"]["almanac_image"]))
+
+    # Build the byte array containing the almanac to be written to LR11xx
+    my_almanac_in_hex = "static const uint8_t full_almanac[( LR11XX_GNSS_FULL_UPDATE_N_ALMANACS * LR11XX_GNSS_SINGLE_ALMANAC_WRITE_SIZE ) + 20] = { "
+    my_almanac_in_hex += ", ".join("0x{:02X}".format(byt) for byt in raw_bytes)
+    my_almanac_in_hex += " };"
+
+    # Write C file to be included to the full_almanac_update application for writting to LR11xx
+    file_header = (
+        "/* This file has been auto-generated by the get_full_almanac.py script */\n\n"
+    )
+    file_header += '#include "lr11xx_gnss.h"\n\n'
+    with open(filename, "w") as f:
+        f.write(file_header + my_almanac_in_hex + "\n")
+
+    print("Almanac image written to " + filename + " file")
+
+
+if __name__ == "__main__":
+    main()
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/gnss_lr1110/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/gnss_lr1110/boards/nrf52840dk_nrf52840.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/boards/nrf52840dk_nrf52840.overlay	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+&spi3 {
+	status = "disabled";
+};
+
+sid_semtech: &spi2 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi2_default>;
+	pinctrl-1 = <&spi2_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+&spi2_default {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+	};
+};
+
+&spi2_sleep {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+		low-power-enable;
+	};
+};
+
+/ {
+	semtech_sx1262_gpios{
+ 		compatible = "gpio-keys";
+		semtech_sx1262_cs: cs {
+			gpios = <&gpio1 0x8 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 CS";
+		};
+ 		semtech_sx1262_reset_gpios: reset {
+			gpios = <&gpio0 0x3 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 Reset";
+		};
+		semtech_sx1262_busy_gpios: busy {
+			gpios = <&gpio1 0x4 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Busy";
+		};
+		semtech_sx1262_antenna_enable_gpios: antena_enable {
+			gpios = <&gpio1 0xa GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Antena Enable";
+		};
+		semtech_sx1262_dio1_gpios: dio1 {
+			gpios = <&gpio1 0x6 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 DIO1";
+		};
+		radio_led_tx: led_tx {
+			gpios = <&gpio0 0x1e GPIO_ACTIVE_HIGH>;
+			label = "red tx LED";
+		};
+		radio_led_rx: led_rx {
+			gpios = <&gpio0 0x1f GPIO_ACTIVE_HIGH>;
+			label = "green rx LED";
+		};
+        radio_led_sniff: led_sniff {
+            gpios = <&gpio1 0x5 GPIO_ACTIVE_HIGH>;
+            label = "yellow LED";
+        };
+        radio_gnss_lna: gnss_lna {
+            gpios = <&gpio0 0x1d GPIO_ACTIVE_HIGH>;
+            label = "gnss antenna";
+        };
+ 	};
+
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.conf gitlab_sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.conf
--- sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,19 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Configure QSPI for external flash
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
+
+CONFIG_DFU_MULTI_IMAGE=y
+CONFIG_NRF53_ENFORCE_IMAGE_VERSION_EQUALITY=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.overlay gitlab_sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.overlay
--- sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp.overlay	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <zephyr/dt-bindings/ipc_service/static_vrings.h>
+
+&ipc0 {
+    zephyr,priority = <0 PRIO_COOP>;
+};
+
+ sid_semtech: &spi4 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi4_default>;
+	pinctrl-1 = <&spi4_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+/{
+	semtech_sx1262_gpios{
+		compatible = "gpio-keys";
+	   semtech_sx1262_cs: cs {
+		   gpios = <&gpio1 0x9 GPIO_ACTIVE_LOW>;
+		   label = "semtech_sx1262 CS";
+	   };
+		semtech_sx1262_reset_gpios: reset {
+		   gpios = <&gpio0 0x4 GPIO_ACTIVE_LOW>;
+		   label = "semtech_sx1262 Reset";
+	   };
+	   semtech_sx1262_busy_gpios: busy {
+		   gpios = <&gpio1 0x5 GPIO_ACTIVE_HIGH>;
+		   label = "semtech_sx1262 Busy";
+	   };
+	   semtech_sx1262_antenna_enable_gpios: antena_enable {
+		   gpios = <&gpio1 0xa GPIO_ACTIVE_HIGH>;
+		   label = "semtech_sx1262 Antena Enable";
+	   };
+	   semtech_sx1262_dio1_gpios: dio1 {
+		   gpios = <&gpio1 0x7 GPIO_ACTIVE_HIGH>;
+		   label = "semtech_sx1262 DIO1";
+	   };
+	};
+
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
+
+/* Disable unused peripherals to reduce power consumption */
+&adc {
+	status = "disabled";
+};
+&i2c1 {
+	status = "disabled";
+};
+&pwm0 {
+	status = "disabled";
+};
+&spi2 {
+	status = "disabled";
+};
+&usbd {
+	status = "disabled";
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp_release.conf gitlab_sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp_release.conf
--- sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/boards/nrf5340dk_nrf5340_cpuapp_release.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,19 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Configure QSPI for external flash
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
+
+CONFIG_DFU_MULTI_IMAGE=y
+CONFIG_NRF53_ENFORCE_IMAGE_VERSION_EQUALITY=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/Kconfig.root gitlab_sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/Kconfig.root
--- sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/Kconfig.root	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/Kconfig.root	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# The purpose of this file is to create a wrapper Kconfig file that will be set as
+# hci_rpmsg_KCONFIG_ROOT and processed before any other Kconfig for hci_rpmsg child image.
+
+rsource "../../../common/Kconfig.hci_rpmsg.defaults"
+source "Kconfig.zephyr"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj.conf gitlab_sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj.conf
--- sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,8 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_LOG=y
+CONFIG_SERIAL=y
+CONFIG_RESET_ON_FATAL_ERROR=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj_release.conf gitlab_sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj_release.conf
--- sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/hci_rpmsg/prj_release.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,9 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_LOG=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_RESET_ON_FATAL_ERROR=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+/ {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+/ {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,33 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Increase main stack size
+CONFIG_MAIN_STACK_SIZE=10240
+
+# Configure MCUboot features
+CONFIG_NRF53_MULTI_IMAGE_UPDATE=y
+CONFIG_BOOT_UPGRADE_ONLY=y
+CONFIG_BOOT_MAX_IMG_SECTORS=256
+CONFIG_MCUBOOT_DOWNGRADE_PREVENTION=y
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Enable flash simulator
+CONFIG_PCD_APP=y
+CONFIG_FLASH_SIMULATOR=y
+CONFIG_FLASH_SIMULATOR_DOUBLE_WRITES=y
+CONFIG_FLASH_SIMULATOR_STATS=n
+
+# Configure QSPI for external flash
+CONFIG_FLASH=y
+CONFIG_FPROTECT=y
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+ / {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,33 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Increase main stack size
+CONFIG_MAIN_STACK_SIZE=10240
+
+# Configure MCUboot features
+CONFIG_NRF53_MULTI_IMAGE_UPDATE=y
+CONFIG_BOOT_UPGRADE_ONLY=y
+CONFIG_BOOT_MAX_IMG_SECTORS=256
+CONFIG_MCUBOOT_DOWNGRADE_PREVENTION=y
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Enable flash simulator
+CONFIG_PCD_APP=y
+CONFIG_FLASH_SIMULATOR=y
+CONFIG_FLASH_SIMULATOR_DOUBLE_WRITES=y
+CONFIG_FLASH_SIMULATOR_STATS=n
+
+# Configure QSPI for external flash
+CONFIG_FLASH=y
+CONFIG_FPROTECT=y
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+ / {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/Kconfig.root gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/Kconfig.root
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/Kconfig.root	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/Kconfig.root	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# The purpose of this file is to create a wrapper Kconfig file that will be set as
+# mcuboot_KCONFIG_ROOT and processed before any other Kconfig for mcuboot child image.
+
+source "${ZEPHYR_BASE}/../sidewalk/samples/common/Kconfig.mcuboot.external_flash.defaults"
+source "${ZEPHYR_BASE}/../bootloader/mcuboot/boot/zephyr/Kconfig"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj.conf gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj.conf
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,18 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_MBEDTLS_CFG_FILE="mcuboot-mbedtls-cfg.h"
+
+# Bootloader size optimization
+# Disable not used modules that cannot be set in Kconfig.mcuboot.defaults due to overriding
+# in board files.
+CONFIG_BOOT_UPGRADE_ONLY=n
+CONFIG_CONSOLE=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_USE_SEGGER_RTT=n
+CONFIG_GPIO=n
+CONFIG_NO_RUNTIME_CHECKS=y
+CONFIG_SIZE_OPTIMIZATIONS=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj_release.conf gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj_release.conf
--- sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/child_image/mcuboot/prj_release.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,18 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_MBEDTLS_CFG_FILE="mcuboot-mbedtls-cfg.h"
+
+# Bootloader size optimization
+# Disable not used modules that cannot be set in Kconfig.mcuboot.defaults due to overriding
+# in board files.
+CONFIG_BOOT_UPGRADE_ONLY=n
+CONFIG_CONSOLE=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_USE_SEGGER_RTT=n
+CONFIG_GPIO=n
+CONFIG_NO_RUNTIME_CHECKS=y
+CONFIG_SIZE_OPTIMIZATIONS=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/cli.conf gitlab_sidewalk/samples/gnss_lr1110/cli.conf
--- sidewalk/samples/gnss_lr1110/cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/cli.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_CLI=y
+
+CONFIG_LR1110_CLI=y
+
+CONFIG_NEWLIB_LIBC_FLOAT_SCANF=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/CMakeLists.txt gitlab_sidewalk/samples/gnss_lr1110/CMakeLists.txt
--- sidewalk/samples/gnss_lr1110/CMakeLists.txt	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/CMakeLists.txt	2023-11-07 13:48:02.430096422 -0800
@@ -0,0 +1,36 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+cmake_minimum_required(VERSION 3.20.0)
+
+include(../common/bootloader_version.cmake)
+
+set(mcuboot_KCONFIG_ROOT $ENV{ZEPHYR_BASE}/../sidewalk/samples/template_subghz/child_image/mcuboot/Kconfig.root)
+set(hci_rpmsg_KCONFIG_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/child_image/hci_rpmsg/Kconfig.root)
+
+find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
+project(sidewalk_template_subghz)
+
+zephyr_include_directories(include)
+
+target_sources(app PRIVATE
+  src/main.c
+  src/application_thread.c
+  src/board_events.c
+  src/sidewalk_callbacks.c
+  src/gnss.c
+  src/wifi.c
+  src/almanac_update.c
+  src/fragment.c
+)
+
+if(DEFINED GNSS_DEBUG)
+	zephyr_compile_definitions(GNSS_DEBUG)
+endif()
+
+if(DEFINED ALMANAC_UPDATE)
+	zephyr_compile_definitions(ALMANAC_UPDATE)
+endif()
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/fsk_cli.conf gitlab_sidewalk/samples/gnss_lr1110/fsk_cli.conf
--- sidewalk/samples/gnss_lr1110/fsk_cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/fsk_cli.conf	2023-11-02 14:18:51.580562620 -0700
@@ -0,0 +1,17 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
+
+CONFIG_SIDEWALK_CLI=y
+CONFIG_LR1110_CLI=y
+CONFIG_NEWLIB_LIBC_FLOAT_SCANF=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/fsk.conf gitlab_sidewalk/samples/gnss_lr1110/fsk.conf
--- sidewalk/samples/gnss_lr1110/fsk.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/fsk.conf	2023-11-02 14:18:56.832669926 -0700
@@ -0,0 +1,13 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/include/almanac_update.h gitlab_sidewalk/samples/gnss_lr1110/include/almanac_update.h
--- sidewalk/samples/gnss_lr1110/include/almanac_update.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/include/almanac_update.h	2023-11-07 14:26:09.508783711 -0800
@@ -0,0 +1,36 @@
+/*!
+ * @file      alamanac_update.h
+ *
+ * @brief     full almanac update of LR11xx
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+
+int almanac_update(void);
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/include/application_thread.h gitlab_sidewalk/samples/gnss_lr1110/include/application_thread.h
--- sidewalk/samples/gnss_lr1110/include/application_thread.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/include/application_thread.h	2023-11-07 13:53:03.508271999 -0800
@@ -0,0 +1,76 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#ifndef APPLICATION_THREAD_H
+#define APPLICATION_THREAD_H
+
+#include <sid_api.h>
+#include "fragment.h"
+
+#ifdef CONFIG_SIDEWALK_LINK_MASK_BLE
+#define BUILT_IN_LM (uint32_t)(SID_LINK_TYPE_1)
+#elif CONFIG_SIDEWALK_LINK_MASK_FSK
+#define BUILT_IN_LM (uint32_t)(SID_LINK_TYPE_2)
+#elif CONFIG_SIDEWALK_LINK_MASK_LORA
+#define BUILT_IN_LM (uint32_t)(SID_LINK_TYPE_3)
+#else
+#error "Not defined Sidewalk link mask!!"
+#endif
+
+#define NB_MAX_SV		8	/* GNSS */
+#define DEFAULT_AUTO_SCAN_INTERVAL		30		/* seconds */
+
+
+#define FRAGMENT_TYPE_GNSS         0	// to cloud port 198
+#define FRAGMENT_TYPE_WIFI         1	// to cloud port 197
+#define FRAGMENT_TYPE_MODEM_MSG    2	// to cloud port 199
+#define FRAGMENT_TYPE_GNSS_NG      3	// to cloud port 192
+
+typedef struct application_context {
+	struct sid_event_callbacks event_callbacks;
+	struct sid_config config;
+	struct sid_handle *handle;
+	bool connection_request;
+	unsigned auto_scan_interval;
+	fragment_t frag;
+} app_ctx_t;
+
+typedef enum application_events {
+	SIDEWALK_EVENT,
+
+	BUTTON_EVENT_SEND_HELLO,
+	BUTTON_EVENT_SET_BATTERY_LEVEL,
+	BUTTON_EVENT_FACTORY_RESET,
+	BUTTON_EVENT_GET_DEVICE_PROFILE,
+	BUTTON_EVENT_SET_DEVICE_PROFILE,
+#if defined(CONFIG_SIDEWALK_DFU)
+	BUTTON_EVENT_NORDIC_DFU,
+#endif
+	EVENT_GNSS_SCAN_START,
+	EVENT_GNSS_SCAN_SEND,
+} app_event_t;
+
+/**
+ * @brief Send Event to application thread
+ *
+ * @param event event to send
+ */
+void app_event_send(app_event_t event);
+
+/**
+ * @brief Initialize and start application thread
+ *
+ * @param ctx application context
+ *
+ * @return SID_ERROR_NULL_POINTER in case of invalid ctx
+ */
+sid_error_t app_thread_init(app_ctx_t *ctx);
+
+int gnss_scan_timer_set(unsigned sec);
+
+void start_gnss_scan(app_ctx_t *app_ctx);
+
+#endif /* APPLICATION_THREAD_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/include/board_events.h gitlab_sidewalk/samples/gnss_lr1110/include/board_events.h
--- sidewalk/samples/gnss_lr1110/include/board_events.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/include/board_events.h	2023-11-07 14:04:45.123044361 -0800
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#ifndef BOARD_EVENTS_H
+#define BOARD_EVENTS_H
+
+#include <application_thread.h>
+
+/**
+ * @brief Application handler for sending hello message
+ *
+ * @param application_ctx
+ */
+void button_event_send_hello(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for sending battery level
+ *
+ * @param application_ctx
+ */
+void button_event_set_battery(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for entering in DFU mode
+ *
+ * @param application_ctx
+ */
+void button_event_DFU(app_ctx_t *application_ctx);
+
+/**
+ * @brief Applicaiton handler for requesting factory reset
+ *
+ * @param application_ctx
+ */
+void button_event_factory_reset(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for reading profile
+ *
+ * @param application_ctx
+ */
+void button_event_get_profile(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for setting profile
+ *
+ * @param application_ctx
+ */
+void button_event_set_ptofile(app_ctx_t *application_ctx);
+
+#endif /* BOARD_EVENTS_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/include/fragment.h gitlab_sidewalk/samples/gnss_lr1110/include/fragment.h
--- sidewalk/samples/gnss_lr1110/include/fragment.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/include/fragment.h	2023-11-07 14:28:02.979279480 -0800
@@ -0,0 +1,56 @@
+/*!
+ * @file      main.c
+ *
+ * @brief     packet fragmentation over sidewalk
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef FRAGMENT_H
+#define FRAGMENT_H
+
+typedef struct {
+	uint8_t index;
+	uint8_t nbytes_sent_this_fragment;
+	uint8_t current_fragment;
+	uint8_t total_fragments;
+	uint8_t total_bytes;
+	uint8_t num_bytes_sending;
+	size_t mtu;
+	uint8_t frag_type;
+	const uint8_t *buffer;
+} fragment_t;
+
+void send_scan_result(void *app_ctx);
+
+void fragment_msg_sent(void *ctx);
+
+void fragment_send_error(void *context);
+
+#endif /* FRAGMENT_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/include/sidewalk_callbacks.h gitlab_sidewalk/samples/gnss_lr1110/include/sidewalk_callbacks.h
--- sidewalk/samples/gnss_lr1110/include/sidewalk_callbacks.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/include/sidewalk_callbacks.h	2023-11-07 14:28:16.531577097 -0800
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#ifndef SIDEWALK_CALLBACKS_H
+#define SIDEWALK_CALLBACKS_H
+
+#include <sid_api.h>
+
+/**
+ * @brief Initialize sidewalk callbacks
+ *
+ * @param context Application context passed to callbacks
+ * @param callbacks [out] callbacks to set
+ * @returns #SID_ERROR_NONE in case of success negative error code otherwise.
+ */
+sid_error_t sidewalk_callbacks_set(void *context, struct sid_event_callbacks *callbacks);
+
+#endif /* SIDEWALK_CALLBACKS_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/Kconfig gitlab_sidewalk/samples/gnss_lr1110/Kconfig
--- sidewalk/samples/gnss_lr1110/Kconfig	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/Kconfig	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,9 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+source "${ZEPHYR_BASE}/../sidewalk/samples/common/Kconfig.defconfig"
+
+source "Kconfig.zephyr"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840_release.yml gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840_release.yml
--- sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840_release.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840_release.yml	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,81 @@
+app:
+  address: 0x7200
+  end_address: 0xf7000
+  region: flash_primary
+  size: 0xefe00
+external_flash:
+  address: 0xf0000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x710000
+mcuboot:
+  address: 0x0
+  end_address: 0x7000
+  placement:
+    before:
+    - mcuboot_primary
+  region: flash_primary
+  size: 0x7000
+mcuboot_pad:
+  address: 0x7000
+  end_address: 0x7200
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x7000
+  end_address: 0xf7000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xf0000
+  span: *id001
+mcuboot_primary_app:
+  address: 0x7200
+  end_address: 0xf7000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xefe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xf0000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xf0000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+settings_storage:
+  address: 0xf7000
+  end_address: 0xf9000
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20000000
+  end_address: 0x20040000
+  region: sram_primary
+  size: 0x40000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840.yml gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840.yml
--- sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf52840dk_nrf52840.yml	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,81 @@
+app:
+  address: 0x7200
+  end_address: 0xf7000
+  region: flash_primary
+  size: 0xefe00
+external_flash:
+  address: 0xf0000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x710000
+mcuboot:
+  address: 0x0
+  end_address: 0x7000
+  placement:
+    before:
+    - mcuboot_primary
+  region: flash_primary
+  size: 0x7000
+mcuboot_pad:
+  address: 0x7000
+  end_address: 0x7200
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x7000
+  end_address: 0xf7000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xf0000
+  span: *id001
+mcuboot_primary_app:
+  address: 0x7200
+  end_address: 0xf7000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xefe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xf0000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xf0000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+settings_storage:
+  address: 0xf7000
+  end_address: 0xf9000
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20000000
+  end_address: 0x20040000
+  region: sram_primary
+  size: 0x40000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml
--- sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,124 @@
+EMPTY_0:
+  address: 0xf6000
+  end_address: 0xf9000
+  placement:
+    after:
+    - settings_storage
+  region: flash_primary
+  size: 0x3000
+app:
+  address: 0x8200
+  end_address: 0xf4000
+  region: flash_primary
+  size: 0xebe00
+external_flash:
+  address: 0x12c000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x6d4000
+mcuboot:
+  address: 0x0
+  end_address: 0x8000
+  region: flash_primary
+  size: 0x8000
+mcuboot_pad:
+  address: 0x8000
+  end_address: 0x8200
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x8000
+  end_address: 0xf4000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xec000
+  span: *id001
+mcuboot_primary_1:
+  address: 0x0
+  device: nordic_ram_flash_controller
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x40000
+mcuboot_primary_app:
+  address: 0x8200
+  end_address: 0xf4000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xebe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xec000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xec000
+mcuboot_secondary_1:
+  address: 0xec000
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0x12c000
+  region: external_flash
+  size: 0x40000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+otp:
+  address: 0xff8100
+  end_address: 0xff83fc
+  region: otp
+  size: 0x2fc
+pcd_sram:
+  address: 0x20000000
+  end_address: 0x20002000
+  placement:
+    after:
+    - start
+  region: sram_primary
+  size: 0x2000
+ram_flash:
+  address: 0x40000
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x0
+rpmsg_nrf53_sram:
+  address: 0x20070000
+  end_address: 0x20080000
+  placement:
+    before:
+    - end
+  region: sram_primary
+  size: 0x10000
+settings_storage:
+  address: 0xf4000
+  end_address: 0xf6000
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20002000
+  end_address: 0x20070000
+  region: sram_primary
+  size: 0x6e000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp.yml gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp.yml
--- sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/pm_static_nrf5340dk_nrf5340_cpuapp.yml	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,124 @@
+EMPTY_0:
+  address: 0xf6000
+  end_address: 0xf9000
+  placement:
+    after:
+    - settings_storage
+  region: flash_primary
+  size: 0x3000
+app:
+  address: 0x8200
+  end_address: 0xf4000
+  region: flash_primary
+  size: 0xebe00
+external_flash:
+  address: 0x12c000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x6d4000
+mcuboot:
+  address: 0x0
+  end_address: 0x8000
+  region: flash_primary
+  size: 0x8000
+mcuboot_pad:
+  address: 0x8000
+  end_address: 0x8200
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x8000
+  end_address: 0xf4000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xec000
+  span: *id001
+mcuboot_primary_1:
+  address: 0x0
+  device: nordic_ram_flash_controller
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x40000
+mcuboot_primary_app:
+  address: 0x8200
+  end_address: 0xf4000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xebe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xec000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xec000
+mcuboot_secondary_1:
+  address: 0xec000
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0x12c000
+  region: external_flash
+  size: 0x40000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+otp:
+  address: 0xff8100
+  end_address: 0xff83fc
+  region: otp
+  size: 0x2fc
+pcd_sram:
+  address: 0x20000000
+  end_address: 0x20002000
+  placement:
+    after:
+    - start
+  region: sram_primary
+  size: 0x2000
+ram_flash:
+  address: 0x40000
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x0
+rpmsg_nrf53_sram:
+  address: 0x20070000
+  end_address: 0x20080000
+  placement:
+    before:
+    - end
+  region: sram_primary
+  size: 0x10000
+settings_storage:
+  address: 0xf4000
+  end_address: 0xf6000
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20002000
+  end_address: 0x20070000
+  region: sram_primary
+  size: 0x6e000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/pm_static.yml gitlab_sidewalk/samples/gnss_lr1110/pm_static.yml
--- sidewalk/samples/gnss_lr1110/pm_static.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/pm_static.yml	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,9 @@
+sidewalk_storage:
+  address: 0xf9000
+  region: flash_primary
+  size: 0x6000
+
+mfg_storage:
+  address: 0xff000
+  region: flash_primary
+  size: 0x1000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/prj.conf gitlab_sidewalk/samples/gnss_lr1110/prj.conf
--- sidewalk/samples/gnss_lr1110/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/prj.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,27 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Sidewalk
+CONFIG_SIDEWALK=y
+CONFIG_SIDEWALK_LINK_MASK_LORA=y
+
+# Logs
+CONFIG_SIDEWALK_LOG_LEVEL_INF=y
+CONFIG_NVS_LOG_LEVEL_WRN=y
+CONFIG_LOG_PRINTK=y
+
+# Buttons and LEDs
+CONFIG_GPIO=y
+CONFIG_DK_LIBRARY=y
+
+# Bluetooth
+CONFIG_BT_DEVICE_NAME="Sid template"
+
+# Debug
+CONFIG_RESET_ON_FATAL_ERROR=n
+
+# Power Management
+CONFIG_PM_DEVICE=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/prj_release.conf gitlab_sidewalk/samples/gnss_lr1110/prj_release.conf
--- sidewalk/samples/gnss_lr1110/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/prj_release.conf	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,31 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Sidewalk
+CONFIG_SIDEWALK=y
+CONFIG_SIDEWALK_LINK_MASK_LORA=y
+
+# Buttons and LEDs
+CONFIG_GPIO=y
+CONFIG_DK_LIBRARY=y
+
+# Bluetooth
+CONFIG_BT_DEVICE_NAME="Sid template"
+
+# Disable peripherals
+CONFIG_LOG=n
+CONFIG_SERIAL=n
+CONFIG_SHELL=n
+CONFIG_CONSOLE=n
+CONFIG_UART_CONSOLE=n
+CONFIG_ASSERT=n
+CONFIG_ASSERT_VERBOSE=n
+CONFIG_ASSERT_NO_FILE_INFO=y
+CONFIG_PRINTK_SYNC=n
+CONFIG_THREAD_NAME=n
+
+# Power Management
+CONFIG_PM_DEVICE=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/readme.md gitlab_sidewalk/samples/gnss_lr1110/readme.md
--- sidewalk/samples/gnss_lr1110/readme.md	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/readme.md	2023-11-06 09:45:50.058870860 -0800
@@ -0,0 +1,30 @@
+# Nordic sidewalk template_subghz with added LR1110 GNSS scan
+
+(all references here to LR1110 also apply to LR1120)
+## hardware
+[NRF52840-DK](https://www.nordicsemi.com/Products/Development-hardware/nrf52840-dk) with [LR1110 development kit for 915MHz north america](https://www.semtech.com/products/wireless-rf/lora-edge/lr1110dvk1tcks)
+## prerequisites
+1) Set up your [Nordic development environment](https://nrfconnect.github.io/sdk-sidewalk/setting_up_sidewalk_environment/setting_up_sdk.html) if you haven't already done so.  And you have [provisioned the device](https://nrfconnect.github.io/sdk-sidewalk/setting_up_sidewalk_environment/setting_up_sidewalk_product.html) and loaded the ``Nordic_MFG.hex`` into the board.
+   * If you have never used sidewalk before, it is recommended to first run template_subghz (as provided by nordic) with the sx1262 shield
+2) Load an almanac (if not yet previously loaded) on the LR1110 shield using ``get_full_almanac.py`` from parent directory, and build this project with ``-DALMANAC_UPDATE=1`` added to build command line
+3) Edit ``src/board_events.c`` with your approximate position, for ``ASSIST_LONGITUDE`` and ``ASSIST_LATITUDE``
+4) later, after building & flashing, the LR11xx firmware version will print in the logs upon startup.  Check that  for LR1110 its at least version 0x0308, or for LR112x its at least version 0x0102.   If its earlier / older, then use the [firmware updater tool](https://github.com/Lora-net/SWTL001/wiki).  Or ``../SWLT001`` on this platform.
+
+## LR1110 build:
+``west build -b nrf52840dk_nrf52840 -- -DRADIO=LR1110  -DOVERLAY_CONFIG="cli.conf"``
+
+``west flash``
+
+## running
+The LR1110 shield has 3 LEDs.  Green indicating sidewalk RX, red indicating sidewalk TX, and yellow indicating WiFi scan.  Sidewalk CSS mode (LDR mode) limits 19 bytes per packet, so a Wifi scan will be sent up in two to three fragments.
+
+The usb-uart is available just as with the original template_subghz from Nordic (i.e. 115200bps), showing logs and status.  When built with ``cli.conf``You can interact on the command line in addition to viewing the execution log.   The available CLI for LR1110 is seen by just typing only ``lr1110``. 
+commands of interest    The auto-timer to trigger scans is accessible with ``lr1110 gt`` no argument to read value, or use zero to shut off timer.
+
+## Reporting format to cloud:
+Fragmentation to accommodate smaller MTU:  a single byte at the start of application-layer payload is used to indicate 3 items: message type, total number of fragments, and current fragment.
+| bits of header byte | description |  
+| ----------- | ----------- |  
+| 6,7 | message type |  
+| 3,4,5 | total fragments |
+| 0,1,2 | current fragment |
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/sample.yaml gitlab_sidewalk/samples/gnss_lr1110/sample.yaml
--- sidewalk/samples/gnss_lr1110/sample.yaml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/sample.yaml	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,64 @@
+sample:
+  name: Sidewalk application template
+  description: Sample implementing Amazon Sidewalk End Device
+tests:
+  sample.sidewalk.template.lora:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
+
+  sample.sidewalk.template.lora.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: CONFIG_SIDEWALK_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk_cli
+
+  sample.sidewalk.template.lr1110.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: CONFIG_LR1110_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: LR1110_cli
+
+  sample.sidewalk.template.lora.release:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: CONF_FILE=prj_release.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
+
+  sample.sidewalk.template.fsk:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: OVERLAY_CONFIG=fsk.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
+
+  sample.sidewalk.template.fsk.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: OVERLAY_CONFIG=fsk.conf CONFIG_SIDEWALK_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk_cli
+
+  sample.sidewalk.template.fsk.release:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: OVERLAY_CONFIG=fsk.conf CONF_FILE=prj_release.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/almanac_update.c gitlab_sidewalk/samples/gnss_lr1110/src/almanac_update.c
--- sidewalk/samples/gnss_lr1110/src/almanac_update.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/almanac_update.c	2023-11-07 14:26:03.156643773 -0800
@@ -0,0 +1,157 @@
+/*!
+ * @file      alamanac_update.c
+ *
+ * @brief     full almanac update of LR11xx
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifdef ALMANAC_UPDATE
+#include <time.h>
+#include <zephyr/logging/log.h>
+
+#include <almanac_update.h>
+#include <almanac.h> // generated by get_full_almanac.py
+
+#include <lr11xx_hal.h>
+#include "halo_lr11xx_radio.h"
+
+#define OFFSET_BETWEEN_GPS_EPOCH_AND_UNIX_EPOCH 315964800
+
+#define TIME_BUFFER_SIZE 80
+
+LOG_MODULE_REGISTER(almanac, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static bool get_almanac_crc( const void* ral_context, uint32_t* almanac_crc )
+{
+    lr11xx_status_t                         err;
+    lr11xx_gnss_context_status_bytestream_t context_status_bytestream;
+    lr11xx_gnss_context_status_t            context_status;
+
+    err = lr11xx_gnss_get_context_status( ral_context, context_status_bytestream );
+    if( err != LR11XX_STATUS_OK )
+    {
+        LOG_ERR( "Failed to get gnss context status" );
+        return false;
+    }
+
+    err = lr11xx_gnss_parse_context_status_buffer( context_status_bytestream, &context_status );
+    if( err != LR11XX_STATUS_OK )
+    {
+        LOG_ERR( "Failed to parse gnss context status to get almanac status" );
+        return false;
+    }
+
+    *almanac_crc = context_status.global_almanac_crc;
+
+    return true;
+}
+
+static bool _almanac_update( const void* ral_context )
+{
+    uint32_t global_almanac_crc, local_almanac_crc;
+    local_almanac_crc =
+        ( full_almanac[6] << 24 ) + ( full_almanac[5] << 16 ) + ( full_almanac[4] << 8 ) + ( full_almanac[3] );
+
+    if( get_almanac_crc( ral_context, &global_almanac_crc ) == false )
+    {
+        LOG_ERR( "Failed to get almanac CRC before update" );
+        return false;
+    }
+    if( global_almanac_crc != local_almanac_crc )
+    {
+        LOG_INF( "Local almanac doesn't match LR11XX almanac -> start update" );
+
+        /* Load almanac in flash */
+        uint16_t almanac_idx = 0;
+        while( almanac_idx < sizeof( full_almanac ) )
+        {
+            if( lr11xx_gnss_almanac_update( ral_context, full_almanac + almanac_idx, 1 ) != LR11XX_STATUS_OK )
+            {
+                LOG_ERR( "Failed to update almanac" );
+                return false;
+            }
+            almanac_idx += LR11XX_GNSS_SINGLE_ALMANAC_WRITE_SIZE;
+        }
+
+        /* Check CRC again to confirm proper update */
+        if( get_almanac_crc( ral_context, &global_almanac_crc ) == false )
+        {
+            LOG_ERR( "Failed to get almanac CRC after update" );
+            return false;
+        }
+        if( global_almanac_crc != local_almanac_crc )
+        {
+            LOG_ERR( "Local almanac doesn't match LR11XX almanac -> update failed" );
+            return false;
+        }
+        else
+        {
+            LOG_INF( "Almanac update succeeded" );
+        }
+    }
+    else
+    {
+        LOG_INF( "Local almanac matches LR11XX almanac -> no update" );
+    }
+
+    return true;
+}
+
+int almanac_update()
+{
+    /* Convert raw almanac date to epoch time */
+    uint16_t almanac_date_raw = ( uint16_t )( ( full_almanac[2] << 8 ) | full_almanac[1] );
+    time_t   almanac_date = ( OFFSET_BETWEEN_GPS_EPOCH_AND_UNIX_EPOCH + 24 * 3600 * ( 2048 * 7 + almanac_date_raw ) );
+
+    /* Convert epoch time to human readbale format */
+    char             buf[TIME_BUFFER_SIZE];
+    const struct tm* time = localtime( &almanac_date );
+    strftime( buf, TIME_BUFFER_SIZE, "%a %Y-%m-%d %H:%M:%S %Z", time );
+    LOG_INF( "Source almanac date: %s", buf );
+
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		LOG_ERR("wakeup fail");
+		return LR11XX_STATUS_ERROR;
+	}
+
+	uint16_t chip_almanac_age;
+	lr11xx_status_t ret = lr11xx_gnss_get_almanac_age_for_satellite(drv_ctx, 0, &chip_almanac_age);
+	if (ret != LR11XX_STATUS_OK) {
+		LOG_ERR("lr1110_gnss_get_almanac_age_for_satellite() fail");
+		return ret;
+	}
+	LOG_INF("chip_almanac_age 0x%x, header raw 0x%x", chip_almanac_age, almanac_date_raw);
+
+	_almanac_update(drv_ctx);
+	
+	return 0;
+}
+#endif /* ALMANAC_UPDATE */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/application_thread.c gitlab_sidewalk/samples/gnss_lr1110/src/application_thread.c
--- sidewalk/samples/gnss_lr1110/src/application_thread.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/application_thread.c	2023-11-07 14:23:26.737188911 -0800
@@ -0,0 +1,145 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+#include <sid_api.h>
+#include <sid_error.h>
+
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+
+#include <board_events.h>
+#include <pal_init.h>
+#if defined(CONFIG_SIDEWALK_CLI)
+#include <sid_shell.h>
+#endif
+#if defined(CONFIG_LR1110_CLI)
+#include <lr1110_shell.h>
+#endif
+
+#include <application_thread.h>
+#include <state_notifier.h>
+#ifdef ALMANAC_UPDATE
+#include <almanac_update.h>
+#endif /* ALMANAC_UPDATE */
+
+static struct k_thread application_thread;
+
+K_THREAD_STACK_DEFINE(application_thread_stack, CONFIG_SIDEWALK_THREAD_STACK_SIZE);
+K_MSGQ_DEFINE(application_thread_msgq, sizeof(app_event_t), CONFIG_SIDEWALK_THREAD_QUEUE_SIZE, 4);
+
+LOG_MODULE_REGISTER(application, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static void sidewalk_app_entry(void *ctx, void *unused, void *unused2)
+{
+	ARG_UNUSED(unused);
+	ARG_UNUSED(unused2);
+	app_ctx_t *application_ctx = (app_ctx_t *)ctx;
+
+	if (application_pal_init()) {
+		LOG_ERR("Failed to initialze PAL layer for sidewalk applicaiton.");
+		application_state_error(&global_state_notifier, true);
+		return;
+	}
+
+	sid_error_t err = sid_init(&application_ctx->config, &application_ctx->handle);
+
+	switch (err) {
+	case SID_ERROR_NONE:
+		break;
+	case SID_ERROR_ALREADY_INITIALIZED:
+		LOG_WRN("Sidewalk already initialized!");
+		break;
+	default:
+		LOG_ERR("Unknown error (%d) during sidewalk initialization!", err);
+		application_state_error(&global_state_notifier, true);
+		return;
+	}
+
+#ifdef ALMANAC_UPDATE
+	almanac_update();
+#endif /* ALMANAC_UPDATE */
+
+	err = sid_start(application_ctx->handle, BUILT_IN_LM);
+	if (err) {
+		LOG_ERR("Unknown error (%d) during sidewalk start!", err);
+		application_state_error(&global_state_notifier, true);
+		return;
+	}
+#if defined(CONFIG_SIDEWALK_CLI)
+	CLI_init(application_ctx->handle, &application_ctx->config);
+#endif
+#if defined(CONFIG_LR1110_CLI)
+	LR1110_CLI_init(application_ctx->handle);
+#endif
+	application_state_connected(&global_state_notifier, false);
+	application_state_working(&global_state_notifier, true);
+	while (true) {
+		app_event_t event = SIDEWALK_EVENT;
+
+		if (!k_msgq_get(&application_thread_msgq, &event, K_FOREVER)) {
+			switch (event) {
+			case SIDEWALK_EVENT:
+				err = sid_process(application_ctx->handle);
+				if (err) {
+					LOG_WRN("sid_process returned %d", err);
+				}
+				break;
+			case BUTTON_EVENT_SEND_HELLO:
+				button_event_send_hello(application_ctx);
+				break;
+			case BUTTON_EVENT_SET_BATTERY_LEVEL:
+				button_event_set_battery(application_ctx);
+				break;
+			case BUTTON_EVENT_FACTORY_RESET:
+				button_event_factory_reset(application_ctx);
+				break;
+			case BUTTON_EVENT_GET_DEVICE_PROFILE:
+				button_event_get_profile(application_ctx);
+				break;
+			case BUTTON_EVENT_SET_DEVICE_PROFILE:
+				button_event_set_ptofile(application_ctx);
+				break;
+			case EVENT_GNSS_SCAN_START:
+				start_gnss_scan(application_ctx);
+				break;
+			case EVENT_GNSS_SCAN_SEND:
+				send_scan_result(application_ctx);
+				break;
+
+#if defined(CONFIG_SIDEWALK_DFU_SERVICE_BLE)
+			case BUTTON_EVENT_NORDIC_DFU:
+				button_event_DFU(application_ctx);
+				break;
+#endif
+
+			default:
+				LOG_ERR("Invalid Event received!");
+			}
+		}
+	}
+	application_state_working(&global_state_notifier, false);
+}
+
+void app_event_send(app_event_t event)
+{
+	int ret = k_msgq_put(&application_thread_msgq, (void *)&event,
+			     k_is_in_isr() ? K_NO_WAIT : K_FOREVER);
+
+	if (ret) {
+		LOG_ERR("Failed to send event to application thread. err: %d", ret);
+	}
+}
+
+sid_error_t app_thread_init(app_ctx_t *ctx)
+{
+	if (!ctx) {
+		return SID_ERROR_NULL_POINTER;
+	}
+	(void)k_thread_create(&application_thread, application_thread_stack,
+			      K_THREAD_STACK_SIZEOF(application_thread_stack), sidewalk_app_entry,
+			      ctx, NULL, NULL, CONFIG_SIDEWALK_THREAD_PRIORITY, 0, K_NO_WAIT);
+	k_thread_name_set(&application_thread, "sidewalk_thread");
+	return SID_ERROR_NONE;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/board_events.c gitlab_sidewalk/samples/gnss_lr1110/src/board_events.c
--- sidewalk/samples/gnss_lr1110/src/board_events.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/board_events.c	2023-11-07 13:59:09.855904983 -0800
@@ -0,0 +1,203 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_900_cfg.h>
+
+#include <state_notifier.h>
+#include <board_events.h>
+
+#if defined(CONFIG_SIDEWALK_DFU)
+#include <nordic_dfu.h>
+#endif
+
+#include <zephyr/logging/log.h>
+#include <zephyr/settings/settings.h>
+#include <zephyr/sys/reboot.h>
+#include <zephyr/kernel.h>
+
+LOG_MODULE_REGISTER(board_events, CONFIG_SIDEWALK_LOG_LEVEL);
+
+#if defined(CONFIG_SIDEWALK_LINK_MASK_FSK)
+static struct sid_device_profile profile_light = {
+	.unicast_params.device_profile_id = SID_LINK2_PROFILE_1,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_INFINITE,
+	.unicast_params.unicast_window_interval.sync_rx_interval_ms =
+		SID_LINK2_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_fast = {
+	.unicast_params.device_profile_id = SID_LINK2_PROFILE_2,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_INFINITE,
+	.unicast_params.unicast_window_interval.sync_rx_interval_ms =
+		SID_LINK2_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_from_dev = { .unicast_params.device_profile_id =
+							      SID_LINK2_PROFILE_1 };
+#elif defined(CONFIG_SIDEWALK_LINK_MASK_LORA)
+static struct sid_device_profile profile_light = {
+	.unicast_params.device_profile_id = SID_LINK3_PROFILE_A,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_2,
+	.unicast_params.unicast_window_interval.async_rx_interval_ms =
+		SID_LINK3_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_fast = {
+	.unicast_params.device_profile_id = SID_LINK3_PROFILE_B,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_INFINITE,
+	.unicast_params.unicast_window_interval.async_rx_interval_ms =
+		SID_LINK3_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_from_dev = { .unicast_params.device_profile_id =
+							      SID_LINK3_PROFILE_A };
+#endif
+
+void button_event_send_hello(app_ctx_t *application_ctx)
+{
+	struct sid_status status = { .state = SID_STATE_NOT_READY };
+	sid_error_t err;
+
+	static uint8_t counter = 0;
+	static struct sid_msg msg;
+	static struct sid_msg_desc desc;
+
+	err = sid_get_status(application_ctx->handle, &status);
+	switch (err) {
+	case SID_ERROR_NONE:
+		break;
+	case SID_ERROR_INVALID_ARGS:
+		LOG_ERR("Sidewalk library is not initialzied!");
+		return;
+	default:
+		LOG_ERR("Unknown error during sid_get_status() -> %d", err);
+		return;
+	}
+
+	if (status.state != SID_STATE_READY && status.state != SID_STATE_SECURE_CHANNEL_READY) {
+		LOG_ERR("Sidewalk Status is invalid!, expected SID_STATE_READY or SID_STATE_SECURE_CHANNEL_READY, got %d",
+			status.state);
+		return;
+	}
+
+	msg = (struct sid_msg){ .data = (uint8_t *)&counter, .size = sizeof(uint8_t) };
+	desc = (struct sid_msg_desc){
+		.type = SID_MSG_TYPE_NOTIFY,
+		.link_type = SID_LINK_TYPE_ANY,
+		.link_mode = SID_LINK_MODE_CLOUD,
+	};
+
+	err = sid_put_msg(application_ctx->handle, &msg, &desc);
+	switch (err) {
+	case SID_ERROR_NONE: {
+		application_state_sending(&global_state_notifier, true);
+		counter++;
+		LOG_INF("queued data message id:%d", desc.id);
+		break;
+	}
+	case SID_ERROR_TRY_AGAIN: {
+		LOG_ERR("there is no space in the transmit queue, Try again.");
+		break;
+	}
+	default:
+		LOG_ERR("Unknown error returned from sid_put_msg() -> %d", err);
+	}
+}
+
+
+void button_event_set_battery(app_ctx_t *application_ctx)
+{
+	static uint8_t fake_bat_lev = 70;
+
+	++fake_bat_lev;
+	if (fake_bat_lev > 100) {
+		fake_bat_lev = 0;
+	}
+	sid_error_t ret = sid_option(application_ctx->handle, SID_OPTION_BLE_BATTERY_LEVEL,
+				     &fake_bat_lev, sizeof(fake_bat_lev));
+
+	if (SID_ERROR_NONE != ret) {
+		LOG_ERR("failed setting Sidewalk option!");
+	} else {
+		LOG_DBG("set battery level to %d", fake_bat_lev);
+	}
+}
+
+#if defined(CONFIG_SIDEWALK_DFU_SERVICE_BLE)
+void button_event_DFU(app_ctx_t *application_ctx)
+{
+	bool DFU_mode = true;
+
+	(void)settings_save_one(CONFIG_DFU_FLAG_SETTINGS_KEY, (const void *)&DFU_mode,
+				sizeof(DFU_mode));
+
+	sid_deinit(application_ctx->handle);
+	k_sleep(K_SECONDS(1));
+
+	sys_reboot(SYS_REBOOT_COLD);
+}
+
+#endif /* CONFIG_SIDEWALK_DFU_SERVICE_BLE */
+
+void button_event_factory_reset(app_ctx_t *application_ctx)
+{
+	sid_error_t ret = sid_set_factory_reset(application_ctx->handle);
+
+	if (SID_ERROR_NONE != ret) {
+		LOG_ERR("Notification of factory reset to sid api failed!");
+	} else {
+		LOG_DBG("Wait for Sid api to notify to proceed with factory reset!");
+	}
+}
+
+void button_event_get_profile(app_ctx_t *application_ctx)
+{
+	sid_error_t ret = sid_option(application_ctx->handle, SID_OPTION_900MHZ_GET_DEVICE_PROFILE,
+				     &profile_from_dev, sizeof(profile_from_dev));
+
+	if (ret) {
+		LOG_ERR("Profile get failed (err %d)", ret);
+		return;
+	}
+
+	LOG_INF("\n"
+		"Profile id 0x%x\n"
+		"Profile dl count %d\n"
+		"Profile dl interval %d\n"
+		"Profile wakeup %d\n",
+		profile_from_dev.unicast_params.device_profile_id,
+		profile_from_dev.unicast_params.rx_window_count,
+		profile_from_dev.unicast_params.unicast_window_interval.async_rx_interval_ms,
+		profile_from_dev.unicast_params.wakeup_type);
+}
+
+void button_event_set_ptofile(app_ctx_t *application_ctx)
+{
+	static struct sid_device_profile *new_profile = &profile_light;
+
+	LOG_INF("Profile set %s", (&profile_light == new_profile) ? "light" : "fast");
+
+	sid_error_t ret = sid_option(application_ctx->handle, SID_OPTION_900MHZ_SET_DEVICE_PROFILE,
+				     new_profile, sizeof(*new_profile));
+
+	if (!ret) {
+		new_profile = (&profile_light == new_profile) ? &profile_fast : &profile_light;
+		LOG_INF("Profile set success.");
+	} else {
+		LOG_ERR("Profile set failed (err %d)", ret);
+	}
+}
+
+void app_event_send_standby() { }
+void app_event_send_sleep() { }
+void app_event_send_sid_init() { }
+void app_event_send_wake() { }
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/fragment.c gitlab_sidewalk/samples/gnss_lr1110/src/fragment.c
--- sidewalk/samples/gnss_lr1110/src/fragment.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/fragment.c	2023-11-07 14:28:05.319330875 -0800
@@ -0,0 +1,123 @@
+/*!
+ * @file      fragment.c
+ *
+ * @brief     packet fragmentation over sidewalk
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <application_thread.h>
+#include <string.h>
+#include <state_notifier.h>
+#include <zephyr/logging/log.h>
+
+LOG_MODULE_REGISTER(fragment, CONFIG_SIDEWALK_LOG_LEVEL);
+
+void send_scan_result(void *context)
+{
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+	sid_error_t err;
+	static struct sid_msg msg;
+	static struct sid_msg_desc desc;
+	static uint8_t dummy[258];
+	uint8_t remaining = app_ctx->frag.total_bytes - app_ctx->frag.index;
+	uint8_t this_length = remaining;
+	uint8_t byte_per_fragment = app_ctx->frag.mtu - 1;
+
+#ifdef GNSS_DEBUG
+	LOG_INF("send_scan_result index:%d total:%d cur_frag:%d mtu=%d", app_ctx->frag.index, app_ctx->frag.total_bytes, app_ctx->frag.current_fragment, app_ctx->frag.mtu);
+#endif /* GNSS_DEBUG */
+
+	if (this_length > byte_per_fragment)
+		this_length = byte_per_fragment;
+
+	app_ctx->frag.nbytes_sent_this_fragment = this_length;
+
+	dummy[0] = app_ctx->frag.current_fragment & 7;
+	dummy[0] |= (app_ctx->frag.total_fragments & 7) << 3;
+	dummy[0] |= (app_ctx->frag.frag_type & 3) << 6;
+	memcpy(dummy+1, app_ctx->frag.buffer + app_ctx->frag.index, this_length);
+
+#ifdef GNSS_DEBUG
+	LOG_HEXDUMP_INF(dummy, this_length+1, "fragment");
+#endif /* GNSS_DEBUG */
+	msg = (struct sid_msg){ .data = dummy, .size = this_length+1};
+	desc = (struct sid_msg_desc){
+		.type = SID_MSG_TYPE_NOTIFY,
+		.link_type = SID_LINK_TYPE_ANY,
+		.link_mode = SID_LINK_MODE_CLOUD,
+	};
+
+	err = sid_put_msg(app_ctx->handle, &msg, &desc);
+	switch (err) {
+	case SID_ERROR_NONE: {
+		application_state_sending(&global_state_notifier, true);
+		LOG_INF("queued data message id:%d", desc.id);
+		break;
+	}
+	case SID_ERROR_TRY_AGAIN: {
+		LOG_ERR("there is no space in the transmit queue, Try again.");
+		break;
+	}
+	default: LOG_ERR("Unknown error returned from sid_put_msg() -> %d", err);
+	}
+}
+
+void fragment_msg_sent(void *context)
+{
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+
+	if (app_ctx->frag.total_fragments > 0) {
+		/* done sending gnss fragment */
+		app_ctx->frag.index += app_ctx->frag.nbytes_sent_this_fragment;
+		if (++app_ctx->frag.current_fragment < app_ctx->frag.total_fragments) {
+			/* send next fragment */
+			app_event_send(EVENT_GNSS_SCAN_SEND);
+		} else {
+			if (app_ctx->frag.index != app_ctx->frag.total_bytes)
+				LOG_ERR("incorrect send completion count (%d %d)", app_ctx->frag.index, app_ctx->frag.total_bytes);
+			else
+				LOG_INF("done sending fragments (%u %u)", app_ctx->frag.index, app_ctx->frag.total_bytes);
+			app_ctx->frag.total_fragments = 0;	// indicate done sending
+			app_ctx->frag.current_fragment = 0;
+		}
+	}
+}
+
+void fragment_send_error(void *context)
+{
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+
+	if (app_ctx->frag.total_fragments > 0) {
+		/* TODO: reproduce this failure and then implement sending retry */
+		LOG_ERR("aborting fragment-send");
+		app_ctx->frag.total_fragments = 0;	// indicate done sending
+		app_ctx->frag.current_fragment = 0;
+	}
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/gnss.c gitlab_sidewalk/samples/gnss_lr1110/src/gnss.c
--- sidewalk/samples/gnss_lr1110/src/gnss.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/gnss.c	2023-11-07 14:27:16.178250965 -0800
@@ -0,0 +1,147 @@
+/*!
+ * @file      gnss.c
+ *
+ * @brief     GNSS LR11xx application layer, initiate scan & send
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <math.h>
+#include <stdbool.h>
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+#include <halo_lr11xx_radio.h>
+#include <application_thread.h>
+
+#ifdef LR11xx
+lr11xx_gnss_result_t gnss_result;
+#define ASSIST_LATITUDE		34.2
+#define ASSIST_LONGITUDE	-119.03
+lr11xx_gnss_solver_assistance_position_t assistance_position = { ASSIST_LATITUDE, ASSIST_LONGITUDE };
+#endif /* LR11xx */
+
+extern lr11xx_gnss_result_t gnss_result;
+
+LOG_MODULE_REGISTER(app_gnss, CONFIG_SIDEWALK_LOG_LEVEL);
+
+void on_gnss_scan_done(void *arg)
+{
+	app_ctx_t *app_ctx = arg;
+	uint8_t n_sv_detected = 0;
+	void *drv_ctx = lr11xx_get_drv_ctx();
+
+	if (app_ctx == NULL) {
+		LOG_ERR("on_gnss_scan_done no context");
+		return;
+	}
+
+	lr11xx_status_t status = lr11xx_gnss_get_result_size(drv_ctx, &gnss_result.length);
+	if (status != LR11XX_STATUS_OK) {
+		LOG_ERR("gnss_get_result_size fail");
+		return;
+	}
+#ifdef GNSS_DEBUG
+	LOG_INF("result size %d", gnss_result.length);
+#endif /* GNSS_DEBUG */
+	if (gnss_result.length >= GNSS_RESULT_SIZE) {
+		LOG_ERR("result too big %d > %d", gnss_result.length, GNSS_RESULT_SIZE);
+		return;
+	}
+
+	status = lr11xx_gnss_read_results(drv_ctx, gnss_result.buffer, gnss_result.length);
+	if (status != LR11XX_STATUS_OK) {
+		LOG_ERR("gnss_read_results fail");
+		return;
+	}
+
+	lr11xx_gnss_get_nb_detected_satellites(drv_ctx, &n_sv_detected);
+#ifdef GNSS_DEBUG
+	lr11xx_gnss_detected_satellite_t sv_detected[NB_MAX_SV] = { 0 };
+	LOG_INF("on_gnss_scan_done %d SV", n_sv_detected);
+	lr11xx_gnss_get_detected_satellites( drv_ctx, n_sv_detected, sv_detected );
+	for( uint8_t index_sv = 0; index_sv < n_sv_detected; index_sv++ )
+	{
+		const lr11xx_gnss_detected_satellite_t* local_sv = &sv_detected[index_sv];
+		LOG_INF( "  - SV %u: CNR: %i, doppler: %i", local_sv->satellite_id, local_sv->cnr,
+			local_sv->doppler );
+	}
+	LOG_HEXDUMP_INF(gnss_result.buffer, gnss_result.length, "nav");
+#endif /* GNSS_DEBUG */
+
+	if (app_ctx->frag.total_fragments > 0) {
+		LOG_WRN("already sending scan-result");
+		return;
+	}
+
+	if (n_sv_detected > 4) {
+		uint8_t length = gnss_result.length - 1;
+		float total_fragments = length / (float)(app_ctx->frag.mtu-1);	// -1 space for header
+		app_ctx->frag.total_fragments = ceil(total_fragments);
+		LOG_INF("%p mtu %d, total fragments %u", app_ctx, app_ctx->frag.mtu, app_ctx->frag.total_fragments);
+		app_ctx->frag.index = 1;
+		app_ctx->frag.total_bytes = length + 1;
+		app_ctx->frag.buffer = gnss_result.buffer;
+		app_ctx->frag.frag_type = FRAGMENT_TYPE_GNSS;
+		app_event_send(EVENT_GNSS_SCAN_SEND);
+	}
+}
+
+void start_gnss_scan(app_ctx_t *app_ctx)
+{
+	struct sid_timespec curr_time;
+	void * drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		LOG_ERR("scan_timer: wake-up fail");
+		return;
+	}
+
+	sid_error_t ret = sid_get_time(app_ctx->handle, SID_GET_GPS_TIME, &curr_time);
+	if (SID_ERROR_NONE != ret) {
+		LOG_ERR("scan_timer: sid_get_time fail %d", ret);
+		return;
+	}
+	lr11xx_status_t status;
+	status = lr11xx_gnss_set_assistance_position(drv_ctx, &assistance_position);
+	if (status == LR11XX_STATUS_ERROR) {
+		LOG_ERR("scan_timer: set assist-pos fail");
+		return;
+	}
+	status = lr11xx_gnss_scan_assisted(drv_ctx,
+		curr_time.tv_sec,
+		LR11XX_GNSS_OPTION_BEST_EFFORT,
+		LR11XX_GNSS_RESULTS_DOPPLER_ENABLE_MASK | LR11XX_GNSS_RESULTS_DOPPLER_MASK | LR11XX_GNSS_RESULTS_BIT_CHANGE_MASK,
+		NB_MAX_SV
+	);
+	if (status == LR11XX_STATUS_ERROR)
+		LOG_ERR("scan_timer: assisted scan fail");
+#ifdef GNSS_DEBUG
+	else
+		LOG_INF("scan_timer: assisted scan started %u, %f %f", curr_time.tv_sec, assistance_position.latitude, assistance_position.longitude);
+#endif /* GNSS_DEBUG */
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/main.c gitlab_sidewalk/samples/gnss_lr1110/src/main.c
--- sidewalk/samples/gnss_lr1110/src/main.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/main.c	2023-11-07 13:58:51.439519274 -0800
@@ -0,0 +1,170 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_pal_assert_ifc.h>
+#include <app_ble_config.h>
+#include <app_subGHz_config.h>
+
+#include <stdbool.h>
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+#include <zephyr/settings/settings.h>
+
+#include <settings_utils.h>
+#include <dk_buttons_and_leds.h>
+#include <sidewalk_version.h>
+#include <nordic_dfu.h>
+#if defined(CONFIG_BOOTLOADER_MCUBOOT)
+#include <zephyr/dfu/mcuboot.h>
+#endif
+#if defined(CONFIG_GPIO)
+#include <state_notifier_gpio_backend.h>
+#endif
+#if defined(CONFIG_LOG)
+#include <state_notifier_log_backend.h>
+#endif
+
+#include <pal_init.h>
+#include <buttons.h>
+#include <application_thread.h>
+#include <sidewalk_callbacks.h>
+
+#if defined(CONFIG_NORDIC_QSPI_NOR)
+#include <zephyr/device.h>
+#include <zephyr/pm/device.h>
+
+#define EXTERNAL_FLASH DT_CHOSEN(nordic_pm_ext_flash)
+#endif
+
+LOG_MODULE_REGISTER(main, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static void scan_timer_cb(struct k_timer *);
+K_TIMER_DEFINE(scan_timer, scan_timer_cb, NULL);
+
+static app_ctx_t app_context;
+void *gnss_scan_done_context = &app_context;
+
+static void scan_timer_cb(struct k_timer *timer_id)
+{
+	app_event_send(EVENT_GNSS_SCAN_START);
+}
+
+unsigned gnss_scan_timer_get()
+{
+	return k_ticks_to_ms_floor32(scan_timer.period.ticks) / MSEC_PER_SEC;
+}
+
+int gnss_scan_timer_set(unsigned sec)
+{
+	if (sec == 0) {
+		k_timer_stop(&scan_timer);
+		LOG_INF("timer stopped");
+	} else {
+		k_timer_start(&scan_timer, Z_TIMEOUT_NO_WAIT, K_SECONDS(sec));
+	}
+	return 0;
+}
+
+static void button_handler(uint32_t event)
+{
+	app_event_send((app_event_t)event);
+}
+
+static sid_error_t app_buttons_init(btn_handler_t handler)
+{
+	button_set_action_long_press(DK_BTN1, handler, BUTTON_EVENT_FACTORY_RESET);
+	button_set_action_short_press(DK_BTN2, handler, BUTTON_EVENT_GET_DEVICE_PROFILE);
+	button_set_action_long_press(DK_BTN2, handler, BUTTON_EVENT_SET_DEVICE_PROFILE);
+	button_set_action(DK_BTN3, handler, BUTTON_EVENT_SEND_HELLO);
+#if defined(CONFIG_SIDEWALK_DFU_SERVICE_BLE)
+	button_set_action_long_press(DK_BTN4, handler, BUTTON_EVENT_NORDIC_DFU);
+#endif
+
+	return buttons_init() ? SID_ERROR_GENERIC : SID_ERROR_NONE;
+}
+
+static void app_setup(void)
+{
+	if (app_buttons_init(button_handler)) {
+		LOG_ERR("Failed to initialze buttons.");
+		SID_PAL_ASSERT(false);
+	}
+
+	if (dk_leds_init()) {
+		LOG_ERR("Failed to initialze LEDs.");
+		SID_PAL_ASSERT(false);
+	}
+#if defined(CONFIG_GPIO)
+	state_watch_init_gpio(&global_state_notifier);
+#endif
+#if defined(CONFIG_LOG)
+	state_watch_init_log(&global_state_notifier);
+#endif
+
+	if (sidewalk_callbacks_set(&app_context, &app_context.event_callbacks)) {
+		LOG_ERR("Failed to set sidewalk callbacks");
+		SID_PAL_ASSERT(false);
+	}
+
+	app_context.config = (struct sid_config){
+		.link_mask = BUILT_IN_LM,
+		.time_sync_periodicity_seconds = 7200,
+		.callbacks = &app_context.event_callbacks,
+		.link_config = app_get_ble_config(),
+		.sub_ghz_link_config = app_get_sub_ghz_config(),
+	};
+
+#if defined(CONFIG_BOOTLOADER_MCUBOOT)
+	if (!boot_is_img_confirmed()) {
+		int ret = boot_write_img_confirmed();
+
+		if (ret) {
+			LOG_ERR("Couldn't confirm image: %d", ret);
+		} else {
+			LOG_INF("Marked image as OK");
+		}
+	}
+#endif
+
+#if defined(CONFIG_NORDIC_QSPI_NOR)
+	const struct device *const qspi_dev = DEVICE_DT_GET(EXTERNAL_FLASH);
+
+	if (device_is_ready(qspi_dev)) {
+		pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_SUSPEND);
+	}
+#endif
+
+	app_context.auto_scan_interval = DEFAULT_AUTO_SCAN_INTERVAL;
+	app_context.frag.mtu = 0;
+}
+
+int main(void)
+{
+	PRINT_SIDEWALK_VERSION();
+
+	switch (application_to_start()) {
+	case SIDEWALK_APPLICATION: {
+		app_setup();
+		if (app_thread_init(&app_context)) {
+			LOG_ERR("Failed to start Sidewalk thread");
+		}
+		break;
+	};
+#if defined(CONFIG_SIDEWALK_DFU_SERVICE_BLE)
+	case DFU_APPLICATION: {
+		const int ret = nordic_dfu_ble_start();
+		LOG_INF("DFU service started, return value %d", ret);
+		break;
+	}
+#endif
+	default:
+		LOG_ERR("Unknown application to start.");
+	}
+
+	return 0;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/sidewalk_callbacks.c gitlab_sidewalk/samples/gnss_lr1110/src/sidewalk_callbacks.c
--- sidewalk/samples/gnss_lr1110/src/sidewalk_callbacks.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/sidewalk_callbacks.c	2023-11-07 14:24:52.639088482 -0800
@@ -0,0 +1,163 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_hal_reset_ifc.h>
+
+#include <state_notifier.h>
+#if defined(CONFIG_SIDEWALK_CLI)
+#include <sid_shell.h>
+#endif
+
+#include <application_thread.h>
+
+#include <zephyr/logging/log.h>
+
+LOG_MODULE_REGISTER(callbacks, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static const uint8_t *status_name[] = { "ready", "not ready", "Error", "secure channel ready" };
+
+static const uint8_t *link_mode_idx_name[] = { "ble", "fsk", "lora" };
+
+#include <json_printer.h>
+#include <sidTypes2Json.h>
+
+#undef JSON_RAW_PRINT
+#define JSON_RAW_PRINT(format, ...) LOG_RAW(format __VA_OPT__(, ) __VA_ARGS__)
+
+static void on_sidewalk_event(bool in_isr, void *context)
+{
+	LOG_DBG("on event, from %s, context %p", in_isr ? "ISR" : "App", context);
+	app_event_send(SIDEWALK_EVENT);
+}
+
+static void on_sidewalk_msg_received(const struct sid_msg_desc *msg_desc, const struct sid_msg *msg,
+				     void *context)
+{
+#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_message_received(msg_desc->id);
+#endif
+	application_state_receiving(&global_state_notifier, true);
+	application_state_receiving(&global_state_notifier, false);
+	LOG_DBG("received message(type: %d, link_mode: %d, id: %u size %u)", (int)msg_desc->type,
+		(int)msg_desc->link_mode, msg_desc->id, msg->size);
+	LOG_HEXDUMP_INF((uint8_t *)msg->data, msg->size, "Message data: ");
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_msg_received", JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 1))))));
+}
+
+static void on_sidewalk_msg_sent(const struct sid_msg_desc *msg_desc, void *context)
+{
+	application_state_sending(&global_state_notifier, false);
+#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_message_send();
+#endif
+	LOG_INF("sent message(type: %d, id: %u)", (int)msg_desc->type, msg_desc->id);
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_msg_sent", JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0))))));
+
+	fragment_msg_sent(context);
+}
+
+static void on_sidewalk_send_error(sid_error_t error, const struct sid_msg_desc *msg_desc,
+				   void *context)
+{
+	application_state_sending(&global_state_notifier, false);
+#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_message_not_send();
+#endif
+	LOG_ERR("failed to send message(type: %d, id: %u), err:%d", (int)msg_desc->type,
+		msg_desc->id, (int)error);
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_send_error",
+		JSON_OBJ(JSON_LIST_2(JSON_VAL_sid_error_t("error", error),
+				     JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0)))))));
+
+	fragment_send_error(context);
+}
+
+static void on_sidewalk_status_changed(const struct sid_status *status, void *context)
+{
+	LOG_INF("status changed: %s", status_name[status->state]);
+
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+
+#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_sid_status(status);
+#endif
+	switch (status->state) {
+	case SID_STATE_READY:
+		application_state_connected(&global_state_notifier, true);
+		sid_error_t err = sid_get_mtu(app_ctx->handle, status->detail.link_status_mask, &app_ctx->frag.mtu);
+		if (err != SID_ERROR_NONE) {
+			LOG_ERR("%d = sid_get_mtu()", err);
+		} else {
+			LOG_INF("mtu %u, scan interval %u", app_ctx->frag.mtu, app_ctx->auto_scan_interval);
+		}
+		gnss_scan_timer_set(app_ctx->auto_scan_interval);
+		break;
+	case SID_STATE_NOT_READY:
+		application_state_connected(&global_state_notifier, false);
+		gnss_scan_timer_set(0);
+		break;
+	case SID_STATE_ERROR:
+		LOG_ERR("Sidewalk error: %d", (int)sid_get_error(app_ctx->handle));
+		break;
+	case SID_STATE_SECURE_CHANNEL_READY:
+		break;
+	}
+
+	application_state_registered(&global_state_notifier,
+				     status->detail.registration_status == SID_STATUS_REGISTERED);
+	application_state_time_sync(&global_state_notifier,
+				    status->detail.time_sync_status == SID_STATUS_TIME_SYNCED);
+	application_state_link(&global_state_notifier, !!(status->detail.link_status_mask));
+
+	LOG_INF("Device %sregistered, Time Sync %s, Link status: {BLE: %s, FSK: %s, LoRa: %s}",
+		(SID_STATUS_REGISTERED == status->detail.registration_status) ? "Is " : "Un",
+		(SID_STATUS_TIME_SYNCED == status->detail.time_sync_status) ? "Success" : "Fail",
+		(status->detail.link_status_mask & SID_LINK_TYPE_1) ? "Up" : "Down",
+		(status->detail.link_status_mask & SID_LINK_TYPE_2) ? "Up" : "Down",
+		(status->detail.link_status_mask & SID_LINK_TYPE_3) ? "Up" : "Down");
+
+	for (int i = 0; i < SID_LINK_TYPE_MAX_IDX; i++) {
+		enum sid_link_mode mode =
+			(enum sid_link_mode)status->detail.supported_link_modes[i];
+
+		if (mode) {
+			LOG_INF("Link mode on %s = {Cloud: %s, Mobile: %s}", link_mode_idx_name[i],
+				(mode & SID_LINK_MODE_CLOUD) ? "True" : "False",
+				(mode & SID_LINK_MODE_MOBILE) ? "True" : "False");
+		}
+	}
+}
+
+static void on_sidewalk_factory_reset(void *context)
+{
+	ARG_UNUSED(context);
+
+	LOG_INF("factory reset notification received from sid api");
+	if (sid_hal_reset(SID_HAL_RESET_NORMAL)) {
+		LOG_WRN("Reboot type not supported");
+	}
+}
+
+sid_error_t sidewalk_callbacks_set(void *context, struct sid_event_callbacks *callbacks)
+{
+	if (!callbacks) {
+		return SID_ERROR_INVALID_ARGS;
+	}
+	callbacks->context = context;
+	callbacks->on_event = on_sidewalk_event;
+	callbacks->on_msg_received = on_sidewalk_msg_received; /* Called from sid_process() */
+	callbacks->on_msg_sent = on_sidewalk_msg_sent; /* Called from sid_process() */
+	callbacks->on_send_error = on_sidewalk_send_error; /* Called from sid_process() */
+	callbacks->on_status_changed = on_sidewalk_status_changed; /* Called from sid_process() */
+	callbacks->on_factory_reset = on_sidewalk_factory_reset; /* Called from sid_process() */
+
+	return SID_ERROR_NONE;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/src/wifi.c gitlab_sidewalk/samples/gnss_lr1110/src/wifi.c
--- sidewalk/samples/gnss_lr1110/src/wifi.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/src/wifi.c	2023-11-01 08:09:54.867151757 -0700
@@ -0,0 +1,6 @@
+
+#if defined(CONFIG_LR1110_CLI)
+#include <halo_lr11xx_radio.h>
+wifi_configuration_scan_t wifi_configuration = { 0 };
+void app_event_wifi_scan() { }
+#endif /* CONFIG_LR1110_CLI */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/gnss_lr1110/version.conf gitlab_sidewalk/samples/gnss_lr1110/version.conf
--- sidewalk/samples/gnss_lr1110/version.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/gnss_lr1110/version.conf	2023-11-09 10:38:18.779395271 -0800
@@ -0,0 +1 @@
+CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION="0.0.0+0"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/sid_dut/src/sid_thread.c gitlab_sidewalk/samples/sid_dut/src/sid_thread.c
--- sidewalk/samples/sid_dut/src/sid_thread.c	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/samples/sid_dut/src/sid_thread.c	2023-11-01 08:09:54.871151834 -0700
@@ -5,7 +5,9 @@
  */
 
 #include "sid_error.h"
+#include "zephyr/sys/printk.h"
 #include <stdbool.h>
+#include <stdio.h>
 #include <zephyr/kernel.h>
 #include <zephyr/logging/log.h>
 #include <zephyr/storage/flash_map.h>
@@ -20,7 +22,6 @@
 #include <sid_pal_storage_kv_ifc.h>
 #include <sid_pal_crypto_ifc.h>
 #include <app_ble_config.h>
-#include <json_printer.h>
 
 #if defined(CONFIG_SIDEWALK_SUBGHZ)
 #include <app_subGHz_config.h>
@@ -31,6 +32,10 @@
 #include <sid_pal_serial_bus_spi_config.h>
 #endif
 
+#include <zephyr/shell/shell.h>
+#include <json_printer.h>
+#include <sidTypes2Json.h>
+
 #if !FIXED_PARTITION_EXISTS(mfg_storage)
 #error "Flash partition is not defined for the Sidewalk manufacturing storage!!"
 #endif
@@ -94,61 +99,14 @@
 	k_work_submit_to_queue(&sidewalk_dut_work_q, &ctx->sidewalk_event_work);
 }
 
-#define sid_msg_type_str(val)                                                                      \
-	((char *[]){ "SID_MSG_TYPE_GET", "SID_MSG_TYPE_SET", "SID_MSG_TYPE_NOTIFY",                \
-		     "SID_MSG_TYPE_RESPONSE" }[(val)])
-#define sid_link_mode_str(val)                                                                     \
-	(val) == SID_LINK_MODE_CLOUD  ? "SID_LINK_MODE_CLOUD" :                                    \
-	(val) == SID_LINK_MODE_MOBILE ? "SID_LINK_MODE_MOBILE" :                                   \
-					"SID_LINK_MODE_INVALID"
-
-void sid_msg_desc_to_JSON(const struct shell *shell, const char *caller,
-			  const struct sid_msg_desc *msg_desc)
-{
-	// clang-format off
-	JSON_DICT(caller, true,	{
-		JSON_VAL_DICT("sid_msg_desc", 
-		{
-			JSON_VAL("link_type", msg_desc->link_type, JSON_NEXT); 
-			JSON_VAL("type", msg_desc->type, JSON_NEXT); 
-			JSON_VAL_STR("type_str", sid_msg_type_str(msg_desc->type), JSON_NEXT); 
-			JSON_VAL("link_mode", msg_desc->link_mode, JSON_NEXT); 
-			JSON_VAL_STR("link_mode_str", (sid_link_mode_str(msg_desc->link_mode)), JSON_NEXT); 
-			JSON_VAL("id", msg_desc->id, JSON_NEXT); 
-			JSON_VAL_DICT("msg_desc_attr", 
-			{ 
-				JSON_VAL_DICT("rx_attr", 
-				{
-					JSON_VAL_STR("is_msg_ack", msg_desc->msg_desc_attr.rx_attr.is_msg_ack? "true": "false", JSON_NEXT); 
-					JSON_VAL_STR("is_msg_duplicate", msg_desc->msg_desc_attr.rx_attr.is_msg_duplicate? "true": "false", JSON_NEXT);
-					JSON_VAL_STR("ack_requested", msg_desc->msg_desc_attr.rx_attr.ack_requested? "true": "false", JSON_NEXT); 
-					JSON_VAL("rssi", msg_desc->msg_desc_attr.rx_attr.rssi, JSON_NEXT); 
-					JSON_VAL("snr", msg_desc->msg_desc_attr.rx_attr.snr, JSON_LAST); 
-				} 
-				, JSON_NEXT); 
-				JSON_VAL_DICT("tx_attr", 
-				{
-					JSON_VAL_STR("request_ack", msg_desc->msg_desc_attr.tx_attr.request_ack? "True": "False", JSON_NEXT); 
-					JSON_VAL("num_retries", msg_desc->msg_desc_attr.tx_attr.num_retries, JSON_NEXT); 
-					JSON_VAL("ttl_in_seconds", msg_desc->msg_desc_attr.tx_attr.ttl_in_seconds, JSON_LAST); 
-				}
-				, JSON_LAST);
-			}
-			, JSON_LAST);
-		}
-		, JSON_LAST);
-	});
-	// clang-format on
-}
-
 static void on_sidewalk_msg_received(const struct sid_msg_desc *msg_desc, const struct sid_msg *msg,
 				     void *context)
 {
 	struct app_context *ctx = (struct app_context *)context;
-	if (ctx->shell) {
-		sid_msg_desc_to_JSON(ctx->shell, "on_msg_received", msg_desc);
-	}
-
+	shell_fprintf(ctx->shell, SHELL_NORMAL,
+		      JSON_NEW_LINE(JSON_OBJ(
+			      JSON_NAME("on_msg_received",
+					JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 1)))));
 	LOG_DBG("Sidewalk -> App");
 	LOG_HEXDUMP_INF(msg->data, msg->size, "");
 }
@@ -156,10 +114,10 @@
 static void on_sidewalk_msg_sent(const struct sid_msg_desc *msg_desc, void *context)
 {
 	struct app_context *ctx = (struct app_context *)context;
-	if (ctx->shell) {
-		sid_msg_desc_to_JSON(ctx->shell, "on_msg_sent", msg_desc);
-	}
-
+	shell_fprintf(ctx->shell, SHELL_NORMAL,
+		      JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+			      "on_msg_sent",
+			      JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0))))));
 	LOG_DBG("Sidewalk -> App");
 }
 
@@ -167,10 +125,12 @@
 				   void *context)
 {
 	struct app_context *ctx = (struct app_context *)context;
-	if (ctx->shell) {
-		sid_msg_desc_to_JSON(ctx->shell, "on_send_error", msg_desc);
-	}
-
+	shell_fprintf(ctx->shell, SHELL_NORMAL,
+		      JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+			      "on_send_error",
+			      JSON_OBJ(JSON_LIST_2(JSON_VAL_sid_error_t("error", error),
+						   JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc,
+									 0)))))));
 	LOG_DBG("Sidewalk -> App: error %d", error);
 }
 
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/SWTL001/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/SWTL001/boards/nrf52840dk_nrf52840.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/boards/nrf52840dk_nrf52840.overlay	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+&spi3 {
+	status = "disabled";
+};
+
+sid_semtech: &spi2 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi2_default>;
+	pinctrl-1 = <&spi2_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+&spi2_default {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+	};
+};
+
+&spi2_sleep {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+		low-power-enable;
+	};
+};
+
+/ {
+	semtech_sx1262_gpios{
+ 		compatible = "gpio-keys";
+		semtech_sx1262_cs: cs {
+			gpios = <&gpio1 0x8 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 CS";
+		};
+ 		semtech_sx1262_reset_gpios: reset {
+			gpios = <&gpio0 0x3 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 Reset";
+		};
+		semtech_sx1262_busy_gpios: busy {
+			gpios = <&gpio1 0x4 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Busy";
+		};
+		semtech_sx1262_antenna_enable_gpios: antena_enable {
+			gpios = <&gpio1 0xa GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Antena Enable";
+		};
+		semtech_sx1262_dio1_gpios: dio1 {
+			gpios = <&gpio1 0x6 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 DIO1";
+		};
+		radio_led_tx: led_tx {
+			gpios = <&gpio0 0x1e GPIO_ACTIVE_HIGH>;
+			label = "red tx LED";
+		};
+		radio_led_rx: led_rx {
+			gpios = <&gpio0 0x1f GPIO_ACTIVE_HIGH>;
+			label = "green rx LED";
+		};
+        radio_dbgH: out_dbgH {
+            gpios = <&gpio0 0x0 GPIO_ACTIVE_HIGH>; // OK  XL1
+            label = "debug H pin";
+        };
+ 	};
+
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.conf gitlab_sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.conf
--- sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,19 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Configure QSPI for external flash
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
+
+CONFIG_DFU_MULTI_IMAGE=y
+CONFIG_NRF53_ENFORCE_IMAGE_VERSION_EQUALITY=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.overlay gitlab_sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.overlay
--- sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp.overlay	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <zephyr/dt-bindings/ipc_service/static_vrings.h>
+
+&ipc0 {
+    zephyr,priority = <0 PRIO_COOP>;
+};
+
+ sid_semtech: &spi4 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi4_default>;
+	pinctrl-1 = <&spi4_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+/{
+	semtech_sx1262_gpios{
+		compatible = "gpio-keys";
+	   semtech_sx1262_cs: cs {
+		   gpios = <&gpio1 0x9 GPIO_ACTIVE_LOW>;
+		   label = "semtech_sx1262 CS";
+	   };
+		semtech_sx1262_reset_gpios: reset {
+		   gpios = <&gpio0 0x4 GPIO_ACTIVE_LOW>;
+		   label = "semtech_sx1262 Reset";
+	   };
+	   semtech_sx1262_busy_gpios: busy {
+		   gpios = <&gpio1 0x5 GPIO_ACTIVE_HIGH>;
+		   label = "semtech_sx1262 Busy";
+	   };
+	   semtech_sx1262_antenna_enable_gpios: antena_enable {
+		   gpios = <&gpio1 0xa GPIO_ACTIVE_HIGH>;
+		   label = "semtech_sx1262 Antena Enable";
+	   };
+	   semtech_sx1262_dio1_gpios: dio1 {
+		   gpios = <&gpio1 0x7 GPIO_ACTIVE_HIGH>;
+		   label = "semtech_sx1262 DIO1";
+	   };
+	};
+
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
+
+/* Disable unused peripherals to reduce power consumption */
+&adc {
+	status = "disabled";
+};
+&i2c1 {
+	status = "disabled";
+};
+&pwm0 {
+	status = "disabled";
+};
+&spi2 {
+	status = "disabled";
+};
+&usbd {
+	status = "disabled";
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp_release.conf gitlab_sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp_release.conf
--- sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/boards/nrf5340dk_nrf5340_cpuapp_release.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,19 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Configure QSPI for external flash
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
+
+CONFIG_DFU_MULTI_IMAGE=y
+CONFIG_NRF53_ENFORCE_IMAGE_VERSION_EQUALITY=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/hci_rpmsg/Kconfig.root gitlab_sidewalk/samples/SWTL001/child_image/hci_rpmsg/Kconfig.root
--- sidewalk/samples/SWTL001/child_image/hci_rpmsg/Kconfig.root	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/hci_rpmsg/Kconfig.root	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# The purpose of this file is to create a wrapper Kconfig file that will be set as
+# hci_rpmsg_KCONFIG_ROOT and processed before any other Kconfig for hci_rpmsg child image.
+
+rsource "../../../common/Kconfig.hci_rpmsg.defaults"
+source "Kconfig.zephyr"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj.conf gitlab_sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj.conf
--- sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,8 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_LOG=y
+CONFIG_SERIAL=y
+CONFIG_RESET_ON_FATAL_ERROR=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj_release.conf gitlab_sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj_release.conf
--- sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/hci_rpmsg/prj_release.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,9 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_LOG=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_RESET_ON_FATAL_ERROR=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+/ {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay
--- sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+/ {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf
--- sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,33 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Increase main stack size
+CONFIG_MAIN_STACK_SIZE=10240
+
+# Configure MCUboot features
+CONFIG_NRF53_MULTI_IMAGE_UPDATE=y
+CONFIG_BOOT_UPGRADE_ONLY=y
+CONFIG_BOOT_MAX_IMG_SECTORS=256
+CONFIG_MCUBOOT_DOWNGRADE_PREVENTION=y
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Enable flash simulator
+CONFIG_PCD_APP=y
+CONFIG_FLASH_SIMULATOR=y
+CONFIG_FLASH_SIMULATOR_DOUBLE_WRITES=y
+CONFIG_FLASH_SIMULATOR_STATS=n
+
+# Configure QSPI for external flash
+CONFIG_FLASH=y
+CONFIG_FPROTECT=y
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay
--- sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp.overlay	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+ / {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf
--- sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,33 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Increase main stack size
+CONFIG_MAIN_STACK_SIZE=10240
+
+# Configure MCUboot features
+CONFIG_NRF53_MULTI_IMAGE_UPDATE=y
+CONFIG_BOOT_UPGRADE_ONLY=y
+CONFIG_BOOT_MAX_IMG_SECTORS=256
+CONFIG_MCUBOOT_DOWNGRADE_PREVENTION=y
+
+# Allow for storing two images in MCUboot partitions
+CONFIG_UPDATEABLE_IMAGE_NUMBER=2
+
+# Store new images inside external flash
+CONFIG_PM_EXTERNAL_FLASH_MCUBOOT_SECONDARY=y
+
+# Enable flash simulator
+CONFIG_PCD_APP=y
+CONFIG_FLASH_SIMULATOR=y
+CONFIG_FLASH_SIMULATOR_DOUBLE_WRITES=y
+CONFIG_FLASH_SIMULATOR_STATS=n
+
+# Configure QSPI for external flash
+CONFIG_FLASH=y
+CONFIG_FPROTECT=y
+CONFIG_NORDIC_QSPI_NOR=y
+CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE=4096
+CONFIG_NORDIC_QSPI_NOR_STACK_WRITE_BUFFER_SIZE=16
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay
--- sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/boards/nrf5340dk_nrf5340_cpuapp_release.overlay	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+ / {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/Kconfig.root gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/Kconfig.root
--- sidewalk/samples/SWTL001/child_image/mcuboot/Kconfig.root	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/Kconfig.root	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# The purpose of this file is to create a wrapper Kconfig file that will be set as
+# mcuboot_KCONFIG_ROOT and processed before any other Kconfig for mcuboot child image.
+
+source "${ZEPHYR_BASE}/../sidewalk/samples/common/Kconfig.mcuboot.external_flash.defaults"
+source "${ZEPHYR_BASE}/../bootloader/mcuboot/boot/zephyr/Kconfig"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/prj.conf gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/prj.conf
--- sidewalk/samples/SWTL001/child_image/mcuboot/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/prj.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,18 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_MBEDTLS_CFG_FILE="mcuboot-mbedtls-cfg.h"
+
+# Bootloader size optimization
+# Disable not used modules that cannot be set in Kconfig.mcuboot.defaults due to overriding
+# in board files.
+CONFIG_BOOT_UPGRADE_ONLY=n
+CONFIG_CONSOLE=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_USE_SEGGER_RTT=n
+CONFIG_GPIO=n
+CONFIG_NO_RUNTIME_CHECKS=y
+CONFIG_SIZE_OPTIMIZATIONS=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/child_image/mcuboot/prj_release.conf gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/prj_release.conf
--- sidewalk/samples/SWTL001/child_image/mcuboot/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/child_image/mcuboot/prj_release.conf	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,18 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_MBEDTLS_CFG_FILE="mcuboot-mbedtls-cfg.h"
+
+# Bootloader size optimization
+# Disable not used modules that cannot be set in Kconfig.mcuboot.defaults due to overriding
+# in board files.
+CONFIG_BOOT_UPGRADE_ONLY=n
+CONFIG_CONSOLE=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_USE_SEGGER_RTT=n
+CONFIG_GPIO=n
+CONFIG_NO_RUNTIME_CHECKS=y
+CONFIG_SIZE_OPTIMIZATIONS=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/cli.conf gitlab_sidewalk/samples/SWTL001/cli.conf
--- sidewalk/samples/SWTL001/cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/cli.conf	2023-11-06 18:37:15.918918564 -0800
@@ -0,0 +1 @@
+CONFIG_SIDEWALK_CLI=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/CMakeLists.txt gitlab_sidewalk/samples/SWTL001/CMakeLists.txt
--- sidewalk/samples/SWTL001/CMakeLists.txt	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/CMakeLists.txt	2023-11-06 18:37:24.455099882 -0800
@@ -0,0 +1,17 @@
+cmake_minimum_required(VERSION 3.20.0)
+
+include(../common/bootloader_version.cmake)
+
+set(mcuboot_KCONFIG_ROOT $ENV{ZEPHYR_BASE}/../sidewalk/samples/template_subghz/child_image/mcuboot/Kconfig.root)
+set(hci_rpmsg_KCONFIG_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/child_image/hci_rpmsg/Kconfig.root)
+
+find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
+project(sidewalk_template_subghz)
+
+zephyr_include_directories(include)
+
+target_sources(app PRIVATE
+  src/main.c
+  src/application_thread.c
+  src/lr11xx_firmware_update.c
+)
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/fsk_cli.conf gitlab_sidewalk/samples/SWTL001/fsk_cli.conf
--- sidewalk/samples/SWTL001/fsk_cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/fsk_cli.conf	2023-11-06 18:37:35.287329974 -0800
@@ -0,0 +1,8 @@
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
+CONFIG_SIDEWALK_CLI=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/fsk.conf gitlab_sidewalk/samples/SWTL001/fsk.conf
--- sidewalk/samples/SWTL001/fsk.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/fsk.conf	2023-11-06 18:37:43.003493880 -0800
@@ -0,0 +1,7 @@
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/include/application_thread.h gitlab_sidewalk/samples/SWTL001/include/application_thread.h
--- sidewalk/samples/SWTL001/include/application_thread.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/include/application_thread.h	2023-11-06 18:35:36.840814275 -0800
@@ -0,0 +1,33 @@
+#ifndef APPLICATION_THREAD_H
+#define APPLICATION_THREAD_H
+
+#include <sid_api.h>
+
+typedef struct application_context {
+	struct sid_event_callbacks event_callbacks;
+	struct sid_config config;
+	struct sid_handle *handle;
+	bool connection_request;
+} app_ctx_t;
+
+typedef enum application_events {
+	SIDEWALK_EVENT,
+} app_event_t;
+
+/**
+ * @brief Send Event to application thread
+ *
+ * @param event event to send
+ */
+void app_event_send(app_event_t event);
+
+/**
+ * @brief Initialize and start application thread
+ *
+ * @param ctx application context
+ *
+ * @return SID_ERROR_NULL_POINTER in case of invalid ctx
+ */
+sid_error_t app_thread_init(app_ctx_t *ctx);
+
+#endif /* APPLICATION_THREAD_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/include/lr11xx_firmware_update.h gitlab_sidewalk/samples/SWTL001/include/lr11xx_firmware_update.h
--- sidewalk/samples/SWTL001/include/lr11xx_firmware_update.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/include/lr11xx_firmware_update.h	2023-11-06 16:08:53.141520216 -0800
@@ -0,0 +1,93 @@
+/*!
+ * @file      lr11xx_firmware_update.h
+ *
+ * @brief     LR11XX firmware update definition
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2021. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef LR11XX_FIRMWARE_UPDATE_H
+#define LR11XX_FIRMWARE_UPDATE_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- DEPENDENCIES ------------------------------------------------------------
+ */
+
+#include <stdint.h>
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC MACROS -----------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC CONSTANTS --------------------------------------------------------
+ */
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC TYPES ------------------------------------------------------------
+ */
+
+typedef enum
+{
+    LR1110_FIRMWARE_UPDATE_TO_TRX,
+    LR1110_FIRMWARE_UPDATE_TO_MODEM,
+    LR1120_FIRMWARE_UPDATE_TO_TRX,
+    LR1121_FIRMWARE_UPDATE_TO_TRX,
+} lr11xx_fw_update_t;
+
+typedef enum
+{
+    LR11XX_FW_UPDATE_OK              = 0,
+    LR11XX_FW_UPDATE_WRONG_CHIP_TYPE = 1,
+    LR11XX_FW_UPDATE_ERROR           = 2,
+} lr11xx_fw_update_status_t;
+
+/*
+ * -----------------------------------------------------------------------------
+ * --- PUBLIC FUNCTIONS PROTOTYPES ---------------------------------------------
+ */
+
+lr11xx_fw_update_status_t lr11xx_update_firmware( /*void* radio,*/ lr11xx_fw_update_t fw_update_direction,
+                                                  uint32_t fw_expected, const uint32_t* buffer, uint32_t length );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif  // LR11XX_FIRMWARE_UPDATE_H
+
+/* --- EOF ------------------------------------------------------------------ */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/Kconfig gitlab_sidewalk/samples/SWTL001/Kconfig
--- sidewalk/samples/SWTL001/Kconfig	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/Kconfig	2023-11-06 18:37:06.854726035 -0800
@@ -0,0 +1,3 @@
+source "${ZEPHYR_BASE}/../sidewalk/samples/common/Kconfig.defconfig"
+
+source "Kconfig.zephyr"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840_release.yml gitlab_sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840_release.yml
--- sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840_release.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840_release.yml	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,81 @@
+app:
+  address: 0x7200
+  end_address: 0xf7000
+  region: flash_primary
+  size: 0xefe00
+external_flash:
+  address: 0xf0000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x710000
+mcuboot:
+  address: 0x0
+  end_address: 0x7000
+  placement:
+    before:
+    - mcuboot_primary
+  region: flash_primary
+  size: 0x7000
+mcuboot_pad:
+  address: 0x7000
+  end_address: 0x7200
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x7000
+  end_address: 0xf7000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xf0000
+  span: *id001
+mcuboot_primary_app:
+  address: 0x7200
+  end_address: 0xf7000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xefe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xf0000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xf0000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+settings_storage:
+  address: 0xf7000
+  end_address: 0xf9000
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20000000
+  end_address: 0x20040000
+  region: sram_primary
+  size: 0x40000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840.yml gitlab_sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840.yml
--- sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/pm_static_nrf52840dk_nrf52840.yml	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,81 @@
+app:
+  address: 0x7200
+  end_address: 0xf7000
+  region: flash_primary
+  size: 0xefe00
+external_flash:
+  address: 0xf0000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x710000
+mcuboot:
+  address: 0x0
+  end_address: 0x7000
+  placement:
+    before:
+    - mcuboot_primary
+  region: flash_primary
+  size: 0x7000
+mcuboot_pad:
+  address: 0x7000
+  end_address: 0x7200
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x7000
+  end_address: 0xf7000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xf0000
+  span: *id001
+mcuboot_primary_app:
+  address: 0x7200
+  end_address: 0xf7000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xefe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xf0000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xf0000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+settings_storage:
+  address: 0xf7000
+  end_address: 0xf9000
+  placement:
+    align:
+      start: 0x1000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20000000
+  end_address: 0x20040000
+  region: sram_primary
+  size: 0x40000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml gitlab_sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml
--- sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp_release.yml	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,124 @@
+EMPTY_0:
+  address: 0xf6000
+  end_address: 0xf9000
+  placement:
+    after:
+    - settings_storage
+  region: flash_primary
+  size: 0x3000
+app:
+  address: 0x8200
+  end_address: 0xf4000
+  region: flash_primary
+  size: 0xebe00
+external_flash:
+  address: 0x12c000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x6d4000
+mcuboot:
+  address: 0x0
+  end_address: 0x8000
+  region: flash_primary
+  size: 0x8000
+mcuboot_pad:
+  address: 0x8000
+  end_address: 0x8200
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x8000
+  end_address: 0xf4000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xec000
+  span: *id001
+mcuboot_primary_1:
+  address: 0x0
+  device: nordic_ram_flash_controller
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x40000
+mcuboot_primary_app:
+  address: 0x8200
+  end_address: 0xf4000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xebe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xec000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xec000
+mcuboot_secondary_1:
+  address: 0xec000
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0x12c000
+  region: external_flash
+  size: 0x40000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+otp:
+  address: 0xff8100
+  end_address: 0xff83fc
+  region: otp
+  size: 0x2fc
+pcd_sram:
+  address: 0x20000000
+  end_address: 0x20002000
+  placement:
+    after:
+    - start
+  region: sram_primary
+  size: 0x2000
+ram_flash:
+  address: 0x40000
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x0
+rpmsg_nrf53_sram:
+  address: 0x20070000
+  end_address: 0x20080000
+  placement:
+    before:
+    - end
+  region: sram_primary
+  size: 0x10000
+settings_storage:
+  address: 0xf4000
+  end_address: 0xf6000
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20002000
+  end_address: 0x20070000
+  region: sram_primary
+  size: 0x6e000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp.yml gitlab_sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp.yml
--- sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/pm_static_nrf5340dk_nrf5340_cpuapp.yml	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,124 @@
+EMPTY_0:
+  address: 0xf6000
+  end_address: 0xf9000
+  placement:
+    after:
+    - settings_storage
+  region: flash_primary
+  size: 0x3000
+app:
+  address: 0x8200
+  end_address: 0xf4000
+  region: flash_primary
+  size: 0xebe00
+external_flash:
+  address: 0x12c000
+  end_address: 0x800000
+  region: external_flash
+  size: 0x6d4000
+mcuboot:
+  address: 0x0
+  end_address: 0x8000
+  region: flash_primary
+  size: 0x8000
+mcuboot_pad:
+  address: 0x8000
+  end_address: 0x8200
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - mcuboot_primary_app
+  region: flash_primary
+  size: 0x200
+mcuboot_primary:
+  address: 0x8000
+  end_address: 0xf4000
+  orig_span: &id001
+  - mcuboot_pad
+  - app
+  region: flash_primary
+  size: 0xec000
+  span: *id001
+mcuboot_primary_1:
+  address: 0x0
+  device: nordic_ram_flash_controller
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x40000
+mcuboot_primary_app:
+  address: 0x8200
+  end_address: 0xf4000
+  orig_span: &id002
+  - app
+  region: flash_primary
+  size: 0xebe00
+  span: *id002
+mcuboot_secondary:
+  address: 0x0
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0xec000
+  placement:
+    align:
+      start: 0x4
+  region: external_flash
+  share_size:
+  - mcuboot_primary
+  size: 0xec000
+mcuboot_secondary_1:
+  address: 0xec000
+  device: DT_CHOSEN(nordic_pm_ext_flash)
+  end_address: 0x12c000
+  region: external_flash
+  size: 0x40000
+mfg_storage:
+  address: 0xff000
+  end_address: 0x100000
+  region: flash_primary
+  size: 0x1000
+otp:
+  address: 0xff8100
+  end_address: 0xff83fc
+  region: otp
+  size: 0x2fc
+pcd_sram:
+  address: 0x20000000
+  end_address: 0x20002000
+  placement:
+    after:
+    - start
+  region: sram_primary
+  size: 0x2000
+ram_flash:
+  address: 0x40000
+  end_address: 0x40000
+  region: ram_flash
+  size: 0x0
+rpmsg_nrf53_sram:
+  address: 0x20070000
+  end_address: 0x20080000
+  placement:
+    before:
+    - end
+  region: sram_primary
+  size: 0x10000
+settings_storage:
+  address: 0xf4000
+  end_address: 0xf6000
+  placement:
+    align:
+      start: 0x4000
+    before:
+    - end
+  region: flash_primary
+  size: 0x2000
+sidewalk_storage:
+  address: 0xf9000
+  end_address: 0xff000
+  region: flash_primary
+  size: 0x6000
+sram_primary:
+  address: 0x20002000
+  end_address: 0x20070000
+  region: sram_primary
+  size: 0x6e000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/pm_static.yml gitlab_sidewalk/samples/SWTL001/pm_static.yml
--- sidewalk/samples/SWTL001/pm_static.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/pm_static.yml	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,9 @@
+sidewalk_storage:
+  address: 0xf9000
+  region: flash_primary
+  size: 0x6000
+
+mfg_storage:
+  address: 0xff000
+  region: flash_primary
+  size: 0x1000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/prj.conf gitlab_sidewalk/samples/SWTL001/prj.conf
--- sidewalk/samples/SWTL001/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/prj.conf	2023-11-06 18:36:33.342014232 -0800
@@ -0,0 +1,21 @@
+# Sidewalk
+CONFIG_SIDEWALK=y
+CONFIG_SIDEWALK_LINK_MASK_LORA=y
+
+# Logs
+CONFIG_SIDEWALK_LOG_LEVEL_INF=y
+CONFIG_NVS_LOG_LEVEL_WRN=y
+CONFIG_LOG_PRINTK=y
+
+# Buttons and LEDs
+CONFIG_GPIO=y
+CONFIG_DK_LIBRARY=y
+
+# Bluetooth
+CONFIG_BT_DEVICE_NAME="swtl001"
+
+# Debug
+CONFIG_RESET_ON_FATAL_ERROR=n
+
+# Power Management
+CONFIG_PM_DEVICE=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/prj_release.conf gitlab_sidewalk/samples/SWTL001/prj_release.conf
--- sidewalk/samples/SWTL001/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/prj_release.conf	2023-11-06 18:36:55.762490433 -0800
@@ -0,0 +1,25 @@
+# Sidewalk
+CONFIG_SIDEWALK=y
+CONFIG_SIDEWALK_LINK_MASK_LORA=y
+
+# Buttons and LEDs
+CONFIG_GPIO=y
+CONFIG_DK_LIBRARY=y
+
+# Bluetooth
+CONFIG_BT_DEVICE_NAME="swtl001"
+
+# Disable peripherals
+CONFIG_LOG=n
+CONFIG_SERIAL=n
+CONFIG_SHELL=n
+CONFIG_CONSOLE=n
+CONFIG_UART_CONSOLE=n
+CONFIG_ASSERT=n
+CONFIG_ASSERT_VERBOSE=n
+CONFIG_ASSERT_NO_FILE_INFO=y
+CONFIG_PRINTK_SYNC=n
+CONFIG_THREAD_NAME=n
+
+# Power Management
+CONFIG_PM_DEVICE=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/readme.md gitlab_sidewalk/samples/SWTL001/readme.md
--- sidewalk/samples/SWTL001/readme.md	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/readme.md	2023-11-06 17:25:50.600092380 -0800
@@ -0,0 +1,10 @@
+# [SWTL001](https://github.com/Lora-net/SWTL001) firmware update for LR11xx
+use this platform for SWTL001 firmware update for LR11xx chip, as alternative to NUCLEO-L476RG.
+
+# build steps
+1 download your desired [firmware header file](https://github.com/Lora-net/radio_firmware_images) and place into include subdirectory.   Only "transceiver" firmware will work with sidewalk; do not use "modem" firmware.  
+2 edit ``application_thread.c`` to include this downloaded header file  
+3 build with `` west build -b nrf52840dk_nrf52840 -- -DRADIO=LR1110``  
+4 have open serial terminal to observe logs, (or RTT viewer) to see logs  
+5 ``west flash``  
+6 check in the execution logs the firmware update completed, then flash another application.  If you are going to ise a GNSS application, then you first need perform a full almanac update in order to GNSS to function  correctly.  
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/sample.yaml gitlab_sidewalk/samples/SWTL001/sample.yaml
--- sidewalk/samples/SWTL001/sample.yaml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/sample.yaml	2023-11-06 15:58:32.167323199 -0800
@@ -0,0 +1,56 @@
+sample:
+  name: Sidewalk application template
+  description: Sample implementing Amazon Sidewalk End Device
+tests:
+  sample.sidewalk.template.lora:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
+
+  sample.sidewalk.template.lora.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: CONFIG_SIDEWALK_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk_cli
+
+  sample.sidewalk.template.lora.release:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: CONF_FILE=prj_release.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
+
+  sample.sidewalk.template.fsk:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: OVERLAY_CONFIG=fsk.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
+
+  sample.sidewalk.template.fsk.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: OVERLAY_CONFIG=fsk.conf CONFIG_SIDEWALK_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk_cli
+
+  sample.sidewalk.template.fsk.release:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840 nrf5340dk_nrf5340_cpuapp
+    extra_args: OVERLAY_CONFIG=fsk.conf CONF_FILE=prj_release.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+      - nrf5340dk_nrf5340_cpuapp
+    tags: Sidewalk
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/src/application_thread.c gitlab_sidewalk/samples/SWTL001/src/application_thread.c
--- sidewalk/samples/SWTL001/src/application_thread.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/src/application_thread.c	2023-11-07 09:30:22.998906637 -0800
@@ -0,0 +1,135 @@
+/*!
+ * @file      main.c
+ *
+ * @brief     LR11XX updater tool application entry point
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#include <sid_api.h>
+#include <sid_error.h>
+
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+
+#include <pal_init.h>
+#if defined(CONFIG_SIDEWALK_CLI)
+#include <sid_shell.h>
+#endif
+
+#include <application_thread.h>
+#include <state_notifier.h>
+
+#include "lr11xx_firmware_update.h"
+#include "lr1110_transceiver_0308.h"
+
+static struct k_thread application_thread;
+
+K_THREAD_STACK_DEFINE(application_thread_stack, CONFIG_SIDEWALK_THREAD_STACK_SIZE);
+K_MSGQ_DEFINE(application_thread_msgq, sizeof(app_event_t), CONFIG_SIDEWALK_THREAD_QUEUE_SIZE, 4);
+
+LOG_MODULE_REGISTER(application, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static void sidewalk_app_entry(void *ctx, void *unused, void *unused2)
+{
+	ARG_UNUSED(unused);
+	ARG_UNUSED(unused2);
+	app_ctx_t *application_ctx = (app_ctx_t *)ctx;
+
+	if (application_pal_init()) {
+		LOG_ERR("Failed to initialze PAL layer for sidewalk applicaiton.");
+		return;
+	}
+
+	/* sid_init only for initializing radio driver */
+	sid_error_t err = sid_init(&application_ctx->config, &application_ctx->handle);
+
+	switch (err) {
+	case SID_ERROR_NONE:
+		break;
+	case SID_ERROR_ALREADY_INITIALIZED:
+		LOG_WRN("Sidewalk already initialized!");
+		break;
+	default:
+		LOG_ERR("Unknown error (%d) during sidewalk initialization!", err);
+		return;
+	}
+
+    const lr11xx_fw_update_status_t status =
+		lr11xx_update_firmware( LR11XX_FIRMWARE_UPDATE_TO, LR11XX_FIRMWARE_VERSION,
+		lr11xx_firmware_image, ( uint32_t ) LR11XX_FIRMWARE_IMAGE_SIZE );
+
+	switch( status )
+    {
+        case LR11XX_FW_UPDATE_OK:
+            LOG_INF( "Expected firmware running!" );
+            LOG_INF( "Please flash another application (like EVK Demo App)" );
+            break;
+        case LR11XX_FW_UPDATE_WRONG_CHIP_TYPE:
+            LOG_ERR( "Wrong chip type!" );
+            break;
+        case LR11XX_FW_UPDATE_ERROR:
+            LOG_ERR( "Error! Wrong firmware version - please retry." );
+            break;
+    }
+
+	while (true) {
+		app_event_t event = SIDEWALK_EVENT;
+
+		if (!k_msgq_get(&application_thread_msgq, &event, K_FOREVER)) {
+			switch (event) {
+			case SIDEWALK_EVENT:
+				break;
+			default:
+				LOG_ERR("Invalid Event received!");
+			}
+		}
+	}
+}
+
+void app_event_send(app_event_t event)
+{
+	int ret = k_msgq_put(&application_thread_msgq, (void *)&event,
+			     k_is_in_isr() ? K_NO_WAIT : K_FOREVER);
+
+	if (ret) {
+		LOG_ERR("Failed to send event to application thread. err: %d", ret);
+	}
+}
+
+sid_error_t app_thread_init(app_ctx_t *ctx)
+{
+	if (!ctx) {
+		return SID_ERROR_NULL_POINTER;
+	}
+	(void)k_thread_create(&application_thread, application_thread_stack,
+			      K_THREAD_STACK_SIZEOF(application_thread_stack), sidewalk_app_entry,
+			      ctx, NULL, NULL, CONFIG_SIDEWALK_THREAD_PRIORITY, 0, K_NO_WAIT);
+	k_thread_name_set(&application_thread, "sidewalk_thread");
+	return SID_ERROR_NONE;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/src/lr11xx_firmware_update.c gitlab_sidewalk/samples/SWTL001/src/lr11xx_firmware_update.c
--- sidewalk/samples/SWTL001/src/lr11xx_firmware_update.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/src/lr11xx_firmware_update.c	2023-11-07 09:34:10.428459068 -0800
@@ -0,0 +1,170 @@
+/*!
+ * @file      main.c
+ *
+ * @brief     LR11XX updater tool application entry point
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#include <zephyr/logging/log.h>
+#include <sid_pal_gpio_ifc.h>
+#include <app_subGHz_config.h>
+#include <halo_lr11xx_radio.h>
+#include <sid_pal_delay_ifc.h>
+#include <lr11xx_bootloader.h>
+
+#include "lr11xx_firmware_update.h"
+
+#define LR11XX_TYPE_PRODUCTION_MODE 0xDF
+
+LOG_MODULE_REGISTER(fwup, CONFIG_SIDEWALK_LOG_LEVEL);
+
+bool lr11xx_is_chip_in_production_mode( uint8_t type )
+{
+    return ( type == LR11XX_TYPE_PRODUCTION_MODE ) ? true : false;
+}
+
+bool lr11xx_is_fw_compatible_with_chip( lr11xx_fw_update_t update, uint16_t bootloader_version )
+{
+    if( ( ( update == LR1110_FIRMWARE_UPDATE_TO_TRX ) || ( update == LR1110_FIRMWARE_UPDATE_TO_MODEM ) ) &&
+        ( bootloader_version != 0x6500 ) )
+    {
+        return false;
+    }
+    else if( ( update == LR1120_FIRMWARE_UPDATE_TO_TRX ) && ( bootloader_version != 0x2000 ) )
+    {
+        return false;
+    }
+    else if( ( update == LR1121_FIRMWARE_UPDATE_TO_TRX ) && ( bootloader_version != 0x2100 ) )
+    {
+        return false;
+    }
+
+    return true;
+}
+
+lr11xx_fw_update_status_t lr11xx_update_firmware(lr11xx_fw_update_t fw_update_direction,
+	uint32_t fw_expected,
+	const uint32_t* buffer,
+	uint32_t length)
+{
+	lr11xx_bootloader_version_t version_bootloader = { 0 };
+	void *drv_ctx;
+	const radio_lr11xx_device_config_t *cfg = get_radio_cfg();
+	
+    LOG_INF( "Reset the chip..." );
+	if (sid_pal_gpio_set_direction(cfg->gpios.radio_busy,
+		SID_PAL_GPIO_DIRECTION_OUTPUT) != SID_ERROR_NONE) {
+		LOG_ERR("set busy dir out");
+		return LR11XX_FW_UPDATE_ERROR;
+	}
+	sid_pal_gpio_write(cfg->gpios.radio_busy, 0);
+
+	drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_reset(drv_ctx) != LR11XX_STATUS_OK) {
+		LOG_ERR("lr11xx_system_reset fail");
+		return LR11XX_FW_UPDATE_ERROR;
+	}
+	sid_pal_delay_us(500000);
+
+	if (sid_pal_gpio_set_direction(cfg->gpios.radio_busy,
+		SID_PAL_GPIO_DIRECTION_INPUT) != SID_ERROR_NONE) {
+		LOG_ERR("set busy dir in");
+		return LR11XX_FW_UPDATE_ERROR;
+	}
+	sid_pal_delay_us(100000);
+
+    LOG_INF( "> Reset done!" );	
+
+    lr11xx_bootloader_get_version(drv_ctx, &version_bootloader);
+    LOG_INF( "Chip in bootloader mode:" );
+    LOG_INF( " - Chip type               = 0x%02X (0xDF for production)", version_bootloader.type );
+    LOG_INF( " - Chip hardware version   = 0x%02X (0x22 for V2C)", version_bootloader.hw );
+    LOG_INF( " - Chip bootloader version = 0x%04X", version_bootloader.fw );
+
+    if( lr11xx_is_chip_in_production_mode( version_bootloader.type ) == false )
+    {
+		LOG_ERR("not in production mode");
+        return LR11XX_FW_UPDATE_WRONG_CHIP_TYPE;
+    }
+
+    if( lr11xx_is_fw_compatible_with_chip( fw_update_direction, version_bootloader.fw ) == false )
+    {
+		LOG_ERR("incompatible firmware");
+        return LR11XX_FW_UPDATE_WRONG_CHIP_TYPE;
+    };
+
+    LOG_INF( "Start flash erase..." );
+    lr11xx_bootloader_erase_flash( drv_ctx );
+    LOG_INF( "> Flash erase done!" );
+
+    LOG_INF( "Start flashing firmware... %u", length);
+    lr11xx_bootloader_write_flash_encrypted_full( drv_ctx, 0, buffer, length );
+    LOG_INF( "> Flashing done!" );
+
+    LOG_INF( "Rebooting..." );
+    lr11xx_bootloader_reboot( drv_ctx, false );
+    LOG_INF( "> Reboot done!" );
+
+    switch( fw_update_direction )
+    {
+    case LR1110_FIRMWARE_UPDATE_TO_TRX:
+    case LR1120_FIRMWARE_UPDATE_TO_TRX:
+    case LR1121_FIRMWARE_UPDATE_TO_TRX:
+    {
+        lr11xx_system_version_t version_trx = { 0x00 };
+        lr11xx_system_uid_t     uid         = { 0x00 };
+
+        lr11xx_system_get_version( drv_ctx, &version_trx );
+        LOG_INF( "Chip in transceiver mode:" );
+        LOG_INF( " - Chip type             = 0x%02X", version_trx.type );
+        LOG_INF( " - Chip hardware version = 0x%02X", version_trx.hw );
+        LOG_INF( " - Chip firmware version = 0x%04X", version_trx.fw );
+
+        lr11xx_system_read_uid( drv_ctx, uid );
+
+        if( version_trx.fw == fw_expected )
+        {
+            return LR11XX_FW_UPDATE_OK;
+        }
+        else
+        {
+            return LR11XX_FW_UPDATE_ERROR;
+        }
+        break;
+    }
+    case LR1110_FIRMWARE_UPDATE_TO_MODEM:
+    {
+		/* not using radio in lorawan mode for sidewalk */
+		LOG_ERR("LR1110_FIRMWARE_UPDATE_TO_MODEM");
+    }
+    } // ..switch( fw_update_direction )
+
+	return LR11XX_FW_UPDATE_ERROR;
+}
+
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/src/main.c gitlab_sidewalk/samples/SWTL001/src/main.c
--- sidewalk/samples/SWTL001/src/main.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/src/main.c	2023-11-07 10:09:02.353374050 -0800
@@ -0,0 +1,140 @@
+
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_pal_assert_ifc.h>
+#include <app_ble_config.h>
+#include <app_subGHz_config.h>
+
+#include <stdbool.h>
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+#include <zephyr/settings/settings.h>
+
+#include <settings_utils.h>
+#include <dk_buttons_and_leds.h>
+#include <sidewalk_version.h>
+#include <nordic_dfu.h>
+#if defined(CONFIG_BOOTLOADER_MCUBOOT)
+#include <zephyr/dfu/mcuboot.h>
+#endif
+#if defined(CONFIG_GPIO)
+#include <state_notifier_gpio_backend.h>
+#endif
+#if defined(CONFIG_LOG)
+#include <state_notifier_log_backend.h>
+#endif
+
+#include <pal_init.h>
+#include <buttons.h>
+#include <application_thread.h>
+
+#if defined(CONFIG_NORDIC_QSPI_NOR)
+#include <zephyr/device.h>
+#include <zephyr/pm/device.h>
+
+#define EXTERNAL_FLASH DT_CHOSEN(nordic_pm_ext_flash)
+#endif
+
+LOG_MODULE_REGISTER(main, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static app_ctx_t app_context;
+
+static void button_handler(uint32_t event)
+{
+	app_event_send((app_event_t)event);
+}
+
+static sid_error_t app_buttons_init(btn_handler_t handler)
+{
+	return SID_ERROR_NONE;
+}
+
+static void on_sidewalk_event(bool in_isr, void *context) { }
+static void on_sidewalk_msg_received(const struct sid_msg_desc *msg_desc, const struct sid_msg *msg,
+				     void *context) { }
+static void on_sidewalk_msg_sent(const struct sid_msg_desc *msg_desc, void *context) { }
+static void on_sidewalk_send_error(sid_error_t error, const struct sid_msg_desc *msg_desc,
+				   void *context) { }
+static void on_sidewalk_status_changed(const struct sid_status *status, void *context) { }
+static void on_sidewalk_factory_reset(void *context) { }
+
+static void app_setup(void)
+{
+	if (app_buttons_init(button_handler)) {
+		LOG_ERR("Failed to initialze buttons.");
+		SID_PAL_ASSERT(false);
+	}
+
+	if (dk_leds_init()) {
+		LOG_ERR("Failed to initialze LEDs.");
+		SID_PAL_ASSERT(false);
+	}
+#if defined(CONFIG_GPIO)
+	state_watch_init_gpio(&global_state_notifier);
+#endif
+#if defined(CONFIG_LOG)
+	state_watch_init_log(&global_state_notifier);
+#endif
+
+	app_context.event_callbacks.context = &app_context;
+	app_context.event_callbacks.on_event = on_sidewalk_event;
+	app_context.event_callbacks.on_msg_received = on_sidewalk_msg_received;
+	app_context.event_callbacks.on_msg_sent = on_sidewalk_msg_sent;
+	app_context.event_callbacks.on_send_error = on_sidewalk_send_error;
+	app_context.event_callbacks.on_status_changed = on_sidewalk_status_changed;
+	app_context.event_callbacks.on_factory_reset = on_sidewalk_factory_reset;
+
+	app_context.config = (struct sid_config){
+		.link_mask = SID_LINK_TYPE_3,
+		.time_sync_periodicity_seconds = 7200,
+		.callbacks = &app_context.event_callbacks,
+		.link_config = app_get_ble_config(),
+		.sub_ghz_link_config = app_get_sub_ghz_config(),
+	};
+
+#if defined(CONFIG_BOOTLOADER_MCUBOOT)
+	if (!boot_is_img_confirmed()) {
+		int ret = boot_write_img_confirmed();
+
+		if (ret) {
+			LOG_ERR("Couldn't confirm image: %d", ret);
+		} else {
+			LOG_INF("Marked image as OK");
+		}
+	}
+#endif
+
+#if defined(CONFIG_NORDIC_QSPI_NOR)
+	const struct device *const qspi_dev = DEVICE_DT_GET(EXTERNAL_FLASH);
+
+	if (device_is_ready(qspi_dev)) {
+		pm_device_action_run(qspi_dev, PM_DEVICE_ACTION_SUSPEND);
+	}
+#endif
+}
+
+int main(void)
+{
+	PRINT_SIDEWALK_VERSION();
+
+	switch (application_to_start()) {
+	case SIDEWALK_APPLICATION: {
+		app_setup();
+		if (app_thread_init(&app_context)) {
+			LOG_ERR("Failed to start Sidewalk thread");
+		}
+		break;
+	};
+#if defined(CONFIG_SIDEWALK_DFU_SERVICE_BLE)
+	case DFU_APPLICATION: {
+		const int ret = nordic_dfu_ble_start();
+		LOG_INF("DFU service started, return value %d", ret);
+		break;
+	}
+#endif
+	default:
+		LOG_ERR("Unknown application to start.");
+	}
+
+	return 0;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/SWTL001/version.conf gitlab_sidewalk/samples/SWTL001/version.conf
--- sidewalk/samples/SWTL001/version.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/SWTL001/version.conf	2023-11-09 10:35:38.034743889 -0800
@@ -0,0 +1 @@
+CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION="0.0.0+0"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/template_ble/src/sidewalk_callbacks.c gitlab_sidewalk/samples/template_ble/src/sidewalk_callbacks.c
--- sidewalk/samples/template_ble/src/sidewalk_callbacks.c	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/samples/template_ble/src/sidewalk_callbacks.c	2023-11-01 08:09:54.871151834 -0700
@@ -23,6 +23,9 @@
 
 static const uint8_t *link_mode_idx_name[] = { "ble", "fsk", "lora" };
 
+#include <json_printer.h>
+#include <sidTypes2Json.h>
+
 static void on_sidewalk_event(bool in_isr, void *context)
 {
 	LOG_DBG("on event, from %s, context %p", in_isr ? "ISR" : "App", context);
@@ -40,6 +43,9 @@
 	LOG_DBG("received message(type: %d, link_mode: %d, id: %u size %u)", (int)msg_desc->type,
 		(int)msg_desc->link_mode, msg_desc->id, msg->size);
 	LOG_HEXDUMP_INF((uint8_t *)msg->data, msg->size, "Message data: ");
+
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_msg_received", JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 1))))));
 }
 
 static void on_sidewalk_msg_sent(const struct sid_msg_desc *msg_desc, void *context)
@@ -49,6 +55,8 @@
 	CLI_register_message_send();
 #endif
 	LOG_INF("sent message(type: %d, id: %u)", (int)msg_desc->type, msg_desc->id);
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_msg_sent", JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0))))));
 }
 
 static void on_sidewalk_send_error(sid_error_t error, const struct sid_msg_desc *msg_desc,
@@ -60,6 +68,11 @@
 #endif
 	LOG_ERR("failed to send message(type: %d, id: %u), err:%d", (int)msg_desc->type,
 		msg_desc->id, (int)error);
+
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_send_error",
+		JSON_OBJ(JSON_LIST_2(JSON_VAL_sid_error_t("error", error),
+				     JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0)))))));
 }
 
 static void on_sidewalk_status_changed(const struct sid_status *status, void *context)
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/template_subghz/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/template_subghz/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/template_subghz/boards/nrf52840dk_nrf52840.overlay	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/samples/template_subghz/boards/nrf52840dk_nrf52840.overlay	2023-11-01 08:09:54.871151834 -0700
@@ -57,6 +57,18 @@
 			gpios = <&gpio1 0x6 GPIO_ACTIVE_HIGH>;
 			label = "semtech_sx1262 DIO1";
 		};
+		radio_led_tx: led_tx {
+			gpios = <&gpio0 0x1e GPIO_ACTIVE_HIGH>;
+			label = "red tx LED";
+		};
+		radio_led_rx: led_rx {
+			gpios = <&gpio0 0x1f GPIO_ACTIVE_HIGH>;
+			label = "green rx LED";
+		};
+        radio_dbgH: out_dbgH {
+            gpios = <&gpio0 0x0 GPIO_ACTIVE_HIGH>; // OK  XL1
+            label = "debug H pin";
+        };
  	};
 
 	chosen {
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/template_subghz/fsk_cli.conf gitlab_sidewalk/samples/template_subghz/fsk_cli.conf
--- sidewalk/samples/template_subghz/fsk_cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/template_subghz/fsk_cli.conf	2023-11-02 14:15:49.500843000 -0700
@@ -0,0 +1,14 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
+CONFIG_SIDEWALK_CLI=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/template_subghz/src/application_thread.c gitlab_sidewalk/samples/template_subghz/src/application_thread.c
--- sidewalk/samples/template_subghz/src/application_thread.c	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/samples/template_subghz/src/application_thread.c	2023-11-02 14:11:34.327632331 -0700
@@ -58,7 +58,7 @@
 		return;
 	}
 #if defined(CONFIG_SIDEWALK_CLI)
-	CLI_init(application_ctx->handle);
+	CLI_init(application_ctx->handle, &application_ctx->config);
 #endif
 	application_state_connected(&global_state_notifier, false);
 	application_state_working(&global_state_notifier, true);
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/template_subghz/src/sidewalk_callbacks.c gitlab_sidewalk/samples/template_subghz/src/sidewalk_callbacks.c
--- sidewalk/samples/template_subghz/src/sidewalk_callbacks.c	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/samples/template_subghz/src/sidewalk_callbacks.c	2023-11-01 08:09:54.871151834 -0700
@@ -23,6 +23,12 @@
 
 static const uint8_t *link_mode_idx_name[] = { "ble", "fsk", "lora" };
 
+#include <json_printer.h>
+#include <sidTypes2Json.h>
+
+#undef JSON_RAW_PRINT
+#define JSON_RAW_PRINT(format, ...) LOG_RAW(format __VA_OPT__(, ) __VA_ARGS__)
+
 static void on_sidewalk_event(bool in_isr, void *context)
 {
 	LOG_DBG("on event, from %s, context %p", in_isr ? "ISR" : "App", context);
@@ -40,6 +46,8 @@
 	LOG_DBG("received message(type: %d, link_mode: %d, id: %u size %u)", (int)msg_desc->type,
 		(int)msg_desc->link_mode, msg_desc->id, msg->size);
 	LOG_HEXDUMP_INF((uint8_t *)msg->data, msg->size, "Message data: ");
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_msg_received", JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 1))))));
 }
 
 static void on_sidewalk_msg_sent(const struct sid_msg_desc *msg_desc, void *context)
@@ -49,6 +57,8 @@
 	CLI_register_message_send();
 #endif
 	LOG_INF("sent message(type: %d, id: %u)", (int)msg_desc->type, msg_desc->id);
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_msg_sent", JSON_OBJ(JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0))))));
 }
 
 static void on_sidewalk_send_error(sid_error_t error, const struct sid_msg_desc *msg_desc,
@@ -60,6 +70,10 @@
 #endif
 	LOG_ERR("failed to send message(type: %d, id: %u), err:%d", (int)msg_desc->type,
 		msg_desc->id, (int)error);
+	printk(JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+		"on_send_error",
+		JSON_OBJ(JSON_LIST_2(JSON_VAL_sid_error_t("error", error),
+				     JSON_VAL_sid_msg_desc("sid_msg_desc", msg_desc, 0)))))));
 }
 
 static void on_sidewalk_status_changed(const struct sid_status *status, void *context)
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/template_subghz/version.conf gitlab_sidewalk/samples/template_subghz/version.conf
--- sidewalk/samples/template_subghz/version.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/template_subghz/version.conf	2023-11-09 10:36:30.312313677 -0800
@@ -0,0 +1 @@
+CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION="0.0.0+0"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840.overlay	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+&i2c0 {
+    status = "okay";
+    clock-frequency = <I2C_BITRATE_STANDARD>;
+    lcd_pcf8574: pcf8574@27 {
+        compatible = "nxp,pcf8574";
+        reg = <0x27>;
+        gpio-controller;
+        #gpio-cells = <2>;
+        ngpios = <8>;
+    };
+
+};
+
+&spi3 {
+	status = "disabled";
+};
+
+sid_semtech: &spi2 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi2_default>;
+	pinctrl-1 = <&spi2_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+&spi2_default {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+	};
+};
+
+&spi2_sleep {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+		low-power-enable;
+	};
+};
+
+/ {
+	semtech_sx1262_gpios{
+ 		compatible = "gpio-keys";
+		semtech_sx1262_cs: cs {
+			gpios = <&gpio1 0x8 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 CS";
+		};
+ 		semtech_sx1262_reset_gpios: reset {
+			gpios = <&gpio0 0x3 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 Reset";
+		};
+		semtech_sx1262_busy_gpios: busy {
+			gpios = <&gpio1 0x4 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Busy";
+		};
+		semtech_sx1262_antenna_enable_gpios: antena_enable {
+			gpios = <&gpio1 0xa GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Antena Enable";
+		};
+		semtech_sx1262_dio1_gpios: dio1 {
+			gpios = <&gpio1 0x6 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 DIO1";
+		};
+		radio_led_tx: led_tx {
+			gpios = <&gpio0 0x1e GPIO_ACTIVE_HIGH>;
+			label = "red tx LED";
+		};
+		radio_led_rx: led_rx {
+			gpios = <&gpio0 0x1f GPIO_ACTIVE_HIGH>;
+			label = "green rx LED";
+		};
+		radio_led_sniff: led_sniff {
+			gpios = <&gpio1 0x5 GPIO_ACTIVE_HIGH>;
+			label = "yellow LED";
+		};
+		radio_gnss_lna: gnss_lna {
+			gpios = <&gpio0 0x1d GPIO_ACTIVE_HIGH>;
+			label = "gnss antenna";
+		};
+ 	};
+
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840_release.overlay gitlab_sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840_release.overlay
--- sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840_release.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/boards/nrf52840dk_nrf52840_release.overlay	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+&spi3 {
+	status = "disabled";
+};
+
+sid_semtech: &spi2 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi2_default>;
+	pinctrl-1 = <&spi2_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+&spi2_default {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+	};
+};
+
+&spi2_sleep {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+		low-power-enable;
+	};
+};
+
+/ {
+	semtech_sx1262_gpios{
+ 		compatible = "gpio-keys";
+		semtech_sx1262_cs: cs {
+			gpios = <&gpio1 0x8 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 CS";
+		};
+ 		semtech_sx1262_reset_gpios: reset {
+			gpios = <&gpio0 0x3 GPIO_ACTIVE_LOW>;
+			label = "semtech_sx1262 Reset";
+		};
+		semtech_sx1262_busy_gpios: busy {
+			gpios = <&gpio1 0x4 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Busy";
+		};
+		semtech_sx1262_antenna_enable_gpios: antena_enable {
+			gpios = <&gpio1 0xa GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 Antena Enable";
+		};
+		semtech_sx1262_dio1_gpios: dio1 {
+			gpios = <&gpio1 0x6 GPIO_ACTIVE_HIGH>;
+			label = "semtech_sx1262 DIO1";
+		};
+ 	};
+
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay
--- sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840.overlay	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,11 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+/ {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay
--- sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/boards/nrf52840dk_nrf52840_release.overlay	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2022 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+&spi3 {
+	status = "disabled";
+};
+
+sid_semtech: &spi2 {
+	compatible = "nordic,nrf-spim";
+	status = "okay";
+	pinctrl-0 = <&spi2_default>;
+	pinctrl-1 = <&spi2_sleep>;
+	pinctrl-names = "default", "sleep";
+	clock-frequency = <DT_FREQ_M(8)>;
+};
+
+&spi2_default {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+	};
+};
+
+&spi2_sleep {
+	group1 {
+		psels = <NRF_PSEL(SPIM_SCK, 1, 15)>,
+			<NRF_PSEL(SPIM_MISO, 1, 14)>,
+			<NRF_PSEL(SPIM_MOSI, 1, 13)>;
+		low-power-enable;
+	};
+};
+
+/ {
+	chosen {
+		nordic,pm-ext-flash = &mx25r64;
+	};
+};
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/child_image/mcuboot/Kconfig.root gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/Kconfig.root
--- sidewalk/samples/wifi_lr1110/child_image/mcuboot/Kconfig.root	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/Kconfig.root	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# The purpose of this file is to create a wrapper Kconfig file that will be set as
+# mcuboot_KCONFIG_ROOT and processed before any other Kconfig for mcuboot child image.
+
+rsource "../../../common/Kconfig.mcuboot.external_flash.defaults"
+source "${ZEPHYR_BASE}/../bootloader/mcuboot/boot/zephyr/Kconfig"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj.conf gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj.conf
--- sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj.conf	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,17 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_MBEDTLS_CFG_FILE="mcuboot-mbedtls-cfg.h"
+
+# Bootloader size optimization
+# Disable not used modules that cannot be set in Kconfig.mcuboot.defaults due to overriding
+# in board files.
+CONFIG_BOOT_UPGRADE_ONLY=n
+CONFIG_CONSOLE=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_USE_SEGGER_RTT=n
+CONFIG_NO_RUNTIME_CHECKS=y
+CONFIG_SIZE_OPTIMIZATIONS=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj_release.conf gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj_release.conf
--- sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/child_image/mcuboot/prj_release.conf	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,17 @@
+#
+# Copyright (c) 2021 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+
+CONFIG_MBEDTLS_CFG_FILE="mcuboot-mbedtls-cfg.h"
+
+# Bootloader size optimization
+# Disable not used modules that cannot be set in Kconfig.mcuboot.defaults due to overriding
+# in board files.
+CONFIG_BOOT_UPGRADE_ONLY=n
+CONFIG_CONSOLE=n
+CONFIG_SERIAL=n
+CONFIG_UART_CONSOLE=n
+CONFIG_USE_SEGGER_RTT=n
+CONFIG_NO_RUNTIME_CHECKS=y
+CONFIG_SIZE_OPTIMIZATIONS=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/cli.conf gitlab_sidewalk/samples/wifi_lr1110/cli.conf
--- sidewalk/samples/wifi_lr1110/cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/cli.conf	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,11 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_CLI=y
+
+CONFIG_LR1110_CLI=y
+
+CONFIG_NEWLIB_LIBC_FLOAT_SCANF=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/CMakeLists.txt gitlab_sidewalk/samples/wifi_lr1110/CMakeLists.txt
--- sidewalk/samples/wifi_lr1110/CMakeLists.txt	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/CMakeLists.txt	2023-11-07 13:46:15.375934967 -0800
@@ -0,0 +1,32 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+cmake_minimum_required(VERSION 3.20.0)
+
+include(../common/bootloader_version.cmake)
+
+set(mcuboot_KCONFIG_ROOT $ENV{ZEPHYR_BASE}/../sidewalk/samples/template_subghz/child_image/mcuboot/Kconfig.root)
+
+find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})
+project(sidewalk_template_subghz)
+
+zephyr_include_directories(
+	include
+	../../tests/validation/timer/src
+)
+
+target_sources(app PRIVATE
+  src/main.c
+  src/application_thread.c
+  src/board_events.c
+  src/sidewalk_callbacks.c
+  src/wifi.c
+  src/fragment.c
+)
+
+if(DEFINED WIFI_DEBUG)
+	zephyr_compile_definitions(WIFI_DEBUG)
+endif()
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/fsk_cli.conf gitlab_sidewalk/samples/wifi_lr1110/fsk_cli.conf
--- sidewalk/samples/wifi_lr1110/fsk_cli.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/fsk_cli.conf	2023-11-02 14:18:15.215819664 -0700
@@ -0,0 +1,18 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+#CONFIG_PSA_CRYPTO_DRIVER_OBERON=n
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
+
+CONFIG_SIDEWALK_CLI=y
+CONFIG_LR1110_CLI=y
+CONFIG_NEWLIB_LIBC_FLOAT_SCANF=y
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/fsk.conf gitlab_sidewalk/samples/wifi_lr1110/fsk.conf
--- sidewalk/samples/wifi_lr1110/fsk.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/fsk.conf	2023-11-02 14:18:23.295984744 -0700
@@ -0,0 +1,14 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_LINK_MASK_FSK=y
+
+CONFIG_HW_CC3XX=y
+CONFIG_PSA_CRYPTO_DRIVER_CC3XX=y
+#CONFIG_PSA_CRYPTO_DRIVER_OBERON=n
+CONFIG_MBEDTLS_HEAP_SIZE=1024
+
+CONFIG_SPIN_VALIDATE=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/.gitignore gitlab_sidewalk/samples/wifi_lr1110/.gitignore
--- sidewalk/samples/wifi_lr1110/.gitignore	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/.gitignore	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,42 @@
+*.o
+*.d
+*.cmd
+*.log
+*.pyc
+*.swp
+*.swo
+*~
+build
+build-*
+build_*
+cscope.*
+.dir
+venv
+.venv
+.cache
+
+/*.patch
+
+tags
+.project
+.cproject
+.xxproject
+.envrc
+.vscode
+sanity-out*
+twister-out*
+map.yml
+hardware-map.yaml*
+coverage.info
+
+doc/_build
+doc/nrf/_doxygen/
+doc/nrf/_samples/
+doc/*_warnings.txt
+doc/*_doc.log
+
+ext/lib/bin/supl
+ext/lib/bin/libsupl.zip
+ext/BSEC_*
+
+**/version.conf
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/include/application_thread.h gitlab_sidewalk/samples/wifi_lr1110/include/application_thread.h
--- sidewalk/samples/wifi_lr1110/include/application_thread.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/include/application_thread.h	2023-11-07 10:20:06.855110975 -0800
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#ifndef APPLICATION_THREAD_H
+#define APPLICATION_THREAD_H
+
+#include <sid_api.h>
+#include "fragment.h"
+
+#ifdef CONFIG_SIDEWALK_LINK_MASK_BLE
+#define BUILT_IN_LM             (uint32_t)(SID_LINK_TYPE_1)
+#elif  CONFIG_SIDEWALK_LINK_MASK_FSK
+#define BUILT_IN_LM             (uint32_t)(SID_LINK_TYPE_2)
+#elif CONFIG_SIDEWALK_LINK_MASK_LORA
+#define BUILT_IN_LM             (uint32_t)(SID_LINK_TYPE_3)
+#else
+#error "Not defined Sidewalk link mask!!"
+#endif
+
+#define NB_MAX_SV		8	/* GNSS */
+#define DEFAULT_AUTO_SCAN_INTERVAL		30		/* seconds */
+
+#define FRAGMENT_TYPE_GNSS         0	// to cloud port 198
+#define FRAGMENT_TYPE_WIFI         1	// to cloud port 197
+#define FRAGMENT_TYPE_MODEM_MSG    2	// to cloud port 199
+#define FRAGMENT_TYPE_GNSS_NG      3	// to cloud port 192
+
+typedef struct application_context {
+	struct sid_event_callbacks event_callbacks;
+	struct sid_config config;
+	struct sid_handle *handle;
+	bool connection_request;
+	fragment_t frag;
+} app_ctx_t;
+
+typedef enum application_events {
+	SIDEWALK_EVENT,
+
+	BUTTON_EVENT_SEND_HELLO,
+	BUTTON_EVENT_SET_BATTERY_LEVEL,
+	BUTTON_EVENT_FACTORY_RESET,
+	BUTTON_EVENT_FSK_MODE,
+	BUTTON_EVENT_LORA_MODE,
+	BUTTON_EVENT_GET_DEVICE_PROFILE,
+	BUTTON_EVENT_SET_DEVICE_PROFILE,
+	#if  defined(CONFIG_SIDEWALK_DFU)
+	BUTTON_EVENT_NORDIC_DFU,
+	#endif
+	EVENT_WIFI_SCAN,
+	EVENT_TO_FSK,
+	EVENT_TO_LORA,
+	EVENT_SCAN_RESULT_SEND,
+	EVENT_SCAN_INTERVAL_INCR,
+    EVENT_SID_INIT,
+} app_event_t;
+
+/**
+ * @brief Send Event to application thread
+ *
+ * @param event event to send
+ */
+void app_event_send(app_event_t event);
+
+/**
+ * @brief Initialize and start application thread
+ *
+ * @param ctx application context
+ *
+ * @return SID_ERROR_NULL_POINTER in case of invalid ctx
+ */
+sid_error_t app_thread_init(app_ctx_t *ctx);
+
+extern unsigned auto_scan_interval;
+int gnss_scan_timer_set(unsigned sec);
+unsigned gnss_scan_timer_get(void);
+int scan_wifi(app_ctx_t *app_ctx);
+
+#endif /* APPLICATION_THREAD_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/include/board_events.h gitlab_sidewalk/samples/wifi_lr1110/include/board_events.h
--- sidewalk/samples/wifi_lr1110/include/board_events.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/include/board_events.h	2023-11-07 14:29:35.793316005 -0800
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#ifndef BOARD_EVENTS_H
+#define BOARD_EVENTS_H
+
+#include <application_thread.h>
+
+/**
+ * @brief Application handler for sending hello message
+ *
+ * @param application_ctx
+ */
+void button_event_send_hello(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for sending battery level
+ *
+ * @param application_ctx
+ */
+void button_event_set_battery(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for entering in DFU mode
+ *
+ * @param application_ctx
+ */
+void button_event_DFU(app_ctx_t *application_ctx);
+
+/**
+ * @brief Applicaiton handler for requesting factory reset
+ *
+ * @param application_ctx
+ */
+void button_event_factory_reset(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for reading profile
+ *
+ * @param application_ctx
+ */
+void button_event_get_profile(app_ctx_t *application_ctx);
+
+/**
+ * @brief Application handler for setting profile
+ *
+ * @param application_ctx
+ */
+void button_event_set_ptofile(app_ctx_t *application_ctx);
+
+void button_event_fsk_mode(app_ctx_t *application_ctx);
+void button_event_lora_mode(app_ctx_t *application_ctx);
+void app_event_wifi_scan(void);
+void button_event_incr_scan_interval(app_ctx_t *application_ctx);
+
+#endif /* BOARD_EVENTS_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/include/fragment.h gitlab_sidewalk/samples/wifi_lr1110/include/fragment.h
--- sidewalk/samples/wifi_lr1110/include/fragment.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/include/fragment.h	2023-11-07 14:30:02.201894773 -0800
@@ -0,0 +1,59 @@
+/*!
+ * @file      main.c
+ *
+ * @brief     packet fragmentation over sidewalk 
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef FRAGMENT_H
+#define FRAGMENT_H
+
+#include <stdint.h>
+#include <stddef.h>
+
+typedef struct {
+	uint8_t index;
+	uint8_t nbytes_sent_this_fragment;
+	uint8_t current_fragment;
+	uint8_t total_fragments;
+	uint8_t total_bytes;
+	uint8_t num_bytes_sending;
+	size_t mtu;
+	uint8_t frag_type;
+	const uint8_t *buffer;
+} fragment_t;
+
+void send_scan_result(void *app_ctx);
+
+void fragment_msg_sent(void *ctx);
+
+void fragment_send_error(void *context);
+
+#endif /* FRAGMENT_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/include/sidewalk_callbacks.h gitlab_sidewalk/samples/wifi_lr1110/include/sidewalk_callbacks.h
--- sidewalk/samples/wifi_lr1110/include/sidewalk_callbacks.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/include/sidewalk_callbacks.h	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,21 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#ifndef SIDEWALK_CALLBACKS_H
+#define SIDEWALK_CALLBACKS_H
+
+#include <sid_api.h>
+
+/**
+ * @brief Initialize sidewalk callbacks
+ *
+ * @param context Application context passed to callbacks
+ * @param callbacks [out] callbacks to set
+ * @returns #SID_ERROR_NONE in case of success negative error code otherwise.
+ */
+sid_error_t sidewalk_callbacks_set(void *context, struct sid_event_callbacks *callbacks);
+
+#endif /* SIDEWALK_CALLBACKS_H */
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/Kconfig gitlab_sidewalk/samples/wifi_lr1110/Kconfig
--- sidewalk/samples/wifi_lr1110/Kconfig	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/Kconfig	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,9 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+rsource "../common/Kconfig.defconfig"
+
+source "Kconfig.zephyr"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/LICENSE.txt gitlab_sidewalk/samples/wifi_lr1110/LICENSE.txt
--- sidewalk/samples/wifi_lr1110/LICENSE.txt	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/LICENSE.txt	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,81 @@
+############ Amazon License ############
+
+Amazon Sidewalk Content License
+
+©2023 Amazon.com, Inc. or its affiliates (collectively, “Amazon”). All Rights Reserved.
+
+These materials are licensed to you as "AWS Content" under the AWS Intellectual Property License (https://aws.amazon.com/legal/aws-ip-license-terms/) (the “IP License”) and made available to you solely in connection with the developer program for Amazon Sidewalk and related services (such AWS Content, “Amazon Sidewalk Content”). 
+
+Capitalized terms not defined in this file have the meanings given to them in the AWS Customer Agreement (https://aws.amazon.com/agreement/) or the Service Terms (https://aws.amazon.com/service-terms/), including any documentation referenced or incorporated therein (collectively, the “Agreement”).
+
+In addition to the terms and conditions of the IP License, the following terms and conditions ("Additional Terms," and collectively with the IP License, the "Terms") apply to the Amazon Sidewalk Content. In the event of a conflict between the IP License and these Additional Terms, the IP License will control.
+
+You may only use the Amazon Sidewalk Content to (a) evaluate, develop, test, and troubleshoot the operation and compatibility of the Amazon Sidewalk Content with your AS Devices; and (b) integrate the Amazon Sidewalk Content into your AS Devices that access Amazon Sidewalk. If any of the Amazon Sidewalk Content incorporated in your AS Device were provided to you in source code form, such Amazon Sidewalk Content (and modifications thereof) may be distributed solely in binary form as incorporated in your AS Devices. You may not distribute any of your AS Devices that incorporate or were developed using the Amazon Sidewalk Content unless you submit your AS Device to us for approval and we specifically approve the distribution in writing.  You may not: (i) use Amazon Sidewalk Content with any software or other materials that are subject to licenses or restrictions (e.g., open source software licenses) that, when combined with Amazon Sidewalk Content, would require you or us to disclose, license, distribute, or otherwise make all or any part of such Amazon Sidewalk Content available to anyone; or (ii) remove, modify, or obscure any copyright, patent, trademark, or other proprietary or attribution notices on or in any Amazon Sidewalk Content.
+
+Notwithstanding the foregoing, if you are a system-on-chip manufacturer, you may distribute the Amazon Sidewalk Content, including any source code (subject to the limitations herein) made available by Amazon, to AS Device manufacturers for the purpose of such AS Device manufacturers integrating the Amazon Sidewalk Content in their AS Devices and their associated applications and services; provided that you also make available this LICENSE.TXT file to such device manufacturer together with the Amazon Sidewalk Content. For the purpose of the Terms, such Amazon Sidewalk Content will be deemed to have been made available to the device manufacturers from Amazon.
+
+WITH THE EXCEPTION OF FILES IDENTIFIED AS A "MODIFIABLE FILE" WITHIN THE FILE HEADER, YOU MAY NOT MODIFY ANY SOURCE CODE IN ANY FILE IN THIS PACKAGE. Your modifications to the Amazon Sidewalk Content are “Modified Content”. You may reproduce and distribute copies of the Modified Content thereof in any medium, with or without modifications, and in source or object form, provided that you meet the following conditions:
+
+* You must give any other recipients of the Modified Content a copy of these Terms; and
+
+* You must cause any modified files to carry prominent notices stating that you changed the files; and
+
+* You must retain, in the source form of any Modified Content that you distribute, all copyright, patent, trademark, and attribution notices from the source form of the Amazon Sidewalk Content, excluding those notices that do not pertain to any part of the Modified Content; and
+
+* If the Amazon Sidewalk Content includes a "NOTICE" text file as part of its distribution, then any Modified Content that you distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Modified Content, in at least one of the following places: within a NOTICE text file distributed as part of the Modified Content; within the source form or documentation, if provided along with the Modified Content; or, within a display generated by the Modified Content, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the Terms. You may add your own attribution notices within Modified Content that you distribute, alongside or as an addendum to the NOTICE text from the Amazon Sidewalk Content, provided that such additional attribution notices cannot be construed as modifying these Terms.
+
+You may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such Modified Content as a whole, provided your use, reproduction, and distribution of the Amazon Sidewalk Content otherwise complies with the conditions stated in these Terms.
+
+Our licensors may enforce the Terms against you with respect to their software and other materials included in the Amazon Sidewalk Content, and our licensors are third-party beneficiaries of these Terms solely for that purpose.
+
+Amazon Sidewalk Content may include and/or be dependent upon certain third-party libraries or other software packages ("External Dependencies").  If you do not agree with every term in the license file associated with the External Dependencies, you should not use these materials.
+
+THE AMAZON SIDEWALK CONTENT AND THE EXTERNAL DEPENDENCIES ARE PROVIDED BY AMAZON AND AMAZON’S LICENSORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. AMAZON DOES NOT PROMISE THAT THE EXTERNAL DEPENDENCIES AND THEIR APPLICABLE TERMS ARE COMPLETE, ACCURATE, OR UP-TO-DATE, AND AMAZON WILL HAVE NO LIABILITY FOR ANY OMISSIONS OR INACCURACIES. YOU SHOULD CONSULT THE DOWNLOAD SITES FOR THE EXTERNAL DEPENDENCIES FOR THE MOST COMPLETE AND UP-TO-DATE LICENSING INFORMATION. YOUR USE OF THE AMAZON SIDEWALK CONTENT AND THE EXTERNAL DEPENDENCIES IS AT YOUR SOLE RISK. IN NO EVENT WILL AMAZON BE LIABLE FOR ANY DAMAGES, INCLUDING WITHOUT LIMITATION ANY DIRECT, INDIRECT, CONSEQUENTIAL, SPECIAL, INCIDENTAL, OR PUNITIVE DAMAGES (INCLUDING FOR ANY LOSS OF GOODWILL, BUSINESS INTERRUPTION, LOST PROFITS OR DATA, OR COMPUTER FAILURE OR MALFUNCTION) ARISING FROM OR RELATING TO THE AMAZON SIDEWALK CONTENT OR EXTERNAL DEPENDENCIES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, EVEN IF AMAZON HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THESE LIMITATIONS AND DISCLAIMERS APPLY EXCEPT TO THE EXTENT PROHIBITED BY APPLICABLE LAW.
+
+You will defend, indemnify, and hold harmless Amazon, its affiliates, and licensors against any and all claims, losses, and damages arising out of or relating to your distribution of the Amazon Sidewalk Content or External Dependencies in breach of the Terms.
+
+If you do not agree to the Terms, you may not use any file in this package.
+
+############ Nordic License ############
+
+LicenseID:  LicenseRef-Nordic-5-Clause
+
+ExtractedText: <text>
+
+Copyright (c) 2023 Nordic Semiconductor ASA
+All rights reserved.
+
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+1. Redistributions of source code must retain the above copyright notice, this
+   list of conditions and the following disclaimer.
+
+2. Redistributions in binary form, except as embedded into a Nordic
+   Semiconductor ASA integrated circuit in a product or a software update for
+   such product, must reproduce the above copyright notice, this list of
+   conditions and the following disclaimer in the documentation and/or other
+   materials provided with the distribution.
+
+3. Neither the name of Nordic Semiconductor ASA nor the names of its
+   contributors may be used to endorse or promote products derived from this
+   software without specific prior written permission.
+
+4. This software, with or without modification, must only be used with a
+   Nordic Semiconductor ASA integrated circuit.
+
+5. Any software provided in binary form under this license must not be reverse
+   engineered, decompiled, modified and/or disassembled.
+
+THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
+OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
+GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+</text>
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/pm_static.yml gitlab_sidewalk/samples/wifi_lr1110/pm_static.yml
--- sidewalk/samples/wifi_lr1110/pm_static.yml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/pm_static.yml	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,17 @@
+mcuboot:
+  address: 0x0
+  placement:
+    before:
+    - mcuboot_primary
+  region: flash_primary
+  size: 0x7000
+
+sidewalk_storage:
+  address: 0xf8000
+  region: flash_primary
+  size: 0x7000
+
+mfg_storage:
+  address: 0xff000
+  region: flash_primary
+  size: 0x1000
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/prj.conf gitlab_sidewalk/samples/wifi_lr1110/prj.conf
--- sidewalk/samples/wifi_lr1110/prj.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/prj.conf	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,27 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# LCD1602
+CONFIG_I2C=y
+
+# Sidewalk
+CONFIG_SIDEWALK=y
+CONFIG_SIDEWALK_LINK_MASK_LORA=y
+
+# Logs
+CONFIG_SIDEWALK_LOG_LEVEL_INF=y
+CONFIG_NVS_LOG_LEVEL_WRN=y
+CONFIG_LOG_PRINTK=y
+
+# Buttons and LEDs
+CONFIG_GPIO=y
+CONFIG_DK_LIBRARY=y
+
+# Bluetooth
+CONFIG_BT_DEVICE_NAME="Sid template"
+
+# Debug
+CONFIG_RESET_ON_FATAL_ERROR=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/prj_release.conf gitlab_sidewalk/samples/wifi_lr1110/prj_release.conf
--- sidewalk/samples/wifi_lr1110/prj_release.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/prj_release.conf	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,28 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+# Sidewalk
+CONFIG_SIDEWALK=y
+CONFIG_SIDEWALK_LINK_MASK_LORA=y
+
+# Buttons and LEDs
+CONFIG_GPIO=y
+CONFIG_DK_LIBRARY=y
+
+# Bluetooth
+CONFIG_BT_DEVICE_NAME="Sid template"
+
+# Disable peripherals
+CONFIG_LOG=n
+CONFIG_SERIAL=n
+CONFIG_SHELL=n
+CONFIG_CONSOLE=n
+CONFIG_UART_CONSOLE=n
+CONFIG_ASSERT=n
+CONFIG_ASSERT_VERBOSE=n
+CONFIG_ASSERT_NO_FILE_INFO=y
+CONFIG_PRINTK_SYNC=n
+CONFIG_THREAD_NAME=n
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/readme.md gitlab_sidewalk/samples/wifi_lr1110/readme.md
--- sidewalk/samples/wifi_lr1110/readme.md	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/readme.md	2023-11-06 09:45:50.058870860 -0800
@@ -0,0 +1,29 @@
+# Nordic sidewalk template_subghz with added LR1110 Wifi scan
+
+## hardware
+[NRF52840-DK](https://www.nordicsemi.com/Products/Development-hardware/nrf52840-dk) with [LR1110 development kit for 915MHz north america](https://www.semtech.com/products/wireless-rf/lora-edge/lr1110dvk1tcks)
+## prerequisites
+1) Set up your [Nordic development environment](https://nrfconnect.github.io/sdk-sidewalk/setting_up_sidewalk_environment/setting_up_sdk.html) if you haven't already done so.  And you have [provisioned the device](https://nrfconnect.github.io/sdk-sidewalk/setting_up_sidewalk_environment/setting_up_sidewalk_product.html) and loaded the ``Nordic_MFG.hex`` into the board.
+   * If you have never used sidewalk before, it is recommended to first run template_subghz (as provided by nordic) with the sx1262 shield
+2) later, after building & flashing, the LR11xx firmware version will print in the logs upon startup.  Check that  for LR1110 its at least version 0x0308, or for LR112x its at least version 0x0102.   If its earlier / older, then use the [firmware updater tool](https://github.com/Lora-net/SWTL001/wiki).  Or ``../SWLT001`` on this platform.
+
+## LR1110 build:
+``west build -b nrf52840dk_nrf52840 -- -DRADIO=LR1110  -DOVERLAY_CONFIG="cli.conf"``
+
+``west flash``
+
+## running
+The LR1110 shield has 3 LEDs.  Green indicating sidewalk RX, red indicating sidewalk TX, and yellow indicating WiFi scan.  Sidewalk CSS mode (LDR mode) limits 19 bytes per packet, so a Wifi scan will be sent up in two to three fragments.
+
+The usb-uart is available just as with the original template_subghz from Nordic (i.e. 115200bps), showing logs and status.  When built with ``cli.conf``You can interact on the command line in addition to viewing the execution log.   The available CLI for LR1110 is seen by just typing only ``lr1110``. 
+commands of interest   Additionally, there is ``wifi`` command in the CLI.   The auto-timer to trigger scans is accessible with ``lr1110 gt`` no argument to read value, or use zero to shut off timer.
+
+## Reporting format to cloud:
+Fragmentation to accommodate smaller MTU:  a single byte at the start of application-layer payload is used to indicate 3 items: message type, total number of fragments, and current fragment.
+| bits of header byte | description |  
+| ----------- | ----------- |  
+| 6,7 | message type |  
+| 3,4,5 | total fragments |
+| 0,1,2 | current fragment |
+* **WiFi**: is sent with message type 1 in the header, followed by the U-WIFILOC-MAC message as described at
+https://www.loracloud.com/documentation/modem_services?url=mdmsvc.html#lora-edge-wi-fi-positioning-protocol
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/sample.yaml gitlab_sidewalk/samples/wifi_lr1110/sample.yaml
--- sidewalk/samples/wifi_lr1110/sample.yaml	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/sample.yaml	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,66 @@
+sample:
+  name: Sidewalk application template
+  description: Sample implementing Amazon Sidewalk End Device
+tests:
+  sample.sidewalk.template.lora:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk
+
+  sample.sidewalk.template.lora.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: CONFIG_SIDEWALK_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk_cli
+
+  sample.sidewalk.template.lr1110.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: CONFIG_LR1110_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: LR1110_cli
+
+  sample.sidewalk.template.lora.release:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: CONF_FILE=prj_release.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk
+
+  sample.sidewalk.template.lora.dfu_usb:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: OVERLAY_CONFIG=usb_dfu.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk
+
+  sample.sidewalk.template.fsk:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: OVERLAY_CONFIG=fsk.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk
+
+  sample.sidewalk.template.fsk.cli:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: OVERLAY_CONFIG=fsk.conf CONFIG_SIDEWALK_CLI=y
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk_cli
+
+  sample.sidewalk.template.fsk.release:
+    build_only: true
+    platform_allow: nrf52840dk_nrf52840
+    extra_args: OVERLAY_CONFIG=fsk.conf CONF_FILE=prj_release.conf
+    integration_platforms:
+      - nrf52840dk_nrf52840
+    tags: Sidewalk
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/src/application_thread.c gitlab_sidewalk/samples/wifi_lr1110/src/application_thread.c
--- sidewalk/samples/wifi_lr1110/src/application_thread.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/src/application_thread.c	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,172 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+#include <sid_api.h>
+#include <sid_error.h>
+
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+
+#include <board_events.h>
+#include <pal_init.h>
+#if defined(CONFIG_SIDEWALK_CLI)
+#include <sid_shell.h>
+#endif
+#if defined(CONFIG_LR1110_CLI)
+#include <lr1110_shell.h>
+#endif
+#include <halo_lr11xx_radio.h>
+
+#include <application_thread.h>
+#include <state_notifier.h>
+
+extern wifi_configuration_scan_t wifi_configuration;
+
+static struct k_thread application_thread;
+
+K_THREAD_STACK_DEFINE(application_thread_stack, CONFIG_SIDEWALK_THREAD_STACK_SIZE);
+K_MSGQ_DEFINE(application_thread_msgq, sizeof(app_event_t), CONFIG_SIDEWALK_THREAD_QUEUE_SIZE, 4);
+
+LOG_MODULE_REGISTER(application, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static int app_start_sid(app_ctx_t *app_ctx)
+{
+	sid_error_t err = sid_start(app_ctx->handle, app_ctx->config.link_mask);
+	if (err) {
+		LOG_ERR("Unknown error during sidewalk start! %d", err);
+		application_state_error(&global_state_notifier, true);
+		return -1;
+	}
+
+	return 0;
+}
+
+static int app_init_sid(app_ctx_t *app_ctx)
+{
+	sid_error_t err = sid_init(&app_ctx->config, &app_ctx->handle);
+
+	switch (err) {
+	case SID_ERROR_NONE: break;
+	case SID_ERROR_ALREADY_INITIALIZED: LOG_WRN("Sidewalk already initialized!"); break;
+	default: LOG_ERR("Unknown error during sidewalk initialization!");
+		application_state_error(&global_state_notifier, true);
+		return -1;
+	}
+	return 0;
+}
+
+static void sidewalk_app_entry(void *ctx, void *unused, void *unused2)
+{
+	ARG_UNUSED(unused);
+	ARG_UNUSED(unused2);
+	app_ctx_t *application_ctx = (app_ctx_t *)ctx;
+
+	if (application_pal_init()) {
+		LOG_ERR("Failed to initialze PAL layer for sidewalk applicaiton.");
+		application_state_error(&global_state_notifier, true);
+		return;
+	}
+
+	sid_error_t err = sid_init(&application_ctx->config, &application_ctx->handle);
+
+	switch (err) {
+	case SID_ERROR_NONE: break;
+	case SID_ERROR_ALREADY_INITIALIZED: LOG_WRN("Sidewalk already initialized!"); break;
+	default: LOG_ERR("Unknown error during sidewalk initialization!");
+		application_state_error(&global_state_notifier, true);
+		return;
+	}
+
+	err = sid_start(application_ctx->handle, BUILT_IN_LM);
+	if (err) {
+		LOG_ERR("Unknown error during sidewalk start!");
+		application_state_error(&global_state_notifier, true);
+		return;
+	}
+#if defined(CONFIG_SIDEWALK_CLI)
+	CLI_init(application_ctx->handle, &application_ctx->config);
+#endif
+#if defined(CONFIG_LR1110_CLI)
+	LR1110_CLI_init(application_ctx->handle);
+#endif
+	application_state_connected(&global_state_notifier, false);
+	application_state_working(&global_state_notifier, true);
+	while (true) {
+		app_event_t event = SIDEWALK_EVENT;
+
+		if (!k_msgq_get(&application_thread_msgq, &event, K_FOREVER)) {
+			switch (event) {
+			case SIDEWALK_EVENT: err = sid_process(application_ctx->handle); if (err) {
+					LOG_WRN("sid_process returned %d", err);
+			}
+				break;
+			case BUTTON_EVENT_SEND_HELLO: button_event_send_hello(application_ctx); break;
+			case BUTTON_EVENT_SET_BATTERY_LEVEL: button_event_set_battery(application_ctx); break;
+			case BUTTON_EVENT_FSK_MODE: button_event_fsk_mode(application_ctx); break;
+			case BUTTON_EVENT_LORA_MODE: button_event_lora_mode(application_ctx); break;
+			case BUTTON_EVENT_FACTORY_RESET: button_event_factory_reset(application_ctx); break;
+			case BUTTON_EVENT_GET_DEVICE_PROFILE: button_event_get_profile(application_ctx); break;
+			case BUTTON_EVENT_SET_DEVICE_PROFILE: button_event_set_ptofile(application_ctx); break;
+
+			#if defined(CONFIG_SIDEWALK_DFU)
+			case BUTTON_EVENT_NORDIC_DFU: button_event_DFU(application_ctx); break;
+			#endif
+			case EVENT_TO_FSK:
+				LOG_INF("EVENT_TO_FSK");
+				application_ctx->config.link_mask = SID_LINK_TYPE_2;
+				if (app_init_sid(application_ctx) == 0) {
+					app_start_sid(application_ctx);
+				}
+				break;
+			case EVENT_TO_LORA:
+				LOG_INF("EVENT_TO_LORA");
+				application_ctx->config.link_mask = SID_LINK_TYPE_3;
+				if (app_init_sid(application_ctx) == 0) {
+					app_start_sid(application_ctx);
+				}
+				break;
+			case EVENT_SCAN_RESULT_SEND:
+				send_scan_result(application_ctx);
+				break;
+			case EVENT_SCAN_INTERVAL_INCR:
+				button_event_incr_scan_interval(application_ctx);
+				break;
+			case EVENT_SID_INIT:
+				LOG_INF("EVENT_SID_INIT");
+				app_init_sid(application_ctx);
+				break;
+			case EVENT_WIFI_SCAN:
+				scan_wifi(application_ctx);
+				break;
+			default:
+				LOG_ERR("Invalid Event received!");
+			}
+		}
+	}
+	application_state_working(&global_state_notifier, false);
+}
+
+void app_event_send(app_event_t event)
+{
+	int ret = k_msgq_put(&application_thread_msgq, (void *)&event, k_is_in_isr() ? K_NO_WAIT : K_FOREVER);
+
+	if (ret) {
+		LOG_ERR("Failed to send event to application thread. err: %d", ret);
+	}
+}
+
+sid_error_t app_thread_init(app_ctx_t *ctx)
+{
+	if (!ctx) {
+		return SID_ERROR_NULL_POINTER;
+	}
+	(void)k_thread_create(&application_thread, application_thread_stack,
+				K_THREAD_STACK_SIZEOF(application_thread_stack),
+				sidewalk_app_entry, ctx, NULL, NULL,
+				CONFIG_SIDEWALK_THREAD_PRIORITY, 0, K_NO_WAIT);
+	k_thread_name_set(&application_thread, "sidewalk_thread");
+
+	return SID_ERROR_NONE;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/src/board_events.c gitlab_sidewalk/samples/wifi_lr1110/src/board_events.c
--- sidewalk/samples/wifi_lr1110/src/board_events.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/src/board_events.c	2023-11-07 13:42:55.703974745 -0800
@@ -0,0 +1,260 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <stdio.h>
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_900_cfg.h>
+
+#include <state_notifier.h>
+#include <board_events.h>
+#ifdef LR11xx
+#include <halo_lr11xx_radio.h>
+#endif /* LR11xx */
+
+#if defined(CONFIG_SIDEWALK_DFU)
+#include <nordic_dfu.h>
+#endif
+
+#include <zephyr/logging/log.h>
+
+LOG_MODULE_REGISTER(board_events, CONFIG_SIDEWALK_LOG_LEVEL);
+
+#if defined(CONFIG_SIDEWALK_LINK_MASK_FSK)
+static struct sid_device_profile profile_light = {
+	.unicast_params.device_profile_id = SID_LINK2_PROFILE_1,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_INFINITE,
+	.unicast_params.unicast_window_interval.sync_rx_interval_ms = SID_LINK2_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_fast = {
+	.unicast_params.device_profile_id = SID_LINK2_PROFILE_2,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_INFINITE,
+	.unicast_params.unicast_window_interval.sync_rx_interval_ms = SID_LINK2_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_from_dev = {
+	.unicast_params.device_profile_id = SID_LINK2_PROFILE_1
+};
+#elif defined(CONFIG_SIDEWALK_LINK_MASK_LORA)
+static struct sid_device_profile profile_light = {
+	.unicast_params.device_profile_id = SID_LINK3_PROFILE_A,
+	.unicast_params.rx_window_count =  SID_RX_WINDOW_CNT_2,
+	.unicast_params.unicast_window_interval.async_rx_interval_ms = SID_LINK3_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_fast = {
+	.unicast_params.device_profile_id = SID_LINK3_PROFILE_B,
+	.unicast_params.rx_window_count = SID_RX_WINDOW_CNT_INFINITE,
+	.unicast_params.unicast_window_interval.async_rx_interval_ms = SID_LINK3_RX_WINDOW_SEPARATION_3,
+	.unicast_params.wakeup_type = SID_TX_AND_RX_WAKEUP,
+};
+
+static struct sid_device_profile profile_from_dev = {
+	.unicast_params.device_profile_id = SID_LINK3_PROFILE_A
+};
+#endif
+
+void button_event_incr_scan_interval(app_ctx_t *application_ctx)
+{
+	char str[17];
+	auto_scan_interval += 60;
+	if (auto_scan_interval > 600)
+		auto_scan_interval = 60;
+	sprintf(str, "gnss %u sec     ", auto_scan_interval);
+	gnss_scan_timer_set(auto_scan_interval);
+}
+
+void button_event_send_hello(app_ctx_t *application_ctx)
+{
+	struct sid_status status = { .state = SID_STATE_NOT_READY };
+	sid_error_t err;
+
+	static uint8_t counter = 0;
+	static struct sid_msg msg;
+	static struct sid_msg_desc desc;
+
+	err = sid_get_status(application_ctx->handle, &status);
+	switch (err) {
+	case SID_ERROR_NONE: break;
+	case SID_ERROR_INVALID_ARGS: LOG_ERR("Sidewalk library is not initialzied!"); return;
+	default: LOG_ERR("Unknown error during sid_get_status() -> %d", err);
+		return;
+	}
+
+	if (status.state != SID_STATE_READY && status.state != SID_STATE_SECURE_CHANNEL_READY) {
+		LOG_ERR(
+			"Sidewalk Status is invalid!, expected SID_STATE_READY or SID_STATE_SECURE_CHANNEL_READY, got %d",
+			status.state);
+		return;
+	}
+
+	msg = (struct sid_msg){ .data = (uint8_t *)&counter, .size = sizeof(uint8_t) };
+	desc = (struct sid_msg_desc){
+		.type = SID_MSG_TYPE_NOTIFY,
+		.link_type = SID_LINK_TYPE_ANY,
+		.link_mode = SID_LINK_MODE_CLOUD,
+	};
+
+	desc.msg_desc_attr.tx_attr.request_ack = 1;
+	desc.msg_desc_attr.tx_attr.num_retries = 1;
+	desc.msg_desc_attr.tx_attr.ttl_in_seconds = 30;
+
+	err = sid_put_msg(application_ctx->handle, &msg, &desc);
+	switch (err) {
+	case SID_ERROR_NONE: {
+		application_state_sending(&global_state_notifier, true);
+		counter++;
+		LOG_INF("queued data message id:%d", desc.id);
+		break;
+	}
+	case SID_ERROR_TRY_AGAIN: {
+		LOG_ERR("there is no space in the transmit queue, Try again.");
+		break;
+	}
+	default: LOG_ERR("Unknown error returned from sid_put_msg() -> %d", err);
+	}
+}
+
+void button_event_set_battery(app_ctx_t *application_ctx)
+{
+	static uint8_t fake_bat_lev = 70;
+
+	++fake_bat_lev;
+	if (fake_bat_lev > 100) {
+		fake_bat_lev = 0;
+	}
+	sid_error_t ret = sid_option(application_ctx->handle, SID_OPTION_BLE_BATTERY_LEVEL,
+				&fake_bat_lev, sizeof(fake_bat_lev));
+
+	if (SID_ERROR_NONE != ret) {
+		LOG_ERR("failed setting Sidewalk option!");
+	} else {
+		LOG_DBG("set battery level to %d", fake_bat_lev);
+	}
+}
+
+#if defined(CONFIG_SIDEWALK_DFU)
+void button_event_DFU(app_ctx_t *application_ctx)
+{
+	sid_error_t err = sid_deinit(application_ctx->handle);
+
+	if (err != SID_ERROR_NONE) {
+		LOG_ERR("Failed to deinitialize sidewalk! sid_deinit returned %d", err);
+		return;
+	}
+
+	application_ctx->handle = NULL;
+
+	int ret = nordic_dfu_ble_start();
+
+	if (ret) {
+		LOG_ERR("DFU SMP start error (code %d)", ret);
+	}
+	application_state_dfu(&global_state_notifier, true);
+}
+
+#endif
+
+void button_event_lora_mode(app_ctx_t *application_ctx)
+{
+	if (application_ctx->config.link_mask == SID_LINK_TYPE_3) {
+		LOG_INF("already in LoRa");
+		return;
+	}
+
+	sid_error_t err = sid_deinit(application_ctx->handle);
+
+	if (err != SID_ERROR_NONE) {
+		LOG_ERR("Failed to deinitialize sidewalk! sid_deinit returned %d", err);
+	} else {
+		LOG_INF("to_lora sid_deinit ok");
+		app_event_send(EVENT_TO_LORA);
+	}
+}
+
+void button_event_fsk_mode(app_ctx_t *application_ctx)
+{
+	if (application_ctx->config.link_mask == SID_LINK_TYPE_2) {
+		LOG_INF("already in FSK");
+		return;
+	}
+
+	sid_error_t err = sid_deinit(application_ctx->handle);
+
+	if (err != SID_ERROR_NONE) {
+		LOG_ERR("Failed to deinitialize sidewalk! sid_deinit returned %d", err);
+	} else {
+		LOG_INF("to_fsk sid_deinit ok");
+		app_event_send(EVENT_TO_FSK);
+	}
+}
+
+void button_event_factory_reset(app_ctx_t *application_ctx)
+{
+	sid_error_t ret = sid_set_factory_reset(application_ctx->handle);
+
+	if (SID_ERROR_NONE != ret) {
+		LOG_ERR("Notification of factory reset to sid api failed!");
+	} else {
+		LOG_DBG("Wait for Sid api to notify to proceed with factory reset!");
+	}
+}
+
+void button_event_get_profile(app_ctx_t *application_ctx)
+{
+	sid_error_t ret = sid_option(application_ctx->handle, SID_OPTION_900MHZ_GET_DEVICE_PROFILE,
+					&profile_from_dev, sizeof(profile_from_dev));
+
+	if (ret) {
+		LOG_ERR("Profile get failed (err %d)", ret);
+		return;
+	}
+
+	LOG_INF("\n"			   \
+		"Profile id 0x%x\n"	   \
+		"Profile dl count %d\n"	   \
+		"Profile dl interval %d\n" \
+		"Profile wakeup %d\n",
+		profile_from_dev.unicast_params.device_profile_id,
+		profile_from_dev.unicast_params.rx_window_count,
+		profile_from_dev.unicast_params.unicast_window_interval.async_rx_interval_ms,
+		profile_from_dev.unicast_params.wakeup_type);
+}
+
+void button_event_set_ptofile(app_ctx_t *application_ctx)
+{
+	static struct sid_device_profile *new_profile = &profile_light;
+
+	LOG_INF("Profile set %s", (&profile_light == new_profile) ? "light" : "fast");
+
+	sid_error_t ret = sid_option(application_ctx->handle, SID_OPTION_900MHZ_SET_DEVICE_PROFILE, new_profile,
+					sizeof(*new_profile));
+
+	if (!ret) {
+		new_profile = (&profile_light == new_profile) ? &profile_fast : &profile_light;
+		LOG_INF("Profile set success.");
+	} else {
+		LOG_ERR("Profile set failed (err %d)", ret);
+	}
+}
+
+void app_event_send_standby() { }
+void app_event_send_sleep() { }
+void app_event_send_wake() { }
+
+void app_event_send_sid_init()
+{
+	app_event_send(EVENT_SID_INIT);
+}
+
+void app_event_wifi_scan()
+{
+	app_event_send(EVENT_WIFI_SCAN);
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/src/fragment.c gitlab_sidewalk/samples/wifi_lr1110/src/fragment.c
--- sidewalk/samples/wifi_lr1110/src/fragment.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/src/fragment.c	2023-11-07 14:30:42.886785866 -0800
@@ -0,0 +1,123 @@
+/*!
+ * @file      fragment.c
+ *
+ * @brief     packet fragmentation over sidewalk
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <application_thread.h>
+#include <string.h>
+#include <state_notifier.h>
+#include <zephyr/logging/log.h>
+
+LOG_MODULE_REGISTER(fragment, CONFIG_SIDEWALK_LOG_LEVEL);
+
+void send_scan_result(void *context)
+{
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+	sid_error_t err;
+	static struct sid_msg msg;
+	static struct sid_msg_desc desc;
+	static uint8_t dummy[258];
+	uint8_t remaining = app_ctx->frag.total_bytes - app_ctx->frag.index;
+	uint8_t this_length = remaining;
+	uint8_t byte_per_fragment = app_ctx->frag.mtu - 1;
+
+#ifdef GNSS_DEBUG
+	LOG_INF("send_scan_result index:%d total:%d cur_frag:%d mtu=%d", app_ctx->frag.index, app_ctx->frag.total_bytes, app_ctx->frag.current_fragment, app_ctx->frag.mtu);
+#endif /* GNSS_DEBUG */
+
+	if (this_length > byte_per_fragment)
+		this_length = byte_per_fragment;
+
+	app_ctx->frag.nbytes_sent_this_fragment = this_length;
+
+	dummy[0] = app_ctx->frag.current_fragment & 7;
+	dummy[0] |= (app_ctx->frag.total_fragments & 7) << 3;
+	dummy[0] |= (app_ctx->frag.frag_type & 3) << 6;
+	memcpy(dummy+1, app_ctx->frag.buffer + app_ctx->frag.index, this_length);
+
+#ifdef GNSS_DEBUG
+	LOG_HEXDUMP_INF(dummy, this_length+1, "fragment");
+#endif /* GNSS_DEBUG */
+	msg = (struct sid_msg){ .data = dummy, .size = this_length+1};
+	desc = (struct sid_msg_desc){
+		.type = SID_MSG_TYPE_NOTIFY,
+		.link_type = SID_LINK_TYPE_ANY,
+		.link_mode = SID_LINK_MODE_CLOUD,
+	};
+
+	err = sid_put_msg(app_ctx->handle, &msg, &desc);
+	switch (err) {
+	case SID_ERROR_NONE: {
+		application_state_sending(&global_state_notifier, true);
+		LOG_INF("queued data message id:%d", desc.id);
+		break;
+	}
+	case SID_ERROR_TRY_AGAIN: {
+		LOG_ERR("there is no space in the transmit queue, Try again.");
+		break;
+	}
+	default: LOG_ERR("Unknown error returned from sid_put_msg() -> %d", err);
+	}
+}
+
+void fragment_msg_sent(void *context)
+{
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+
+	if (app_ctx->frag.total_fragments > 0) {
+		/* done sending gnss fragment */
+		app_ctx->frag.index += app_ctx->frag.nbytes_sent_this_fragment;
+		if (++app_ctx->frag.current_fragment < app_ctx->frag.total_fragments) {
+			/* send next fragment */
+			app_event_send(EVENT_SCAN_RESULT_SEND);
+		} else {
+			if (app_ctx->frag.index != app_ctx->frag.total_bytes)
+				LOG_ERR("incorrect send completion count (%d %d)", app_ctx->frag.index, app_ctx->frag.total_bytes);
+			else
+				LOG_INF("done sending fragments (%u %u)", app_ctx->frag.index, app_ctx->frag.total_bytes);
+			app_ctx->frag.total_fragments = 0;	// indicate done sending
+			app_ctx->frag.current_fragment = 0;
+		}
+	}
+}
+
+void fragment_send_error(void *context)
+{
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+
+	if (app_ctx->frag.total_fragments > 0) {
+		/* TODO: reproduce this failure and then implement sending retry */
+		LOG_ERR("aborting fragment-send");
+		app_ctx->frag.total_fragments = 0;	// indicate done sending
+		app_ctx->frag.current_fragment = 0;
+	}
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/src/main.c gitlab_sidewalk/samples/wifi_lr1110/src/main.c
--- sidewalk/samples/wifi_lr1110/src/main.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/src/main.c	2023-11-07 14:30:52.887004803 -0800
@@ -0,0 +1,154 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <math.h>
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_pal_assert_ifc.h>
+#include <app_ble_config.h>
+#include <app_subGHz_config.h>
+
+#include <stdbool.h>
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+#include <dk_buttons_and_leds.h>
+#include <sidewalk_version.h>
+#if defined(CONFIG_BOOTLOADER_MCUBOOT)
+#include <zephyr/dfu/mcuboot.h>
+#endif
+#if defined(CONFIG_SIDEWALK_DFU_SERVICE_USB)
+#include <zephyr/usb/usb_device.h>
+#endif
+#if defined(CONFIG_GPIO)
+#include <state_notifier_gpio_backend.h>
+#endif
+#if defined(CONFIG_LOG)
+#include <state_notifier_log_backend.h>
+#endif
+
+#include <pal_init.h>
+#include <buttons.h>
+#include <application_thread.h>
+#include <sidewalk_callbacks.h>
+#include <halo_lr11xx_radio.h>
+
+LOG_MODULE_REGISTER(main, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static void scan_timer_cb(struct k_timer *);
+K_TIMER_DEFINE(scan_timer, scan_timer_cb, NULL);
+
+static app_ctx_t app_context;
+void *gnss_scan_done_context = &app_context;
+void *wifi_scan_done_context = &app_context;
+unsigned auto_scan_interval;
+
+lr11xx_gnss_solver_assistance_position_t assistance_position = { 0, 0 };
+
+static void scan_timer_cb(struct k_timer *timer_id)
+{
+	app_event_send(EVENT_WIFI_SCAN);
+}
+
+unsigned gnss_scan_timer_get()
+{
+	return k_ticks_to_ms_floor32(scan_timer.period.ticks) / MSEC_PER_SEC;
+}
+
+int gnss_scan_timer_set(unsigned sec)
+{
+	if (sec == 0) {
+		k_timer_stop(&scan_timer);
+		LOG_INF("timer stopped");
+	} else {
+		k_timer_start(&scan_timer, Z_TIMEOUT_NO_WAIT, K_SECONDS(sec));
+	}
+	return 0;
+}
+
+static void button_handler(uint32_t event)
+{
+	app_event_send((app_event_t) event);
+}
+
+static sid_error_t app_buttons_init(btn_handler_t handler)
+{
+	button_set_action_short_press(DK_BTN1, handler, BUTTON_EVENT_FSK_MODE);
+	button_set_action_long_press(DK_BTN1, handler, BUTTON_EVENT_FACTORY_RESET);
+	button_set_action_short_press(DK_BTN2, handler, BUTTON_EVENT_GET_DEVICE_PROFILE);
+	button_set_action_long_press(DK_BTN2, handler, BUTTON_EVENT_SET_DEVICE_PROFILE);
+	button_set_action_short_press(DK_BTN3, handler, BUTTON_EVENT_SEND_HELLO);
+	button_set_action_short_press(DK_BTN4, handler, BUTTON_EVENT_LORA_MODE);
+	#if defined(CONFIG_SIDEWALK_DFU)
+	button_set_action_long_press(DK_BTN4, handler, BUTTON_EVENT_NORDIC_DFU);
+	#endif
+
+	return buttons_init() ? SID_ERROR_GENERIC : SID_ERROR_NONE;
+}
+
+static void app_setup(void)
+{
+	if (app_buttons_init(button_handler)) {
+		LOG_ERR("Failed to initialze buttons.");
+		SID_PAL_ASSERT(false);
+	}
+
+	if (dk_leds_init()) {
+		LOG_ERR("Failed to initialze LEDs.");
+		SID_PAL_ASSERT(false);
+	}
+	#if defined(CONFIG_GPIO)
+	state_watch_init_gpio(&global_state_notifier);
+	#endif
+	#if defined(CONFIG_LOG)
+	state_watch_init_log(&global_state_notifier);
+	#endif
+
+	#if defined(CONFIG_SIDEWALK_DFU_SERVICE_USB)
+	if (usb_enable(NULL)) {
+		LOG_ERR("Failed to enable USB");
+		return;
+	}
+	#endif
+
+	if (sidewalk_callbacks_set(&app_context, &app_context.event_callbacks)) {
+		LOG_ERR("Failed to set sidewalk callbacks");
+		SID_PAL_ASSERT(false);
+	}
+
+	app_context.config = (struct sid_config) {
+		.link_mask = BUILT_IN_LM,
+		.time_sync_periodicity_seconds = 7200,
+		.callbacks = &app_context.event_callbacks,
+		.link_config = app_get_ble_config(),
+		.sub_ghz_link_config = app_get_sub_ghz_config(),
+	};
+
+	#if defined(CONFIG_BOOTLOADER_MCUBOOT)
+	if (!boot_is_img_confirmed()) {
+		int ret = boot_write_img_confirmed();
+
+		if (ret) {
+			LOG_ERR("Couldn't confirm image: %d", ret);
+		} else {
+			LOG_INF("Marked image as OK");
+		}
+	}
+	#endif
+}
+
+int main()
+{
+	PRINT_SIDEWALK_VERSION();
+
+	app_setup();
+
+	if (app_thread_init(&app_context)) {
+		LOG_ERR("Failed to start Sidewalk thread");
+	}
+
+	auto_scan_interval = DEFAULT_AUTO_SCAN_INTERVAL;
+	return 0;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/src/sidewalk_callbacks.c gitlab_sidewalk/samples/wifi_lr1110/src/sidewalk_callbacks.c
--- sidewalk/samples/wifi_lr1110/src/sidewalk_callbacks.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/src/sidewalk_callbacks.c	2023-11-07 14:12:45.822711903 -0800
@@ -0,0 +1,187 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#include <stdio.h>
+#include <sid_api.h>
+#include <sid_error.h>
+#include <sid_hal_reset_ifc.h>
+#include <sid_clock_ifc.h>
+#include <sid_time_ops.h>
+
+#include <state_notifier.h>
+#if defined(CONFIG_SIDEWALK_CLI)
+#include <sid_shell.h>
+#endif
+
+#include <application_thread.h>
+
+#include <zephyr/logging/log.h>
+
+LOG_MODULE_REGISTER(callbacks, CONFIG_SIDEWALK_LOG_LEVEL);
+
+static const uint8_t *status_name[] = {
+	"ready", "not ready", "Error", "secure channel ready"
+};
+
+static const uint8_t *link_mode_idx_name[] = {
+	"ble", "fsk", "lora"
+};
+
+static void on_sidewalk_event(bool in_isr, void *context)
+{
+	LOG_DBG("on event, from %s, context %p", in_isr ? "ISR" : "App", context);
+	app_event_send(SIDEWALK_EVENT);
+}
+
+static void on_sidewalk_msg_received(const struct sid_msg_desc *msg_desc, const struct sid_msg *msg, void *context)
+{
+	char lcd_str[17];
+	#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_message_received(msg_desc->id);
+	#endif
+	application_state_receiving(&global_state_notifier, true);
+	application_state_receiving(&global_state_notifier, false);
+	LOG_INF("received message(type: %d, link_mode: %d, id: %u size %u) rssi:%d snr:%d", (int)msg_desc->type,
+		(int)msg_desc->link_mode, msg_desc->id, msg->size,
+		msg_desc->msg_desc_attr.rx_attr.rssi,
+		msg_desc->msg_desc_attr.rx_attr.snr);
+	LOG_HEXDUMP_INF((uint8_t *)msg->data, msg->size, "Message data: ");
+
+	if (msg_desc->link_type == SID_LINK_TYPE_2) {
+		sprintf(lcd_str, "%ddBm       ", msg_desc->msg_desc_attr.rx_attr.rssi);
+	} else if (msg_desc->link_type >= SID_LINK_TYPE_3) {
+		sprintf(lcd_str, "%ddBm snr:%d",
+			msg_desc->msg_desc_attr.rx_attr.rssi,
+			msg_desc->msg_desc_attr.rx_attr.snr
+		);
+	}
+}
+
+static void on_sidewalk_msg_sent(const struct sid_msg_desc *msg_desc, void *context)
+{
+	application_state_sending(&global_state_notifier, false);
+	#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_message_send();
+	#endif
+	LOG_INF("sent message(type: %d, id: %u)", (int)msg_desc->type, msg_desc->id);
+
+	fragment_msg_sent(context);
+}
+
+static void on_sidewalk_send_error(sid_error_t error, const struct sid_msg_desc *msg_desc, void *context)
+{
+	char lcd_str[17];
+	application_state_sending(&global_state_notifier, false);
+	#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_message_not_send();
+	#endif
+	LOG_ERR("failed to send message(type: %d, id: %u), err:%d", (int)msg_desc->type, msg_desc->id, (int)error);
+
+	if (error == SID_ERROR_TIMEOUT)
+		strcpy(lcd_str, "  timeout     ");
+	else if (error == SID_ERROR_GENERIC)
+		strcpy(lcd_str, " ERROR_GENERIC  ");
+	else
+		sprintf(lcd_str, " sendFAIL %d", error);
+
+	fragment_send_error(context);
+}
+
+static void on_sidewalk_status_changed(const struct sid_status *status, void *context)
+{
+	static struct sid_timespec nReady_time = { 0xffffffff, 0xffffffff };
+	struct sid_timespec curr_time;
+	char lcd_str[17];
+	LOG_INF("status changed: %s", status_name[status->state]);
+
+	app_ctx_t *app_ctx = (app_ctx_t *)context;
+
+#ifdef CONFIG_SIDEWALK_CLI
+	CLI_register_sid_status(status);
+#endif
+	switch (status->state) {
+	case SID_STATE_READY:
+		application_state_connected(&global_state_notifier, true);
+		sid_error_t err = sid_get_mtu(app_ctx->handle, BUILT_IN_LM, &app_ctx->frag.mtu);
+		if (err != SID_ERROR_NONE)
+			LOG_ERR("%d = sid_get_mtu()", err);
+		err = sid_clock_now(SID_CLOCK_SOURCE_UPTIME, &curr_time, NULL);
+		if (err != SID_ERROR_NONE) {
+			LOG_ERR("%d = sid_clock_now()", err);
+		} else {
+			sid_time_sub(&curr_time, &nReady_time);
+			LOG_INF("was not-ready for %d sec", curr_time.tv_sec);
+		}
+		gnss_scan_timer_set(DEFAULT_AUTO_SCAN_INTERVAL);
+		break;
+	case SID_STATE_NOT_READY:
+		application_state_connected(&global_state_notifier, false);
+		gnss_scan_timer_set(0);
+		err = sid_clock_now(SID_CLOCK_SOURCE_UPTIME, &nReady_time, NULL);
+		if (err != SID_ERROR_NONE)
+			LOG_ERR("%d = sid_clock_now()", err);
+		app_ctx->frag.total_fragments = 0; // abort scan-result sending
+		break;
+	case SID_STATE_ERROR:
+		LOG_ERR("Sidewalk error: %d", (int)sid_get_error(app_ctx->handle));
+		break;
+	case SID_STATE_SECURE_CHANNEL_READY:
+		break;
+	}
+
+	application_state_registered(&global_state_notifier,
+				status->detail.registration_status == SID_STATUS_REGISTERED);
+	application_state_time_sync(&global_state_notifier, status->detail.time_sync_status == SID_STATUS_TIME_SYNCED);
+	application_state_link(&global_state_notifier, !!(status->detail.link_status_mask));
+
+	LOG_INF("Device %sregistered, Time Sync %s, Link status: {BLE: %s, FSK: %s, LoRa: %s}",
+		(SID_STATUS_REGISTERED == status->detail.registration_status) ? "Is " : "Un",
+		(SID_STATUS_TIME_SYNCED == status->detail.time_sync_status) ? "Success" : "Fail",
+		(status->detail.link_status_mask & SID_LINK_TYPE_1) ? "Up" : "Down",
+		(status->detail.link_status_mask & SID_LINK_TYPE_2) ? "Up" : "Down",
+		(status->detail.link_status_mask & SID_LINK_TYPE_3) ? "Up" : "Down");
+
+	if (status->detail.link_status_mask & SID_LINK_TYPE_2)
+		strcpy(lcd_str, "FSK ");
+	else if (status->detail.link_status_mask & SID_LINK_TYPE_3)
+		strcpy(lcd_str, "LoRa");
+
+	for (int i = 0; i < SID_LINK_TYPE_MAX_IDX; i++) {
+		enum sid_link_mode mode = (enum sid_link_mode)status->detail.supported_link_modes[i];
+
+		if (mode) {
+			LOG_INF("Link mode on %s = {Cloud: %s, Mobile: %s}", link_mode_idx_name[i],
+				(mode & SID_LINK_MODE_CLOUD) ? "True" : "False",
+				(mode & SID_LINK_MODE_MOBILE) ? "True" : "False");
+		}
+	}
+}
+
+static void on_sidewalk_factory_reset(void *context)
+{
+	ARG_UNUSED(context);
+
+	LOG_INF("factory reset notification received from sid api");
+	if (sid_hal_reset(SID_HAL_RESET_NORMAL)) {
+		LOG_WRN("Reboot type not supported");
+	}
+}
+
+sid_error_t sidewalk_callbacks_set(void *context, struct sid_event_callbacks *callbacks)
+{
+	if (!callbacks) {
+		return SID_ERROR_INVALID_ARGS;
+	}
+	callbacks->context = context;
+	callbacks->on_event = on_sidewalk_event;
+	callbacks->on_msg_received = on_sidewalk_msg_received;		/* Called from sid_process() */
+	callbacks->on_msg_sent = on_sidewalk_msg_sent;				/* Called from sid_process() */
+	callbacks->on_send_error = on_sidewalk_send_error;			/* Called from sid_process() */
+	callbacks->on_status_changed = on_sidewalk_status_changed;	/* Called from sid_process() */
+	callbacks->on_factory_reset = on_sidewalk_factory_reset;	/* Called from sid_process() */
+
+	return SID_ERROR_NONE;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/src/wifi.c gitlab_sidewalk/samples/wifi_lr1110/src/wifi.c
--- sidewalk/samples/wifi_lr1110/src/wifi.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/src/wifi.c	2023-11-07 14:31:43.196105695 -0800
@@ -0,0 +1,300 @@
+/*!
+ * @file      main.c
+ *
+ * @brief     application layer of LR11xx wifi scan and send
+ *
+ * The Clear BSD License
+ * Copyright Semtech Corporation 2022. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted (subject to the limitations in the disclaimer
+ * below) provided that the following conditions are met:
+ *     * Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *     * Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *     * Neither the name of the Semtech corporation nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY
+ * THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
+ * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SEMTECH CORPORATION BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <math.h>
+#include <stdbool.h>
+#include <zephyr/kernel.h>
+#include <zephyr/logging/log.h>
+#include <halo_lr11xx_radio.h>
+#include <application_thread.h>
+
+/* often one of the access points received is a mobile-AP, so get the max +1 */
+#define WIFI_MAX_RESULTS ( 6 )
+
+/**
+ * @brief Minimal number of detected access point in a scan result to consider the scan valid
+ */
+#define WIFI_SCAN_NB_AP_MIN ( 3 )
+
+/**
+ * @brief Size in bytes of the payload tag to indicate frame format (as defined by LR1110 WiFi positioning protocol of
+ * LoRaCloud)
+ */
+
+#define WIFI_TAG_SIZE ( 1 )
+/**
+ * @brief Size in bytes of a WiFi Access-Point address
+ */
+#define WIFI_AP_ADDRESS_SIZE ( 6 )
+
+/**
+ * @brief Size in bytes to store the RSSI of a detected WiFi Access-Point
+ */
+#define WIFI_AP_RSSI_SIZE ( 1 )
+
+/**
+ * @brief Wi-Fi payload format (as defined by LR1110 WiFi positioning protocol of LoRaCloud).
+ */
+typedef enum wifi_mw_payload_format_e
+{
+	WIFI_MW_PAYLOAD_MAC			= 0x00,  //!< Only the MAC addresses of the detected Access Points are sent
+	WIFI_MW_PAYLOAD_MAC_RSSI	= 0x01,  //!< Both MAC address and RSSI of detected Access Points are sent
+} wifi_mw_payload_format_t;
+
+/*!
+ * @brief Structure representing a single scan result
+ */
+typedef struct
+{
+	lr11xx_wifi_mac_address_t mac_address;	//!< MAC address of the Wi-Fi access point which has been detected
+	lr11xx_wifi_channel_t channel;		//!< Channel on which the access point has been detected
+	lr11xx_wifi_signal_type_result_t type;			//!< Type of Wi-Fi which has been detected
+	int8_t rssi;			//!< Strength of the detected signal
+} wifi_scan_single_result_t;
+
+/*!
+ * @brief Structure representing a collection of scan results
+ */
+typedef struct
+{
+	uint8_t nbr_results;					//!< Number of results
+	uint32_t power_consumption_uah;		//!< Power consumption to acquire this set of results
+	uint32_t timestamp;					//!< Timestamp at which the data set has been completed
+	wifi_scan_single_result_t results[WIFI_MAX_RESULTS];	//!< Buffer containing the results
+} wifi_scan_all_result_t;
+
+wifi_configuration_scan_t wifi_configuration = {
+	.signal_type			= LR11XX_WIFI_TYPE_SCAN_B,
+	.base.channel_mask		= 0x0421,
+	.scan_mode				= LR11XX_WIFI_SCAN_MODE_BEACON,
+	.base.max_result		= WIFI_MAX_RESULTS,
+	.nb_scan_per_channel	= 10,
+	.timeout_per_scan		= 90,
+	.abort_on_timeout		= true,
+};
+
+/*!
+ * @brief The format of the Wi-Fi scan results to be used.
+ */
+static wifi_mw_payload_format_t payload_format = WIFI_MW_PAYLOAD_MAC;
+
+/*!
+ * @brief The buffer containing results to be sent over the air
+ */
+static uint8_t wifi_result_buffer[WIFI_TAG_SIZE + ( ( WIFI_AP_RSSI_SIZE + WIFI_AP_ADDRESS_SIZE ) * WIFI_MAX_RESULTS )];
+
+static lr11xx_wifi_basic_complete_result_t wifi_results_mac_addr[WIFI_MAX_RESULTS];
+static wifi_scan_all_result_t wifi_results;
+
+LOG_MODULE_REGISTER(wifi, CONFIG_SIDEWALK_LOG_LEVEL);
+
+const char* lr11xx_wifi_signal_type_result_to_str(lr11xx_wifi_signal_type_result_t val)
+{
+	switch (val) {
+		case LR11XX_WIFI_TYPE_RESULT_B: return "LR11XX_WIFI_TYPE_RESULT_B";
+		case LR11XX_WIFI_TYPE_RESULT_G: return "LR11XX_WIFI_TYPE_RESULT_G";
+		case LR11XX_WIFI_TYPE_RESULT_N: return "LR11XX_WIFI_TYPE_RESULT_N";
+		default: return "unknown";
+	}
+}
+
+const char* lr11xx_wifi_frame_type_to_str( const lr11xx_wifi_frame_type_t value )
+{
+	switch (value) {
+		case LR11XX_WIFI_FRAME_TYPE_MANAGEMENT: return "management";
+		case LR11XX_WIFI_FRAME_TYPE_CONTROL: return "control";
+		case LR11XX_WIFI_FRAME_TYPE_DATA: return "data";
+		default: return "unknown";
+	}
+}
+
+int smtc_wifi_get_results(void *drv_ctx, wifi_scan_all_result_t* wifi_results)
+{
+	lr11xx_status_t status;
+	uint8_t nb_results;
+	uint8_t max_nb_results;
+	uint8_t result_index = 0;
+
+	status = lr11xx_wifi_get_nb_results(drv_ctx, &nb_results);
+	if (status != LR11XX_STATUS_OK) {
+		LOG_ERR("lr11xx_wifi_get_nb_results() fail");
+		return -1;
+	}
+	LOG_INF("nb_results %u", nb_results);
+
+	/* check if the array is big enough to hold all results */
+	max_nb_results = sizeof( wifi_results_mac_addr ) / sizeof( wifi_results_mac_addr[0] );
+	if (nb_results > max_nb_results)
+	{   
+		LOG_ERR("Wi-Fi scan result size exceeds %u (%u)", max_nb_results, nb_results);
+		return -1;
+	}
+
+	memset( wifi_results_mac_addr, 0, sizeof wifi_results_mac_addr );
+	status = lr11xx_wifi_read_basic_complete_results(drv_ctx, 0, nb_results, wifi_results_mac_addr);
+	if (status != LR11XX_STATUS_OK) {
+		LOG_ERR("lr11xx_wifi_read_basic_complete_results() fail");
+		return -1;
+	}
+
+	/* add scan to results */
+	for( uint8_t index = 0; index < nb_results; index++ )
+	{ 
+		const lr11xx_wifi_basic_complete_result_t* local_basic_result = &wifi_results_mac_addr[index];
+		lr11xx_wifi_channel_t		channel;
+		bool						rssi_validity;
+		lr11xx_wifi_mac_origin_t	mac_origin_estimation;
+
+		lr11xx_wifi_parse_channel_info( local_basic_result->channel_info_byte, &channel, &rssi_validity,
+							&mac_origin_estimation );
+
+		if( mac_origin_estimation != LR11XX_WIFI_ORIGIN_BEACON_MOBILE_AP )
+		{
+			wifi_results->results[result_index].channel = channel;
+
+			wifi_results->results[result_index].type =
+				lr11xx_wifi_extract_signal_type_from_data_rate_info( local_basic_result->data_rate_info_byte );
+
+			memcpy( wifi_results->results[result_index].mac_address, local_basic_result->mac_address,
+					LR11XX_WIFI_MAC_ADDRESS_LENGTH );
+
+			wifi_results->results[result_index].rssi = local_basic_result->rssi;
+			{
+				const uint8_t *mac = local_basic_result->mac_address;
+				LOG_INF("%u) ch%u %02x %02x %02x %02x %02x %02x %ddBm", index, channel, mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], local_basic_result->rssi);
+			}
+			wifi_results->nbr_results++;
+			result_index++;
+		} else
+			LOG_INF("%u) mobile-AP", index);
+	}
+
+	return 0;
+}
+
+static int wifi_mw_send_results(app_ctx_t *app_ctx)
+{
+	uint8_t wifi_buffer_size = 0;
+	/* Check if there are results to be sent */
+	if (wifi_results.nbr_results < WIFI_SCAN_NB_AP_MIN) {
+		LOG_WRN("only %u results", wifi_results.nbr_results);
+		return -1;
+	}
+	//LOG_INF("size wifi_result_buffer %u", sizeof(wifi_result_buffer));
+
+	if (app_ctx->frag.total_fragments > 0) {
+		LOG_WRN("already sending scan-result");
+		return -1;
+	}
+
+	/* Add the payload format tag */
+	wifi_result_buffer[wifi_buffer_size] = payload_format;
+	wifi_buffer_size += WIFI_TAG_SIZE;
+
+	/* Concatenate all results in send buffer */
+	for( uint8_t i = 0; i < wifi_results.nbr_results; i++ )
+	{
+		/* Copy Access Point RSSI address in result buffer (if requested) */
+		if( payload_format == WIFI_MW_PAYLOAD_MAC_RSSI )
+		{
+			wifi_result_buffer[wifi_buffer_size] = wifi_results.results[i].rssi;
+			wifi_buffer_size += WIFI_AP_RSSI_SIZE;
+		}
+		/* Copy Access Point MAC address in result buffer */
+		memcpy( &wifi_result_buffer[wifi_buffer_size], wifi_results.results[i].mac_address, WIFI_AP_ADDRESS_SIZE );
+		wifi_buffer_size += WIFI_AP_ADDRESS_SIZE;
+	}
+	LOG_HEXDUMP_INF(wifi_result_buffer, wifi_buffer_size, "wifi_result_buffer");
+
+	float total_fragments = wifi_buffer_size / (float)(app_ctx->frag.mtu-1);	// -1 space for header
+	app_ctx->frag.total_fragments = ceil(total_fragments);
+	LOG_INF("mtu %d, total fragments %u", app_ctx->frag.mtu, app_ctx->frag.total_fragments);
+	app_ctx->frag.index = 0;
+	app_ctx->frag.total_bytes = wifi_buffer_size;
+	app_ctx->frag.buffer = wifi_result_buffer;
+	app_ctx->frag.frag_type = FRAGMENT_TYPE_WIFI;
+	app_event_send(EVENT_SCAN_RESULT_SEND);
+
+	return 0;
+}
+
+void on_wifi_scan_done(void *arg)
+{
+	void *drv_ctx = lr11xx_get_drv_ctx();
+	memset( &wifi_results, 0, sizeof wifi_results );
+	int ret = smtc_wifi_get_results(drv_ctx, &wifi_results);
+	if (ret < 0) {
+		LOG_ERR("smtc_wifi_get_results() fail");
+		return;
+	}
+
+	wifi_mw_send_results(arg);
+}
+
+int scan_wifi(app_ctx_t *app_ctx)
+{
+	void *drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		LOG_ERR("scan_wifi wake-up fail");
+		return -1;
+	}
+
+#if defined(CONFIG_LR1110_CLI)
+	lr11xx_status_t status = lr11xx_wifi_scan(drv_ctx,
+		wifi_configuration.signal_type,
+		wifi_configuration.base.channel_mask,
+		wifi_configuration.scan_mode,
+		wifi_configuration.base.max_result,
+		wifi_configuration.nb_scan_per_channel,
+		wifi_configuration.timeout_per_scan,
+		wifi_configuration.abort_on_timeout
+	);
+#else
+	lr11xx_status_t status = lr11xx_wifi_scan(drv_ctx,
+		LR11XX_WIFI_TYPE_SCAN_B, /* const lr1110_wifi_signal_type_scan_t signal_type */
+		0x0421, /* const lr1110_wifi_channel_mask_t channels */
+		LR11XX_WIFI_SCAN_MODE_BEACON, /* const lr1110_wifi_mode_t scan_mode */
+		6, /* const uint8_t max_results */
+		10, /* const uint8_t nb_scan_per_channel */
+		90, /* const uint16_t timeout_in_ms */
+		true /* const bool abort_on_timeout */
+	);
+#endif
+	if (status != LR11XX_STATUS_OK) {
+		LOG_ERR("lr11xx_wifi_scan fail");
+		return -1;
+	} else
+		return 0;
+}
+
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/usb_dfu.conf gitlab_sidewalk/samples/wifi_lr1110/usb_dfu.conf
--- sidewalk/samples/wifi_lr1110/usb_dfu.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/usb_dfu.conf	2023-11-01 08:09:54.871151834 -0700
@@ -0,0 +1,13 @@
+#
+# Copyright (c) 2022 Nordic Semiconductor ASA
+#
+# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+#
+
+CONFIG_SIDEWALK_DFU_SERVICE_USB=y
+
+
+# Workaround for issue https://github.com/zephyrproject-rtos/zephyr/issues/53326
+# Waiting for fix in upstream https://github.com/zephyrproject-rtos/zephyr/pull/53414
+CONFIG_USB_DFU_WILL_DETACH=n
+
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/samples/wifi_lr1110/version.conf gitlab_sidewalk/samples/wifi_lr1110/version.conf
--- sidewalk/samples/wifi_lr1110/version.conf	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/samples/wifi_lr1110/version.conf	2023-11-09 10:37:24.137870470 -0800
@@ -0,0 +1 @@
+CONFIG_MCUBOOT_IMGTOOL_SIGN_VERSION="0.0.0+0"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/scripts/ci/memory_requirements.py gitlab_sidewalk/scripts/ci/memory_requirements.py
--- sidewalk/scripts/ci/memory_requirements.py	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/scripts/ci/memory_requirements.py	2023-11-01 08:09:54.871151834 -0700
@@ -64,8 +64,8 @@
 
 
 BOARDS = {
-    'nrf52840dk_nrf52840': ':ref:`nRF52840 DK <zephyr:nrf52840dk_nrf52840>`',
-    'nrf5340dk_nrf5340_cpuapp': ':ref:`nRF5340 DK <zephyr:nrf5340dk_nrf5340_cpuapp>`',
+    'nrf52840dk_nrf52840': '`nRF52840 DK`_',
+    'nrf5340dk_nrf5340_cpuapp': '`nRF5340 DK`_',
 }
 
 
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/config/common/CMakeLists.txt gitlab_sidewalk/subsys/config/common/CMakeLists.txt
--- sidewalk/subsys/config/common/CMakeLists.txt	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/subsys/config/common/CMakeLists.txt	2023-11-01 08:09:54.871151834 -0700
@@ -8,4 +8,17 @@
 
 zephyr_library_sources_ifdef(CONFIG_SIDEWALK src/app_ble_config.c)
 
-zephyr_library_sources_ifdef(CONFIG_SIDEWALK_SUBGHZ src/app_subGHz_config.c)
+if(DEFINED RADIO)
+	if(${RADIO} STREQUAL "LR1110" OR ${RADIO} STREQUAL "LR1121" OR ${RADIO} STREQUAL "LR11xx" OR ${RADIO} STREQUAL "LR1110_SRC" OR ${RADIO} STREQUAL "LR1121_SRC")
+        message("RADIO is LR1110 / LR1121")
+        zephyr_library_sources_ifdef(CONFIG_SIDEWALK_SUBGHZ src/app_subGHz_config_lr11xx.c)
+        zephyr_include_directories(../../../lib/lora_fsk/lr11xx/include/semtech)
+	elseif(${RADIO} STREQUAL "SX126x" OR ${RADIO} STREQUAL "SX126x_SRC")
+        zephyr_library_sources_ifdef(CONFIG_SIDEWALK_SUBGHZ src/app_subGHz_config.c)
+    else()
+        message(SEND_ERROR "RADIO ${RADIO}")
+    endif()
+else()
+    zephyr_library_sources_ifdef(CONFIG_SIDEWALK_SUBGHZ src/app_subGHz_config.c)
+endif()
+
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/config/common/include/app_subGHz_config.h gitlab_sidewalk/subsys/config/common/include/app_subGHz_config.h
--- sidewalk/subsys/config/common/include/app_subGHz_config.h	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/subsys/config/common/include/app_subGHz_config.h	2023-11-01 08:09:54.871151834 -0700
@@ -16,11 +16,19 @@
 #ifndef APP_900_CONFIG_H
 #define APP_900_CONFIG_H
 
-#include <sx126x_config.h>
+#if defined(LR11xx)
+	#include <lr11xx_config.h>
+#else
+	#include <sx126x_config.h>
+#endif
 #include <sid_pal_mfg_store_ifc.h>
 #include <sid_900_cfg.h>
 
+#ifdef LR11xx
+const radio_lr11xx_device_config_t *get_radio_cfg(void);
+#else
 const radio_sx126x_device_config_t *get_radio_cfg(void);
+#endif
 const sid_pal_mfg_store_region_t *get_mfg_cfg(void);
 const struct sid_sub_ghz_links_config *app_get_sub_ghz_config(void);
 #endif
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/config/common/src/app_subGHz_config.c gitlab_sidewalk/subsys/config/common/src/app_subGHz_config.c
--- sidewalk/subsys/config/common/src/app_subGHz_config.c	2023-11-09 11:04:08.276734895 -0800
+++ gitlab_sidewalk/subsys/config/common/src/app_subGHz_config.c	2023-11-01 08:09:54.871151834 -0700
@@ -156,6 +156,13 @@
 	radio_sx1262_cfg.gpio_tx_bypass = sid_gpio_utils_get_gpio_number_dt(
 			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_tx_bypass), gpios, INVALID_DT_GPIO));
 
+#ifdef SX126x /* sx126x built from source */
+	radio_sx1262_cfg.gpio_led_tx = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(radio_led_tx), gpios, INVALID_DT_GPIO));
+	radio_sx1262_cfg.gpio_led_rx = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(radio_led_rx), gpios, INVALID_DT_GPIO));
+#endif /* SX126x */
+
 	return &radio_sx1262_cfg;
 }
 
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/config/common/src/app_subGHz_config_lr11xx.c gitlab_sidewalk/subsys/config/common/src/app_subGHz_config_lr11xx.c
--- sidewalk/subsys/config/common/src/app_subGHz_config_lr11xx.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/subsys/config/common/src/app_subGHz_config_lr11xx.c	2023-11-02 09:43:55.823446961 -0700
@@ -0,0 +1,244 @@
+
+#include <zephyr/kernel.h>
+#include <zephyr/devicetree.h>
+#include <zephyr/drivers/gpio.h>
+
+#include <sid_pal_serial_bus_ifc.h>
+#include <sid_pal_serial_bus_spi_config.h>
+#include <sid_gpio_utils.h>
+
+#include <lr11xx_config.h>
+#include <app_subGHz_config.h>
+
+#define REGION_US915
+#define RADIO_REGION                                               RADIO_REGION_NA
+
+#define RADIO_LR11XX_MAX_TX_POWER                                  22
+#define RADIO_LR11XX_MIN_TX_POWER                                  -9
+
+#define RADIO_MAX_TX_POWER_NA                                      20
+#define RADIO_MAX_TX_POWER_EU                                      14
+#define RADIO_ANT_GAIN(X)                                          ((X) * 100)
+
+#define RADIO_LR11XX_SPI_BUFFER_SIZE                               255
+#define RADIO_RX_LNA_GAIN                                          0
+
+#define NULL_STRUCT_INITIALIZER                                    { 0 }
+#define INVALID_DT_GPIO                                            NULL_STRUCT_INITIALIZER
+
+extern uint32_t CLI_sleep_to_full_power_us;
+
+void on_gnss_scan_done(lr11xx_gnss_result_t *);	// implement in application
+void on_wifi_scan_done(void *);	// implement in application
+
+__weak void on_gnss_scan_done(lr11xx_gnss_result_t *result) {}
+__weak void on_wifi_scan_done(void *) {}
+
+__weak void *gnss_scan_done_context = NULL;
+__weak void *wifi_scan_done_context = NULL;
+
+static uint8_t radio_lr1110_buffer[RADIO_LR11XX_SPI_BUFFER_SIZE] = { 0 };
+
+const uint8_t pa_duty_cycles[] = {
+  //  -9,   -8,   -7,   -6,   -5,   -4,   -3,   -2,   -1,    0,    1,    2,    3,    4,    5,    6, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  //   7,    8,   9,    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22
+	0x00, 0x00, 0x00, 0x01, 0x02, 0x02, 0x04, 0x05, 0x07, 0x03, 0x04, 0x02, 0x05, 0x03, 0x04, 0x04
+};
+const uint8_t pa_hp_sels[] = {
+  //  -9,   -8,   -7,   -6,   -5,   -4,   -3,   -2,   -1,    0,    1,    2,    3,    4,    5,    6, 
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  //   7,    8,   9,    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,   20,   21,   22
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x05, 0x04, 0x07, 0x07, 0x07
+};
+const uint8_t powers[] = {
+  //  9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5,  6, 
+	 -6, -5, -4, -3, -2, -1,  0,  1,  2, 3, 3, 4, 7, 8, 9, 10,
+  // 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
+	12, 13, 14, 14, 13, 14, 14, 14, 14, 22, 22, 22, 22, 22, 21, 22
+};
+
+// <pre>src/smtc_shield_lr1110mb1dxs_common.c</pre>
+static int32_t radio_lr11xx_pa_cfg(int8_t tx_power, radio_lr11xx_pa_cfg_t *pa_cfg)
+{
+	int8_t pwr = tx_power;
+
+	if (tx_power > RADIO_LR11XX_MAX_TX_POWER) {
+		pwr = RADIO_LR11XX_MAX_TX_POWER;
+	}
+
+	if (tx_power < RADIO_LR11XX_MIN_TX_POWER) {
+		pwr = RADIO_LR11XX_MIN_TX_POWER;
+	}
+
+	if (pwr > 15) {
+		pa_cfg->pa_cfg.pa_reg_supply = LR11XX_RADIO_PA_REG_SUPPLY_VBAT;
+		pa_cfg->pa_cfg.pa_sel = LR11XX_RADIO_PA_SEL_HP;
+	} else {
+		pa_cfg->pa_cfg.pa_reg_supply = LR11XX_RADIO_PA_REG_SUPPLY_VREG;
+		pa_cfg->pa_cfg.pa_sel = LR11XX_RADIO_PA_SEL_LP;
+	}
+	pa_cfg->pa_cfg.pa_duty_cycle = pa_duty_cycles[pwr+9];
+	pa_cfg->pa_cfg.pa_hp_sel = pa_hp_sels[pwr+9];
+
+	pa_cfg->ramp_time = LR11XX_RADIO_RAMP_48_US;
+	pa_cfg->tx_power_in_dbm = powers[pwr+9];
+	pa_cfg->enable_ext_pa = false;
+
+	return 0;
+}
+
+static const struct sid_pal_serial_bus_factory radio_spi_factory = {
+	.create = sid_pal_serial_bus_nordic_spi_create,
+	.config = NULL,
+};
+
+
+const radio_lr11xx_regional_param_t radio_lr11xx_regional_param[] =
+{
+    #if defined (REGION_ALL) || defined (REGION_US915)
+	{
+		.param_region = RADIO_REGION_NA,
+		.max_tx_power = { RADIO_MAX_TX_POWER_NA, RADIO_MAX_TX_POWER_NA, RADIO_MAX_TX_POWER_NA,
+				  RADIO_MAX_TX_POWER_NA, RADIO_MAX_TX_POWER_NA, RADIO_MAX_TX_POWER_NA },
+		.cca_level_adjust = { 0, 0, 0, 0, 0, 0 },
+		.ant_dbi = RADIO_ANT_GAIN(2.15)
+	},
+    #endif
+    #if defined (REGION_ALL) || defined (REGION_EU868)
+	{
+		.param_region = RADIO_REGION_EU,
+		.max_tx_power = { RADIO_MAX_TX_POWER_EU, RADIO_MAX_TX_POWER_EU, RADIO_MAX_TX_POWER_EU,
+				  RADIO_MAX_TX_POWER_EU, RADIO_MAX_TX_POWER_EU, RADIO_MAX_TX_POWER_EU },
+		.cca_level_adjust = { 0, 0, 0, 0, 0, 0 },
+		.ant_dbi = RADIO_ANT_GAIN(2.15)
+	},
+    #endif
+};
+
+static radio_lr11xx_device_config_t radio_lr11xx_cfg =
+{
+	.regulator_mode = LR11XX_SYSTEM_REG_MODE_DCDC,
+	.rx_boost = false,
+	.lna_gain = RADIO_RX_LNA_GAIN,
+	.bus_factory = &radio_spi_factory,
+
+	.pa_cfg_callback = radio_lr11xx_pa_cfg,
+
+	.wakeup_delay_us = 0,
+	.lfclock_cfg = LR11XX_SYSTEM_LFCLK_RC,
+#if defined(LR1110)
+	.tcxo_config = {
+		.ctrl = LR11XX_TCXO_CTRL_DIO3,
+		.tune = LR11XX_SYSTEM_TCXO_CTRL_3_3V,
+		.timeout = 10 // 20 //200
+	},
+#elif defined(LR1121)
+	.tcxo_config = {
+		.ctrl                   = LR11XX_TCXO_CTRL_NONE,
+	},
+#else
+    #error not_LR1110_or_LR1121
+#endif
+
+	.rfswitch = {
+    	.enable = LR11XX_SYSTEM_RFSW0_HIGH | LR11XX_SYSTEM_RFSW1_HIGH,
+    	.standby = 0,
+    	.rx = LR11XX_SYSTEM_RFSW0_HIGH,
+    	.tx = LR11XX_SYSTEM_RFSW0_HIGH | LR11XX_SYSTEM_RFSW1_HIGH,
+    	.tx_hp = LR11XX_SYSTEM_RFSW1_HIGH,
+    	.tx_hf = 0,
+    	.gnss = 0,
+    	.wifi = 0,
+	},
+
+	.rssi_no_signal_offset = 0,
+
+	// .gnss_scan.pre_hook
+	// .gnss_scan.post_hook
+	// .gnss_scan.arg
+
+	// .wifis_scan.pre_hook
+	// .wifis_scan.post_hook
+	// .wifis_scan.arg
+
+	.mitigations = { /* prevents servicing of GNSS interrupt */
+		.irq_noise_during_sleep = false,
+		.lbd_clear_on_wakeup    = false,
+	},
+
+	.internal_buffer = {
+		.p = radio_lr1110_buffer,
+		.size = sizeof(radio_lr1110_buffer),
+	},
+
+	.state_timings = {	 // sid_pal_radio_state_transition_timings_t
+		.sleep_to_full_power_us = 500,
+		.full_power_to_sleep_us = 0,
+		.rx_to_tx_us = 0,
+		.tx_to_rx_us = 0,
+		.tcxo_delay_us = 0,
+	},
+
+	.regional_config = {
+		.radio_region = RADIO_REGION,
+		.reg_param_table_size = sizeof(radio_lr11xx_regional_param) / sizeof(radio_lr11xx_regional_param[0]),
+		.reg_param_table = radio_lr11xx_regional_param,
+	},
+};
+
+const radio_lr11xx_device_config_t *get_radio_cfg(void)
+{
+	radio_lr11xx_cfg.gpios.power =
+		sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_reset_gpios), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.int1 =
+		sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_dio1_gpios), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.radio_busy =
+		sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_busy_gpios), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.rf_sw_ena =
+		sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_antenna_enable_gpios),
+							      gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.bus_selector.client_selector =
+		sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_cs), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.bus_selector.speed_hz = DT_PROP_OR(DT_NODELABEL(sid_semtech), clock_frequency, SPI_FREQUENCY_DEFAULT);
+
+	radio_lr11xx_cfg.gpios.tx_bypass = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(semtech_sx1262_tx_bypass), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.led_tx = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(radio_led_tx), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.led_rx = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(radio_led_rx), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.gnss_lna = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(radio_gnss_lna), gpios, INVALID_DT_GPIO));
+	radio_lr11xx_cfg.gpios.led_sniff = sid_gpio_utils_get_gpio_number_dt(
+			(struct gpio_dt_spec)GPIO_DT_SPEC_GET_OR(DT_NODELABEL(radio_led_sniff), gpios, INVALID_DT_GPIO));
+
+	radio_lr11xx_cfg.gnss_scan.post_hook = on_gnss_scan_done;
+	radio_lr11xx_cfg.wifi_scan.post_hook = on_wifi_scan_done;
+	radio_lr11xx_cfg.gnss_scan.arg = gnss_scan_done_context;
+	radio_lr11xx_cfg.wifi_scan.arg = wifi_scan_done_context;
+
+#ifdef CONFIG_LR1110_CLI
+    radio_lr11xx_cfg.state_timings.sleep_to_full_power_us = CLI_sleep_to_full_power_us;
+#endif /* CONFIG_LR1110_CLI */
+
+	return &radio_lr11xx_cfg;
+}
+
+const struct sid_sub_ghz_links_config sub_ghz_link_config = {
+	.enable_link_metrics = true,
+	.registration_config = {
+		.enable = true,
+		.periodicity_s = UINT32_MAX,
+	},
+};
+
+const struct sid_sub_ghz_links_config *app_get_sub_ghz_config(void)
+{
+	return &sub_ghz_link_config;
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/sal/common/sid_pal_ifc/sid_pal_radio_ifc.h gitlab_sidewalk/subsys/sal/common/sid_pal_ifc/sid_pal_radio_ifc.h
--- sidewalk/subsys/sal/common/sid_pal_ifc/sid_pal_radio_ifc.h	2023-11-09 11:04:08.280734972 -0800
+++ gitlab_sidewalk/subsys/sal/common/sid_pal_ifc/sid_pal_radio_ifc.h	2023-11-01 08:09:54.871151834 -0700
@@ -63,6 +63,7 @@
 #define    SID_PAL_RADIO_STANDBY_XOSC         6
 #define    SID_PAL_RADIO_RX_DC                7
 #define    SID_PAL_RADIO_BUSY                 8
+#define    SID_PAL_RADIO_SCAN                 9
 
 /** Sidewalk Phy Radio Region For Regional Config*/
 typedef enum {
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/sal/sid_pal/src/pal_init.c gitlab_sidewalk/subsys/sal/sid_pal/src/pal_init.c
--- sidewalk/subsys/sal/sid_pal/src/pal_init.c	2023-11-09 11:04:08.280734972 -0800
+++ gitlab_sidewalk/subsys/sal/sid_pal/src/pal_init.c	2023-11-01 08:09:54.875151911 -0700
@@ -63,7 +63,11 @@
 	}
 
 #if defined(CONFIG_SIDEWALK_SUBGHZ)
-	set_radio_sx126x_device_config(get_radio_cfg());
+#ifdef LR11xx
+    set_radio_lr11xx_device_config(get_radio_cfg());
+#else
+    set_radio_sx126x_device_config(get_radio_cfg());
+#endif
 #if defined(CONFIG_SOC_SERIES_NRF53X)
 	(void)bt_enable(NULL);
 	(void)bt_disable();
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/subsys/semtech/include/sx126x_config.h gitlab_sidewalk/subsys/semtech/include/sx126x_config.h
--- sidewalk/subsys/semtech/include/sx126x_config.h	2023-11-09 11:04:08.280734972 -0800
+++ gitlab_sidewalk/subsys/semtech/include/sx126x_config.h	2023-11-01 08:09:54.875151911 -0700
@@ -108,6 +108,10 @@
     uint32_t gpio_radio_busy;
     uint32_t gpio_rf_sw_ena;
     uint32_t gpio_tx_bypass;
+#ifdef SX126x
+    uint32_t gpio_led_tx;
+    uint32_t gpio_led_rx;
+#endif
 
     struct sid_pal_serial_bus_client bus_selector;
     radio_sx126x_tcxo_t tcxo;
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/include/json_printer.h gitlab_sidewalk/utils/include/json_printer.h
--- sidewalk/utils/include/json_printer.h	2023-11-09 11:04:08.284735048 -0800
+++ gitlab_sidewalk/utils/include/json_printer.h	2023-11-01 08:09:54.879151987 -0700
@@ -1,61 +1,299 @@
 /*
- * Copyright (c) 2022 Nordic Semiconductor ASA
+ * Copyright (c) 2023 Nordic Semiconductor ASA
  *
  * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
  */
 
-#include <stdbool.h>
+/**
+  * @brief This module is a zero cost abstraction to prepare JSON string representation of objects.
+  * It works by generating list of arguments for printf function.
+  *
+  * Benefits and limitations:
+  * - Because the macros are expanded by preprocessor, they can not be used by other macros like LOG_*, They should be used with functions like
+  *   printk, shell_printk, z_log_minimal_printk.
+  * - There is no need to create any JSON object, or prepare memory buffor for storing string representation, it is essentially very sophisticated way generate printf arguments.
+  * - New types can be easily created, any structure can be eventually simplified to the basic types that are already defined
+  * - Number of elements in JSON objects and arrays have to be known at compile time, so it is impossible to use this module for printing array with size unknown at compile time
+  * - The macro must be evaluated by preprocessor to simple list of arguments for printf function, therefore there can not be any conditional code inside macro
+  * 
+  * Example: 
+  * printf(JSON_OBJ(JSON_NAME("my_variable_name", JOSN_INT(123))));
+  *
+  * printf("{" "\"%s\" : %d" "}", "my_variable_name", 123);
+  * > {"my_variable_name": 123}
+  *
+  * Example 2:
+  *
+  * printf(JSON_OBJ(JSON_NAME("array", JSON_ARRAY(JSON_LIST_2(JSON_INT(3), JSON_FLOAT(3.14)))));
+  * > {"array": [3, 3.14]}
+  *
+  * Example 3:
+  *
+  * printf(JSON_OBJ(JSON_LIST_2(
+      JSON_NAME("array", JSON_ARRAY(JSON_LIST_2(
+        JSON_INT(3), JSON_FLOAT(3.14)
+      ))), 
+      JSON_NAME("dictionary", JSON_OBJ(JSON_NAME("JSON_is_great", true)))
+    )));
+  * > {"array": [3, 3.14], "dictionary": {"JSON_is_great": true}}
+  * 
+  */
 
-// Redefine this macro before use to redirect json output
-#define JSON_RAW_PRINT(format, ...)                                                                \
-	shell_fprintf(shell, SHELL_NORMAL, format __VA_OPT__(, ) __VA_ARGS__)
-
-#define JSON_PRINT(indent, format, ...)                                                            \
-	{                                                                                          \
-		if (JSON_INDENT) {                                                                 \
-			for (int i = 0; i < indent; i++) {                                         \
-				JSON_RAW_PRINT("\t");                                              \
-			};                                                                         \
-			JSON_RAW_PRINT(format "\n" __VA_OPT__(, ) __VA_ARGS__);                    \
-		} else {                                                                           \
-			JSON_RAW_PRINT(format __VA_OPT__(, ) __VA_ARGS__);                         \
-		}                                                                                  \
-	}
-
-#define JSON_LAST ""
-#define JSON_NEXT ", "
-#define JSON_END "\n"
-
-#define JSON_DICT(name, in_line, content)                                                          \
-	{                                                                                          \
-		int indent = 0;                                                                    \
-		bool JSON_INDENT = (in_line == false);                                             \
-		JSON_VAL_DICT(name, content, JSON_END);                                            \
-	}
-
-#define JSON_VAL_STR_ENUMERATE(key_array, val_array, array_size, comma_or_empty)                   \
-	{                                                                                          \
-		for (int i = 0; i < array_size - 1; i++) {                                         \
-			JSON_VAL_STR(key_array[i], val_array[i], JSON_NEXT);                       \
-		}                                                                                  \
-		JSON_VAL_STR(key_array[array_size - 1], val_array[array_size - 1],                 \
-			     comma_or_empty);                                                      \
-	}
-
-#define JSON_VAL(key, val, comma_or_empty)                                                         \
-	{                                                                                          \
-		JSON_PRINT(indent, "\"%s\": %d" comma_or_empty, (char *)key, val);                 \
-	}
-#define JSON_VAL_STR(key, str, comma_or_empty)                                                     \
-	{                                                                                          \
-		JSON_PRINT(indent, "\"%s\": \"%s\"" comma_or_empty, (char *)key, (char *)str);     \
-	}
-
-#define JSON_VAL_DICT(key, content, comma_or_empty)                                                \
-	{                                                                                          \
-		JSON_PRINT(indent, "\"%s\": {", (char *)key);                                      \
-		indent++;                                                                          \
-		{ content };                                                                       \
-		indent--;                                                                          \
-		JSON_PRINT(indent, "}" comma_or_empty);                                            \
-	}
+/**
+ * @brief prepare printf formater and arguments to print variable
+ * 
+ * @arg val: intiger value to print
+ */
+#define JSON_INT(val) "%d", val
+
+/**
+ * @brief prepare printf formater and arguments to print variable
+ * 
+ * @arg val: float value to print
+ */
+#define JSON_FLOAT(val) "%f", val
+
+/**
+ * @brief prepare printf formater and arguments to print variable
+ * 
+ * @arg val: bool value to print
+ */
+#define JSON_BOOL(val) "%s", val ? "true" : "false"
+
+/**
+ * @brief prepare printf formater and arguments to print variable
+ * 
+ * @arg val: char* value to print
+ */
+#define JSON_STR(val) "\"%s\"", val
+
+/**
+ * @brief Append new line at the end of JSON string passed as argument
+ * 
+ */
+#define JSON_NEW_LINE(JSON) _JSON_FORMAT(JSON) "\n" _JSON_ARGS(JSON)
+
+/**
+ * @brief add name to the JSON value, object or array.
+ * 
+ */
+#define JSON_NAME(name, json_object)                                                               \
+	"\"%s\": " _JSON_FORMAT(json_object), name _JSON_ARGS(json_object)
+
+#define _JSON_FORMAT(format, ...) format
+#define _JSON_ARGS(format, ...) __VA_OPT__(, ) __VA_ARGS__
+
+/**
+ * @brief Create JSON array
+ * @param obj content of JSON object. Only valid value for this argument is one of JSON_LIST_X macros
+ */
+#define JSON_ARRAY(obj) "[" _JSON_FORMAT(obj) "]" _JSON_ARGS(obj)
+
+/**
+ * @brief Create JSON object
+ * @param obj content of JSON object. Only valid value for this argument is one of JSON_LIST_X macros
+ * to create a dictionary the JSON_LIST_X have to take JSON_NAME for every argument
+ */
+#define JSON_OBJ(obj) "{" _JSON_FORMAT(obj) "}" _JSON_ARGS(obj)
+
+// clang-format off
+#define JSON_LIST_1(_1) \
+_JSON_FORMAT(_1)  _JSON_ARGS(_1)
+
+#define JSON_LIST_2(_1, _2) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) \
+_JSON_ARGS(_1) _JSON_ARGS(_2)
+
+#define JSON_LIST_3(_1, _2, _3) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3)
+
+#define JSON_LIST_4(_1, _2, _3, _4) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) 
+
+#define JSON_LIST_5(_1, _2, _3, _4, _5) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5)
+
+#define JSON_LIST_6(_1, _2, _3, _4, _5, _6) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6)
+
+#define JSON_LIST_7(_1, _2, _3, _4, _5, _6, _7) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) 
+
+#define JSON_LIST_8(_1, _2, _3, _4, _5, _6, _7, _8) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8)  \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) 
+
+#define JSON_LIST_9(_1, _2, _3, _4, _5, _6, _7, _8, _9) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) 
+
+#define JSON_LIST_10(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10)
+
+#define JSON_LIST_11(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11)
+
+#define JSON_LIST_12(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12)
+
+#define JSON_LIST_13(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13)
+
+#define JSON_LIST_14(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14)
+
+#define JSON_LIST_15(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15)
+
+#define JSON_LIST_16(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16)
+
+#define JSON_LIST_17(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17)
+
+#define JSON_LIST_18(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18)
+
+#define JSON_LIST_19(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19)
+
+#define JSON_LIST_20(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20)
+
+#define JSON_LIST_21(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21)
+
+#define JSON_LIST_22(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22)
+
+#define JSON_LIST_23(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23)\
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) 
+
+#define JSON_LIST_24(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24)
+
+#define JSON_LIST_25(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25)
+
+#define JSON_LIST_26(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26)
+
+#define JSON_LIST_27(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27)
+
+#define JSON_LIST_28(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28)
+
+#define JSON_LIST_29(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29)
+
+#define JSON_LIST_30(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30)
+
+#define JSON_LIST_31(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31)
+
+#define JSON_LIST_32(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32)
+
+#define JSON_LIST_33(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32)  ", " _JSON_FORMAT(_33) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33)
+
+#define JSON_LIST_34(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34)
+
+#define JSON_LIST_35(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35)
+
+#define JSON_LIST_36(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36)
+
+#define JSON_LIST_37(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37)
+
+#define JSON_LIST_38(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38)
+
+#define JSON_LIST_39(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39)
+
+#define JSON_LIST_40(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40)
+
+#define JSON_LIST_41(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41)
+
+#define JSON_LIST_42(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42)
+
+#define JSON_LIST_43(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43)
+
+#define JSON_LIST_44(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44)
+
+#define JSON_LIST_45(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) ", " _JSON_FORMAT(_45) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44) _JSON_ARGS(_45)
+
+#define JSON_LIST_46(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) ", " _JSON_FORMAT(_45) ", " _JSON_FORMAT(_46) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44) _JSON_ARGS(_45) _JSON_ARGS(_46)
+
+#define JSON_LIST_47(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) ", " _JSON_FORMAT(_45) ", " _JSON_FORMAT(_46) ", " _JSON_FORMAT(_47) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44) _JSON_ARGS(_45) _JSON_ARGS(_46) _JSON_ARGS(_47)
+
+#define JSON_LIST_48(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) ", " _JSON_FORMAT(_45) ", " _JSON_FORMAT(_46) ", " _JSON_FORMAT(_47) ", " _JSON_FORMAT(_48) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44) _JSON_ARGS(_45) _JSON_ARGS(_46) _JSON_ARGS(_47) _JSON_ARGS(_48)
+
+#define JSON_LIST_49(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) ", " _JSON_FORMAT(_45) ", " _JSON_FORMAT(_46) ", " _JSON_FORMAT(_47) ", " _JSON_FORMAT(_48) ", " _JSON_FORMAT(_49) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44) _JSON_ARGS(_45) _JSON_ARGS(_46) _JSON_ARGS(_47) _JSON_ARGS(_48) _JSON_ARGS(_49)
+
+#define JSON_LIST_50(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50) \
+_JSON_FORMAT(_1) ", " _JSON_FORMAT(_2) ", " _JSON_FORMAT(_3) ", " _JSON_FORMAT(_4) ", " _JSON_FORMAT(_5) ", " _JSON_FORMAT(_6) ", " _JSON_FORMAT(_7) ", " _JSON_FORMAT(_8) ", " _JSON_FORMAT(_9) ", " _JSON_FORMAT(_10) ", " _JSON_FORMAT(_11) ", " _JSON_FORMAT(_12) ", " _JSON_FORMAT(_13) ", " _JSON_FORMAT(_14) ", " _JSON_FORMAT(_15) ", " _JSON_FORMAT(_16) ", " _JSON_FORMAT(_17) ", " _JSON_FORMAT(_18) ", " _JSON_FORMAT(_19) ", " _JSON_FORMAT(_20) ", " _JSON_FORMAT(_21) ", " _JSON_FORMAT(_22) ", " _JSON_FORMAT(_23) ", " _JSON_FORMAT(_24) ", " _JSON_FORMAT(_25) ", " _JSON_FORMAT(_26) ", " _JSON_FORMAT(_27) ", " _JSON_FORMAT(_28) ", " _JSON_FORMAT(_29) ", " _JSON_FORMAT(_30) ", " _JSON_FORMAT(_31) ", " _JSON_FORMAT(_32) ", " _JSON_FORMAT(_33) ", " _JSON_FORMAT(_34) ", " _JSON_FORMAT(_35) ", " _JSON_FORMAT(_36) ", " _JSON_FORMAT(_37) ", " _JSON_FORMAT(_38) ", " _JSON_FORMAT(_39) ", " _JSON_FORMAT(_40) ", " _JSON_FORMAT(_41) ", " _JSON_FORMAT(_42) ", " _JSON_FORMAT(_43) ", " _JSON_FORMAT(_44) ", " _JSON_FORMAT(_45) ", " _JSON_FORMAT(_46) ", " _JSON_FORMAT(_47) ", " _JSON_FORMAT(_48) ", " _JSON_FORMAT(_49) ", " _JSON_FORMAT(_50) \
+_JSON_ARGS(_1) _JSON_ARGS(_2) _JSON_ARGS(_3) _JSON_ARGS(_4) _JSON_ARGS(_5) _JSON_ARGS(_6) _JSON_ARGS(_7) _JSON_ARGS(_8) _JSON_ARGS(_9) _JSON_ARGS(_10) _JSON_ARGS(_11) _JSON_ARGS(_12) _JSON_ARGS(_13) _JSON_ARGS(_14) _JSON_ARGS(_15) _JSON_ARGS(_16) _JSON_ARGS(_17) _JSON_ARGS(_18) _JSON_ARGS(_19) _JSON_ARGS(_20) _JSON_ARGS(_21) _JSON_ARGS(_22) _JSON_ARGS(_23) _JSON_ARGS(_24) _JSON_ARGS(_25) _JSON_ARGS(_26) _JSON_ARGS(_27) _JSON_ARGS(_28) _JSON_ARGS(_29) _JSON_ARGS(_30) _JSON_ARGS(_31) _JSON_ARGS(_32) _JSON_ARGS(_33) _JSON_ARGS(_34) _JSON_ARGS(_35) _JSON_ARGS(_36) _JSON_ARGS(_37) _JSON_ARGS(_38) _JSON_ARGS(_39) _JSON_ARGS(_40) _JSON_ARGS(_41) _JSON_ARGS(_42) _JSON_ARGS(_43) _JSON_ARGS(_44) _JSON_ARGS(_45) _JSON_ARGS(_46) _JSON_ARGS(_47) _JSON_ARGS(_48) _JSON_ARGS(_49) _JSON_ARGS(_50)
+
+// clang-format on
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/include/lr1110_shell.h gitlab_sidewalk/utils/include/lr1110_shell.h
--- sidewalk/utils/include/lr1110_shell.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/utils/include/lr1110_shell.h	2023-11-01 08:09:54.879151987 -0700
@@ -0,0 +1,5 @@
+#include <sid_api.h>
+#include <lr11xx_wifi_types.h>
+
+void LR1110_CLI_init(struct sid_handle *handle);
+
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/include/sid_shell.h gitlab_sidewalk/utils/include/sid_shell.h
--- sidewalk/utils/include/sid_shell.h	2023-11-09 11:04:08.284735048 -0800
+++ gitlab_sidewalk/utils/include/sid_shell.h	2023-11-02 14:10:39.830519937 -0700
@@ -14,7 +14,8 @@
 void CLI_register_message_send();
 void CLI_register_message_not_send();
 void CLI_register_message_received(uint16_t resp_id);
-void CLI_init(struct sid_handle *handler);
+void CLI_init(struct sid_handle *handler, const struct sid_config *config);
 void CLI_register_sid_status(const struct sid_status *status);
+void CLI_set_handle(struct sid_handle *handler);
 
 void sidewalk_button_pressed(uint32_t button_bit);
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/include/sidTypes2Json.h gitlab_sidewalk/utils/include/sidTypes2Json.h
--- sidewalk/utils/include/sidTypes2Json.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/utils/include/sidTypes2Json.h	2023-11-01 08:09:54.879151987 -0700
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#define eval(x) x
+#define concat(a, b) a##b
+#define eval_bool(x) x ? 1 : 0
+#define COND_TRUE(cond, code...) concat(COND_true_, cond)(code)
+#define COND_FALSE(cond, code...) concat(COND_false_, cond)(code)
+
+#define COND_true_0(code...)
+#define COND_true_1(code...) code
+
+#define COND_false_0(code...) code
+#define COND_false_1(code...)
+
+#include <sidTypes2str.h>
+#include <json_printer.h>
+
+/**
+ * @brief prepare printf formater and arguments to print sid_msg_desc object
+ *
+ * @arg name: name of the JOSN object to print
+ * @arg msg_desc pointer to sid_msg_desc object to print
+ * @arg msg_desc_attr_rx flag to determine variant of union to print
+ *	valid values are `1` or `0`, and those need to be literals
+ *
+ * @result result of this function can be passed to printf like function, or other JSON macro
+ */
+#define JSON_VAL_sid_msg_desc(name, msg_desc, msg_desc_attr_rx)                                                  \
+	JSON_OBJ(JSON_NAME(                                                                                      \
+		name,                                                                                            \
+		JSON_OBJ(JSON_LIST_7(                                                                            \
+			JSON_NAME("link_type", JSON_INT(msg_desc->link_type)),                                   \
+			JSON_NAME("type", JSON_INT(msg_desc->type)),                                             \
+			JSON_NAME("type_str", JSON_STR(SID_MSG_TYPE_STR(msg_desc->type))),                       \
+			JSON_NAME("link_mode", JSON_INT(msg_desc->link_mode)),                                   \
+			JSON_NAME("link_mode_str",                                                               \
+				  JSON_STR(SID_LINK_MODE_STR(msg_desc->link_mode))),                             \
+			JSON_NAME("id", JSON_INT(msg_desc->id)),                                                 \
+			JSON_NAME(                                                                               \
+				"msg_desc_attr",                                                                 \
+				JSON_OBJ(COND_TRUE(                                                              \
+					msg_desc_attr_rx,                                                        \
+					JSON_NAME(                                                               \
+						"rx_attr",                                                       \
+						JSON_OBJ(JSON_LIST_5(                                            \
+							JSON_NAME("is_msg_ack",                                  \
+								  JSON_BOOL(msg_desc->msg_desc_attr              \
+										    .rx_attr                     \
+										    .is_msg_ack)),               \
+							JSON_NAME(                                               \
+								"is_msg_duplicate",                              \
+								JSON_BOOL(                                       \
+									msg_desc->msg_desc_attr                  \
+										.rx_attr                         \
+										.is_msg_duplicate)),             \
+							JSON_NAME(                                               \
+								"ack_requested",                                 \
+								JSON_BOOL(msg_desc->msg_desc_attr                \
+										  .rx_attr                       \
+										  .ack_requested)),              \
+							JSON_NAME("rssi",                                        \
+								  JSON_INT(msg_desc->msg_desc_attr               \
+										   .rx_attr.rssi)),              \
+							JSON_NAME(                                               \
+								"snr",                                           \
+								JSON_INT(msg_desc->msg_desc_attr                 \
+										 .rx_attr.snr))))))              \
+						 COND_FALSE(                                                     \
+							 msg_desc_attr_rx,                                       \
+							 JSON_NAME(                                              \
+								 "tx_attr",                                      \
+								 JSON_OBJ(JSON_LIST_3(                           \
+									 JSON_NAME(                              \
+										 "request_ack",                  \
+										 JSON_BOOL(                      \
+											 msg_desc->msg_desc_attr \
+												 .tx_attr        \
+												 .request_ack)), \
+									 JSON_NAME(                              \
+										 "num_retries",                  \
+										 JSON_INT(                       \
+											 msg_desc->msg_desc_attr \
+												 .tx_attr        \
+												 .num_retries)), \
+									 JSON_NAME(                              \
+										 "ttl_in_seconds",               \
+										 JSON_INT(                       \
+											 msg_desc->msg_desc_attr \
+												 .tx_attr        \
+												 .ttl_in_seconds))))))))))))
+
+/**
+ * @brief prepare printf formater and arguments to print sid_error_t object
+ * 
+ * @arg name: name of the JSON object to print
+ * @arg error: object of sid_error_t to print
+ *
+ * @result result of this function can be passed to printf like function, or other JSON macro
+ */
+#define JSON_VAL_sid_error_t(name, error)                                                          \
+	JSON_NAME(name, JSON_OBJ(JSON_LIST_2(JSON_NAME("value", JSON_INT(error)),                  \
+					     JSON_NAME("str", JSON_STR(SID_ERROR_T_STR(error))))))
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/include/sidTypes2str.h gitlab_sidewalk/utils/include/sidTypes2str.h
--- sidewalk/utils/include/sidTypes2str.h	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/utils/include/sidTypes2str.h	2023-11-01 08:09:54.879151987 -0700
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2023 Nordic Semiconductor ASA
+ *
+ * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
+ */
+
+#define SID_ERROR_T_STR(err)                                                                       \
+	(((-(err)) > -(SID_ERROR_INVALID_STATE)) || ((-(err)) < 0)) ?                              \
+		"UNKNOWN" :                                                                        \
+		((char *[]){                                                                       \
+			"SID_ERROR_NONE",                                                          \
+			"SID_ERROR_GENERIC",                                                       \
+			"SID_ERROR_TIMEOUT",                                                       \
+			"SID_ERROR_OUT_OF_RESOURCES",                                              \
+			"SID_ERROR_OOM",                                                           \
+			"SID_ERROR_OUT_OF_HANDLES",                                                \
+			"SID_ERROR_NOSUPPORT",                                                     \
+			"SID_ERROR_NO_PERMISSION",                                                 \
+			"SID_ERROR_NOT_FOUND",                                                     \
+			"SID_ERROR_NULL_POINTER",                                                  \
+			"SID_ERROR_PARAM_OUT_OF_RANGE",                                            \
+			"SID_ERROR_INVALID_ARGS",                                                  \
+			"SID_ERROR_INCOMPATIBLE_PARAMS",                                           \
+			"SID_ERROR_IO_ERROR",                                                      \
+			"SID_ERROR_TRY_AGAIN",                                                     \
+			"SID_ERROR_BUSY",                                                          \
+			"SID_ERROR_DEAD_LOCK",                                                     \
+			"SID_ERROR_DATA_TYPE_OVERFLOW",                                            \
+			"SID_ERROR_BUFFER_OVERFLOW",                                               \
+			"SID_ERROR_IN_PROGRESS",                                                   \
+			"SID_ERROR_CANCELED",                                                      \
+			"SID_ERROR_OWNER_DEAD",                                                    \
+			"SID_ERROR_UNRECOVERABLE",                                                 \
+			"SID_ERROR_PORT_INVALID",                                                  \
+			"SID_ERROR_PORT_NOT_OPEN",                                                 \
+			"SID_ERROR_UNINITIALIZED",                                                 \
+			"SID_ERROR_ALREADY_INITIALIZED",                                           \
+			"SID_ERROR_ALREADY_EXISTS",                                                \
+			"SID_ERROR_BELOW_THRESHOLD",                                               \
+			"SID_ERROR_STOPPED",                                                       \
+			"SID_ERROR_STORAGE_READ_FAIL",                                             \
+			"SID_ERROR_STORAGE_WRITE_FAIL",                                            \
+			"SID_ERROR_STORAGE_ERASE_FAIL",                                            \
+			"SID_ERROR_STORAGE_FULL",                                                  \
+			"SID_ERROR_AUTHENTICATION_FAIL",                                           \
+			"SID_ERROR_ENCRYPTION_FAIL",                                               \
+			"SID_ERROR_DECRYPTION_FAIL",                                               \
+			"SID_ERROR_ID_OBFUSCATION_FAIL",                                           \
+			"SID_ERROR_NO_ROUTE_AVAILABLE",                                            \
+			"SID_ERROR_INVALID_RESPONSE",                                              \
+			"SID_ERROR_INVALID_STATE",                                                 \
+		}[(-(err))])
+
+#define SID_MSG_TYPE_STR(val)                                                                      \
+	((char *[]){ "SID_MSG_TYPE_GET", "SID_MSG_TYPE_SET", "SID_MSG_TYPE_NOTIFY",                \
+		     "SID_MSG_TYPE_RESPONSE" }[(val)])
+
+#define SID_LINK_MODE_STR(val)                                                                     \
+	(val) == SID_LINK_MODE_CLOUD   ? "SID_LINK_MODE_CLOUD" :                                   \
+	(val) == SID_LINK_MODE_MOBILE  ? "SID_LINK_MODE_MOBILE" :                                  \
+	(val) == SID_LINK_MODE_INVALID ? "SID_LINK_MODE_INVALID" :                                 \
+					 "UNKNOWN"
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/src/CMakeLists.txt gitlab_sidewalk/utils/src/CMakeLists.txt
--- sidewalk/utils/src/CMakeLists.txt	2023-11-09 11:04:08.288735126 -0800
+++ gitlab_sidewalk/utils/src/CMakeLists.txt	2023-11-01 08:09:54.879151987 -0700
@@ -24,5 +24,11 @@
     zephyr_include_directories(${ZEPHYR_BASE}/../sidewalk/samples/template/include)
 endif() # CONFIG_SIDEWALK_CLI
 
+if (CONFIG_LR1110_CLI)
+    zephyr_library_sources(lr1110_shell.c)
+    zephyr_include_directories(${ZEPHYR_BASE}/../sidewalk/lib/include/)
+    zephyr_include_directories(${ZEPHYR_BASE}/../sidewalk/samples/template/include)
+endif() # CONFIG_LR1110_CLI
+
 zephyr_library_sources_ifdef(CONFIG_SIDEWALK_DFU_SERVICE_BLE nordic_dfu.c)
 zephyr_library_sources(settings_utils.c)
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/src/lr1110_shell.c gitlab_sidewalk/utils/src/lr1110_shell.c
--- sidewalk/utils/src/lr1110_shell.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/utils/src/lr1110_shell.c	2023-11-01 08:09:54.879151987 -0700
@@ -0,0 +1,543 @@
+#include <stdbool.h>
+#include <stdint.h>
+#include <stdio.h>
+#include "zephyr/sys/util.h"
+#include <zephyr/kernel.h>
+#include <zephyr/shell/shell.h>
+#include <zephyr/logging/log.h>
+#include "halo_lr11xx_radio.h"
+#include "lr1110_shell.h"
+
+LOG_MODULE_REGISTER(lr1110_cli, CONFIG_SIDEWALK_LOG_LEVEL);
+
+#define NB_MAX_SV		8
+
+#define LR1110_STACK_SIZE 5120
+#define LR1110_WORKER_PRIO 5
+
+struct k_work_q lr1110_work_q;
+K_THREAD_STACK_DEFINE(lr1110_work_q_stack, LR1110_STACK_SIZE);
+
+struct gnss_work_t {
+	struct k_work work;
+	const struct shell *shell;
+	bool nRead_write;
+	int value;
+	float lon, lat;
+};
+
+struct gnss_work_t gnss_work;
+static struct sid_handle *sidewalk_handle;
+void app_event_send_wake(void); // implemented in application
+void app_event_wifi_scan(void); // implemented in application
+
+extern lr11xx_gnss_solver_assistance_position_t assistance_position; // application declared
+
+int gnss_scan_timer_set(unsigned);	// implement in application
+unsigned gnss_scan_timer_get(void);
+
+uint32_t CLI_sleep_to_full_power_us = 500;
+uint32_t CLI_tcxo_us;
+
+extern wifi_configuration_scan_t wifi_configuration;
+
+void cmd_print_lr11xx_version(const struct shell *shell, size_t argc, char **argv)
+{
+	shell_info(shell, "TODO lr1110 get version");
+}
+
+static void cmd_gnss_autonomus_work(struct k_work *item)
+{
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+	lr11xx_status_t status = lr11xx_gnss_scan_autonomous(drv_ctx,
+		0,
+		LR11XX_GNSS_OPTION_BEST_EFFORT,
+		LR11XX_GNSS_RESULTS_DOPPLER_ENABLE_MASK | LR11XX_GNSS_RESULTS_DOPPLER_MASK | LR11XX_GNSS_RESULTS_BIT_CHANGE_MASK,
+		NB_MAX_SV
+	);
+	if (status == LR11XX_STATUS_ERROR)
+		shell_error(gnss_work->shell, "autonomus scan fail");
+	else
+		shell_info(gnss_work->shell, "autonomus scan started");
+}
+
+static void cmd_gnss_assisted_work(struct k_work *item)
+{
+	struct sid_timespec curr_time;
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+
+	sid_error_t ret = sid_get_time(sidewalk_handle, SID_GET_GPS_TIME, &curr_time);
+	if (SID_ERROR_NONE != ret) {
+		shell_error(gnss_work->shell, "sid_get_time fail %d", ret);
+		return;
+	}
+	lr11xx_status_t status;
+	status = lr11xx_gnss_set_assistance_position(drv_ctx, &assistance_position);
+	if (status == LR11XX_STATUS_ERROR) {
+		shell_error(gnss_work->shell, "set AP fail");
+		return;
+	}
+	status = lr11xx_gnss_scan_assisted(drv_ctx,
+		curr_time.tv_sec,
+		LR11XX_GNSS_OPTION_BEST_EFFORT,
+		LR11XX_GNSS_RESULTS_DOPPLER_ENABLE_MASK | LR11XX_GNSS_RESULTS_DOPPLER_MASK | LR11XX_GNSS_RESULTS_BIT_CHANGE_MASK,
+		NB_MAX_SV
+	);
+	if (status == LR11XX_STATUS_ERROR)
+		shell_error(gnss_work->shell, "assisted scan fail");
+	else
+		shell_info(gnss_work->shell, "assisted scan started %u, %f %f", curr_time.tv_sec, assistance_position.latitude, assistance_position.longitude);
+}
+
+static void cmd_getstatus_work(struct k_work *item)
+{
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+#ifdef LR11xx_SRC
+	halo_drv_semtech_ctx_t* drv_ctx = lr11xx_get_drv_ctx();
+#else
+	void* drv_ctx = lr11xx_get_drv_ctx();
+#endif
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+	lr11xx_status_t status = lr11xx_system_clear_reset_status_info(drv_ctx);
+	if (status == LR11XX_STATUS_ERROR)
+		shell_error(gnss_work->shell, "getstatus fail");
+#ifdef LR11xx_SRC
+	else {
+		shell_info(gnss_work->shell, "stat1:%x stat2:%x", drv_ctx->last.stat1, drv_ctx->last.stat2);
+	}
+#endif /* LR11xx_SRC */
+}
+
+static int cmd_lr1110_gnss_autonomus(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous gnss has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnss_autonomus_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static int cmd_lr1110_gnss_assisted(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous gnss has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnss_assisted_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static void cmd_gnss_scan_mode_work(struct k_work *item)
+{
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+
+	if (gnss_work->nRead_write) {
+		lr11xx_status_t status = lr11xx_gnss_set_scan_mode(drv_ctx, gnss_work->value);
+		if (status == LR11XX_STATUS_ERROR)
+			shell_error(gnss_work->shell, "gnssSetScan fail");
+		else
+			shell_info(gnss_work->shell, "gnssSetScan ok");
+	} else
+		LOG_WRN("provide value");
+	/* lr11xx_gnss_scan_mode_t : 0 is single legacy scan, 3 is multiscan (5 fast scans)
+	 */
+}
+
+static void cmd_gnss_context_work(struct k_work *item)
+{
+	lr11xx_gnss_context_status_bytestream_t gnss_context;
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+	lr11xx_status_t status = lr11xx_gnss_get_context_status(drv_ctx, gnss_context);
+	if (status == LR11XX_STATUS_ERROR)
+		shell_error(gnss_work->shell, "fail");
+	else {
+		shell_hexdump(gnss_work->shell, gnss_context, LR11XX_GNSS_CONTEXT_STATUS_LENGTH);
+	}
+}
+
+static void cmd_gnss_almanac_age_work(struct k_work *item)
+{
+	struct sid_timespec curr_time;
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+	uint16_t almanac_age;
+	sid_error_t ret = sid_get_time(sidewalk_handle, SID_GET_GPS_TIME, &curr_time);
+	if (SID_ERROR_NONE != ret) {
+		shell_error(gnss_work->shell, "sid_get_time fail %d", ret);
+		return;
+	}
+	lr11xx_status_t status = lr11xx_gnss_get_almanac_age_for_satellite(drv_ctx, gnss_work->value, &almanac_age);
+	if (status == LR11XX_STATUS_ERROR)
+		shell_error(gnss_work->shell, "fail");
+	else {
+		const uint16_t days_between_2019_rollover_to_epoch = 14336;
+		const uint16_t almanac_age_days_since_gps_epoch    = almanac_age + days_between_2019_rollover_to_epoch;
+		const uint16_t now_days = curr_time.tv_sec / 3600 / 24;
+		shell_info(gnss_work->shell, "almanac age from chip %u, for SV %d", almanac_age, gnss_work->value);
+		shell_info(gnss_work->shell, "almanac age %u days", now_days - almanac_age_days_since_gps_epoch);
+	}
+}
+
+static void cmd_gnss_ap_work(struct k_work *item)
+{
+	lr11xx_status_t status;
+	lr11xx_gnss_solver_assistance_position_t ap;
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+
+	if (gnss_work->nRead_write) {
+		ap.latitude = gnss_work->lat;
+		ap.longitude = gnss_work->lon;
+		status = lr11xx_gnss_set_assistance_position(drv_ctx, &ap);
+		if (status == LR11XX_STATUS_ERROR)
+			shell_error(gnss_work->shell, "set AP fail");
+		else {
+			shell_error(gnss_work->shell, "set AP ok %f, %f", ap.latitude, ap.longitude);
+			assistance_position.latitude = ap.latitude;
+			assistance_position.longitude = ap.longitude;
+		}
+
+	} else {
+		status = lr11xx_gnss_read_assistance_position(drv_ctx, &ap);
+		if (status == LR11XX_STATUS_ERROR)
+			shell_error(gnss_work->shell, "get AP fail");
+		else
+			shell_error(gnss_work->shell, "get AP ok %f, %f", ap.latitude, ap.longitude);
+	}
+}
+
+static void cmd_gnssconst_work(struct k_work *item)
+{
+	unsigned char readout;
+	struct gnss_work_t *gnss_work = CONTAINER_OF(item, struct gnss_work_t, work);
+	void* drv_ctx = lr11xx_get_drv_ctx();
+	if (lr11xx_system_wakeup(drv_ctx) != LR11XX_STATUS_OK) {
+		shell_error(gnss_work->shell, "wake-up fail");
+		return;
+	}
+/*    LR1110_GNSS_GPS_MASK    = 0x01,
+    LR1110_GNSS_BEIDOU_MASK = 0x02,*/
+	
+	lr11xx_status_t status;
+	if (gnss_work->nRead_write)
+		status = lr11xx_gnss_set_constellations_to_use(drv_ctx, gnss_work->value);
+	else
+		status = lr11xx_gnss_read_used_constellations(drv_ctx, &readout);
+	if (status == LR11XX_STATUS_ERROR)
+		shell_error(gnss_work->shell, "gnssconst fail");
+	else {
+		if (gnss_work->nRead_write)
+			shell_info(gnss_work->shell, "gnssconst ok");
+		else
+			shell_info(gnss_work->shell, "gnssconst ok, read back %d", readout);
+	}
+}
+
+static int cmd_lr1110_get_status(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute getstatus command, previous has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_getstatus_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static int cmd_lr1110_gnss_constellation(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	LOG_INF("argc:%d", argc);
+	if (argc == 2) {
+		gnss_work.nRead_write = true;
+		sscanf(argv[1], "%d", &gnss_work.value);
+	} else
+		gnss_work.nRead_write = false;
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnssconst_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static int cmd_lr1110_gnss_scan_mode(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	if (argc == 2) {
+		gnss_work.nRead_write = true;
+		sscanf(argv[1], "%d", &gnss_work.value);
+	} else
+		gnss_work.nRead_write = false;
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnss_scan_mode_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static int cmd_lr1110_assistance_position(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	if (argc == 3) {
+		gnss_work.nRead_write = true;
+		sscanf(argv[1], "%f", &gnss_work.lat);
+		sscanf(argv[2], "%f", &gnss_work.lon);
+		shell_info(shell, "argv %f, %f", gnss_work.lat, gnss_work.lon);
+	} else
+		gnss_work.nRead_write = false;
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnss_ap_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+
+static int cmd_lr1110_get_gnss_context(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnss_context_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static int cmd_lr1110_wifi_scan_type(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+        if (argv[1][0] == 'b')
+            wifi_configuration.signal_type = LR11XX_WIFI_TYPE_SCAN_B;
+        else if (argv[1][0] == 'g')
+            wifi_configuration.signal_type = LR11XX_WIFI_TYPE_SCAN_G;
+        else if (argv[1][0] == 'n')
+            wifi_configuration.signal_type = LR11XX_WIFI_TYPE_SCAN_N;
+        else if (argv[1][0] == 'a')
+            wifi_configuration.signal_type = LR11XX_WIFI_TYPE_SCAN_B_G_N;
+        else {
+            shell_error(shell, "provide b, g, n or a");
+            return EINVAL;
+        }
+    }
+
+    switch (wifi_configuration.signal_type) {
+        case LR11XX_WIFI_TYPE_SCAN_B:
+            shell_info(shell, "B");
+            break;
+        case LR11XX_WIFI_TYPE_SCAN_G:
+            shell_info(shell, "G");
+            break;
+        case LR11XX_WIFI_TYPE_SCAN_N:
+            shell_info(shell, "N");
+            break;
+        case LR11XX_WIFI_TYPE_SCAN_B_G_N:
+            shell_info(shell, "B_G_N");
+            break;
+        default:
+            shell_info(shell, "? %d ?", wifi_configuration.signal_type);
+            break;
+    }
+    return 0;
+}
+
+static int cmd_lr1110_wifi_tps(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+        unsigned foo;
+	    sscanf(argv[1], "%u", &foo);
+        wifi_configuration.timeout_per_scan = foo;
+    }
+    shell_info(shell, "timeout_per_scan: %u", wifi_configuration.timeout_per_scan);
+    return 0;
+}
+
+static int cmd_lr1110_wifi_spc(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+        unsigned foo;
+	    sscanf(argv[1], "%u", &foo);
+        wifi_configuration.nb_scan_per_channel = foo;
+    }
+    shell_info(shell, "nb_scan_per_channel: %u", wifi_configuration.nb_scan_per_channel);
+    return 0;
+}
+
+static int cmd_lr1110_wifi_max_result(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+        unsigned foo;
+	    sscanf(argv[1], "%u", &foo);
+        wifi_configuration.base.max_result = foo;
+    }
+    shell_info(shell, "max_result: %u", wifi_configuration.base.max_result);
+    return 0;
+}
+
+static int cmd_lr1110_wifi_scan(const struct shell *shell, size_t argc, char **argv)
+{
+    app_event_wifi_scan();
+	return 0;
+}
+
+static int cmd_lr1110_get_almanac_age(const struct shell *shell, size_t argc, char **argv)
+{
+	if (argc != 2) {
+		shell_error(shell, "provide SV number");
+		return ENOEXEC;
+	}
+	if (k_work_busy_get(&gnss_work.work) != 0) {
+		shell_error(shell,
+			    "Can not execute gnss command, previous has not completed yet");
+		return ENOEXEC;	// or EINVAL if invalid
+	}
+
+    sscanf(argv[1], "%d", &gnss_work.value);
+	gnss_work.shell = shell;
+	k_work_init(&gnss_work.work, cmd_gnss_almanac_age_work);
+	k_work_submit_to_queue(&lr1110_work_q, &gnss_work.work);
+	return 0;
+}
+
+static int cmd_lr1110_tt(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+	    sscanf(argv[1], "%u", &CLI_tcxo_us);
+    }
+    shell_info(shell, "tcxo_delay_us: %u", CLI_tcxo_us);
+    return 0;
+}
+
+static int cmd_lr1110_sfp(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+	    sscanf(argv[1], "%u", &CLI_sleep_to_full_power_us);
+    }
+    shell_info(shell, "SFP: %u", CLI_sleep_to_full_power_us);
+    return 0;
+}
+
+static int cmd_lr1110_wake(const struct shell *shell, size_t argc, char **argv)
+{
+    app_event_send_wake();
+    return 0;
+}
+
+static int cmd_lr1110_scan_timer(const struct shell *shell, size_t argc, char **argv)
+{
+	unsigned sec;
+	if (argc == 1) {
+		shell_info(shell, "scan timer %u seconds", gnss_scan_timer_get());
+        return 0;
+	} else if (argc == 2) {
+        sscanf(argv[1], "%u", &sec);
+        if (gnss_scan_timer_set(sec) != 0) {
+            shell_error(shell, "gnss_scan_timer_set() failed");
+            return ENOEXEC;
+        }
+        return 0;
+    } else return EINVAL;
+}
+
+
+SHELL_STATIC_SUBCMD_SET_CREATE(
+	sub_services,
+	SHELL_CMD_ARG(version, NULL, "print version LR1110", cmd_print_lr11xx_version, 1, 1),
+	SHELL_CMD_ARG(gaut, NULL, "gnss scan autonomus", cmd_lr1110_gnss_autonomus, 1, 1),
+	SHELL_CMD_ARG(gass, NULL, "gnss scan assisted", cmd_lr1110_gnss_assisted, 1, 1),
+	SHELL_CMD_ARG(status, NULL, "read status", cmd_lr1110_get_status, 1, 1),
+	SHELL_CMD_ARG(gnssconst, NULL, "set gnss constellation, 1=gps, 2=beidou, 3=both", cmd_lr1110_gnss_constellation, 1, 1),
+	SHELL_CMD_ARG(gnssmode, NULL, "set gnss scan mode, 0=legacy, 3=advanced", cmd_lr1110_gnss_scan_mode, 1, 1),
+	SHELL_CMD_ARG(ap, NULL, "get/set assistance position <lat> <lon>", cmd_lr1110_assistance_position, 1, 3),
+	SHELL_CMD_ARG(context, NULL, "get gnss context", cmd_lr1110_get_gnss_context, 1, 1),
+	SHELL_CMD_ARG(age, NULL, "get almanac age", cmd_lr1110_get_almanac_age, 2, 2),
+	SHELL_CMD_ARG(gt, NULL, "start-stop gnss auto-timer", cmd_lr1110_scan_timer, 1, 2),
+	SHELL_CMD_ARG(sfp, NULL, "get/set sleep_to_full_power_us", cmd_lr1110_sfp, 1, 2),
+	SHELL_CMD_ARG(tt, NULL, "get/set txco_delay_us to MAC", cmd_lr1110_tt, 1, 2),
+	SHELL_CMD_ARG(wake, NULL, "call LR1110 wakeup (for sleep testing)", cmd_lr1110_wake, 1, 1),
+	SHELL_SUBCMD_SET_END);
+
+// command, subcommands, help, handler
+SHELL_CMD_REGISTER(lr1110, &sub_services, "LR1110 testing CLI", NULL);
+
+SHELL_STATIC_SUBCMD_SET_CREATE(
+	sub_services_wifi,
+	SHELL_CMD_ARG(scan, NULL, "start wifi scan", cmd_lr1110_wifi_scan, 1, 1),
+	SHELL_CMD_ARG(tps, NULL, "get-set timeout_per_scan", cmd_lr1110_wifi_tps, 1, 2),
+	SHELL_CMD_ARG(spc, NULL, "get-set nb_scan_per_channel ", cmd_lr1110_wifi_spc, 1, 2),
+	SHELL_CMD_ARG(max, NULL, "get-set max_result", cmd_lr1110_wifi_max_result, 1, 2),
+	SHELL_CMD_ARG(type, NULL, "get-set scan type (b/g/n/all) g and n do the same", cmd_lr1110_wifi_scan_type, 1, 2),
+	SHELL_SUBCMD_SET_END);
+
+SHELL_CMD_REGISTER(wifi, &sub_services_wifi, "LR1110 wifi CLI", NULL);
+
+void LR1110_CLI_init(struct sid_handle *handle)
+{
+	sidewalk_handle = handle;
+
+	k_work_queue_init(&lr1110_work_q);
+
+	k_work_queue_start(&lr1110_work_q, lr1110_work_q_stack,
+			   K_THREAD_STACK_SIZEOF(lr1110_work_q_stack), LR1110_WORKER_PRIO, NULL);
+}
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/src/shell.c gitlab_sidewalk/utils/src/shell.c
--- sidewalk/utils/src/shell.c	2023-11-09 11:04:08.288735126 -0800
+++ gitlab_sidewalk/utils/src/shell.c	2023-11-02 14:13:45.498310475 -0700
@@ -6,6 +6,7 @@
 
 #include <stdbool.h>
 #include <stdint.h>
+#include <stdio.h>
 #include "zephyr/sys/util.h"
 #include <zephyr/kernel.h>
 #include <zephyr/shell/shell.h>
@@ -70,6 +71,15 @@
 static const struct sid_status *CLI_status = &dummy;
 struct messages_stats sidewalk_messages;
 static struct sid_handle *sidewalk_handle;
+const struct sid_config *sidewalk_config;
+
+void app_event_send_sid_init(void);
+void app_event_send_sleep(void);
+void app_event_send_standby(void);
+
+__weak void app_event_send_sid_init() { }
+__weak void app_event_send_sleep() { }
+__weak void app_event_send_standby() { }
 
 void CLI_register_message_send()
 {
@@ -87,9 +97,15 @@
 	sidewalk_messages.resp_id = resp_id;
 }
 
-void CLI_init(struct sid_handle *handle)
+void CLI_set_handle(struct sid_handle *handle)
+{
+	sidewalk_handle = handle;
+}
+
+void CLI_init(struct sid_handle *handle, const struct sid_config *config)
 {
 	sidewalk_handle = handle;
+    sidewalk_config = config;
 
 	k_work_queue_init(&sid_api_work_q);
 
@@ -351,58 +367,69 @@
 				     "SID_STATE_SECURE_CHANNEL_READY" };
 	const char *state = state_repo[CLI_status->state];
 
-	bool in_line = (argc == 2 && strcmp("--oneline", argv[1]) == 0);
+	if (argc == 2 && strcmp("--oneline", argv[1]) == 0) {
+		shell_info(shell, "parameter `--oneline` is deprecated.");
+	}
+
+	shell_fprintf(
+		shell, SHELL_NORMAL,
+		JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+			"SIDEWALK_CLI",
+			JSON_OBJ(JSON_LIST_9(
+				JSON_NAME("state", JSON_STR(state)),
+				JSON_NAME("registered",
+					  JSON_INT(CLI_status->detail.registration_status ==
+						   SID_STATUS_REGISTERED)),
+				JSON_NAME("time_synced",
+					  JSON_INT(CLI_status->detail.time_sync_status ==
+						   SID_STATUS_TIME_SYNCED)),
+				JSON_NAME("link_up", JSON_INT(CLI_status->detail.link_status_mask)),
+				JSON_NAME(
+					"link_modes",
+					JSON_OBJ(JSON_LIST_3(
+						JSON_NAME("ble",
+							  JSON_INT(CLI_status->detail.supported_link_modes
+									   [SID_LINK_TYPE_1_IDX])),
+						JSON_NAME("fsk",
+							  JSON_INT(CLI_status->detail.supported_link_modes
+									   [SID_LINK_TYPE_2_IDX])),
+						JSON_NAME(
+							"lora",
+							JSON_INT(CLI_status->detail.supported_link_modes
+									 [SID_LINK_TYPE_3_IDX]))))),
+				JSON_NAME("tx_successfull",
+					  JSON_INT(sidewalk_messages.tx_successfull)),
+				JSON_NAME("tx_failed", JSON_INT(sidewalk_messages.tx_failed)),
+				JSON_NAME("rx_successfull",
+					  JSON_INT(sidewalk_messages.rx_successfull)),
+				JSON_NAME("response_id", JSON_INT(sidewalk_messages.resp_id))))))));
 
-	JSON_DICT("SIDEWALK_CLI", in_line, {
-		JSON_VAL_STR("state", state, JSON_NEXT);
-		JSON_VAL("registered",
-			 (CLI_status->detail.registration_status == SID_STATUS_REGISTERED),
-			 JSON_NEXT);
-		JSON_VAL("time_synced",
-			 (CLI_status->detail.time_sync_status == SID_STATUS_TIME_SYNCED),
-			 JSON_NEXT);
-		JSON_VAL("link_up", (CLI_status->detail.link_status_mask), JSON_NEXT);
-		JSON_VAL_DICT(
-			"link_modes",
-			{
-				JSON_VAL(
-					"ble",
-					CLI_status->detail.supported_link_modes[SID_LINK_TYPE_1_IDX],
-					JSON_NEXT);
-				JSON_VAL(
-					"fsk",
-					CLI_status->detail.supported_link_modes[SID_LINK_TYPE_2_IDX],
-					JSON_NEXT);
-				JSON_VAL(
-					"lora",
-					CLI_status->detail.supported_link_modes[SID_LINK_TYPE_3_IDX],
-					JSON_LAST);
-			},
-			JSON_NEXT);
-		JSON_VAL("tx_successfull", sidewalk_messages.tx_successfull, JSON_NEXT);
-		JSON_VAL("tx_failed", sidewalk_messages.tx_failed, JSON_NEXT);
-		JSON_VAL("rx_successfull", sidewalk_messages.rx_successfull, JSON_NEXT);
-		JSON_VAL("response_id", sidewalk_messages.resp_id, JSON_LAST);
-	});
 	return CMD_RETURN_OK;
 }
 
 void cmd_print_version(const struct shell *shell, size_t argc, char **argv)
 {
-	bool in_line = (argc == 2 && strcmp("--oneline", argv[1]) == 0);
+	shell_fprintf(
+		shell, SHELL_NORMAL,
+		JSON_NEW_LINE(JSON_OBJ(JSON_NAME(
+			"COMPONENTS_VERSION",
+			JSON_OBJ(JSON_LIST_3(
+				JSON_NAME("sidewalk_fork_point",
+					  JSON_STR(sidewalk_version_common_commit)),
+				JSON_NAME("build_time", JSON_STR(build_time_stamp)),
+				JSON_NAME("modules",
+					  JSON_OBJ(JSON_LIST_3(
+						  JSON_NAME(sidewalk_version_component_name[0],
+							    JSON_STR(sidewalk_version_component[0])),
+						  JSON_NAME(sidewalk_version_component_name[1],
+							    JSON_STR(sidewalk_version_component[1])),
+						  JSON_NAME(sidewalk_version_component_name[2],
+							    JSON_STR(sidewalk_version_component
+									     [2])))))))))));
 
-	JSON_DICT("COMPONENTS_VERSION", in_line, {
-		JSON_VAL_STR("sidewalk_fork_point", sidewalk_version_common_commit, JSON_NEXT);
-		JSON_VAL_STR("build_time", build_time_stamp, JSON_NEXT);
-		JSON_VAL_DICT(
-			"modules",
-			{
-				JSON_VAL_STR_ENUMERATE(sidewalk_version_component_name,
-						       sidewalk_version_component,
-						       sidewalk_version_component_count, JSON_LAST);
-			},
-			JSON_LAST);
-	});
+	if (argc == 2 && strcmp("--oneline", argv[1]) == 0) {
+		shell_info(shell, "parameter `--oneline` is deprecated.");
+	}
 }
 
 static void cmd_fatory_reset_work(struct k_work *item)
@@ -444,6 +471,134 @@
 	return CMD_RETURN_OK;
 }
 
+static void cmd_stop_work(struct k_work *item)
+{
+	struct sid_factory_reset_t *sid_factory_reset_work = CONTAINER_OF(item, struct sid_factory_reset_t, work);
+	sid_error_t ret = sid_stop(sidewalk_handle, sidewalk_config->link_mask);
+	if (SID_ERROR_NONE != ret) {
+		shell_error(sid_factory_reset_work->shell, "sidewalk cli: sid stop fail %d", ret);
+	} else {
+		shell_info(sid_factory_reset_work->shell, "sidewalk cli: sid stop");
+	}
+}
+
+static void cmd_start_work(struct k_work *item)
+{
+	struct sid_factory_reset_t *sid_factory_reset_work = CONTAINER_OF(item, struct sid_factory_reset_t, work);
+	sid_error_t ret = sid_start(sidewalk_handle, sidewalk_config->link_mask);
+	if (SID_ERROR_NONE != ret) {
+        char str[16];
+        if (SID_ERROR_INVALID_ARGS == ret)
+            strncpy(str, "invalid args", sizeof(str));
+        else
+            sprintf(str, "%d", ret);
+		shell_error(sid_factory_reset_work->shell, "sidewalk cli: sid start fail %s", str);
+	} else {
+		shell_info(sid_factory_reset_work->shell, "sidewalk cli: sid start");
+	}
+}
+
+static void cmd_deinit_work(struct k_work *item)
+{
+	struct sid_factory_reset_t *sid_factory_reset_work = CONTAINER_OF(item, struct sid_factory_reset_t, work);
+	sid_error_t ret = sid_deinit(sidewalk_handle);
+	if (SID_ERROR_NONE != ret) {
+		shell_error(sid_factory_reset_work->shell, "sidewalk cli: sid deinit fail %d", ret);
+	} else {
+		shell_info(sid_factory_reset_work->shell, "sidewalk cli: sid deinit");
+	}
+}
+
+static void cmd_gettime_work(struct k_work *item)
+{
+	struct sid_timespec curr_time;
+	struct sid_factory_reset_t *sid_factory_reset_work = CONTAINER_OF(item, struct sid_factory_reset_t, work);
+	sid_error_t ret = sid_get_time(sidewalk_handle, SID_GET_GPS_TIME, &curr_time);
+	if (SID_ERROR_NONE != ret) {
+		shell_error(sid_factory_reset_work->shell, "sidewalk cli: sid_get_time fail %d", ret);
+	} else {
+		shell_info(sid_factory_reset_work->shell, "sid time %u.%u", curr_time.tv_sec, curr_time.tv_nsec);
+	}
+}
+
+static int cmd_deinit(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&factory_reset_work.work) != 0) {
+		shell_error(
+			shell,
+			"Can not execute deinit command, previous command has not completed yet");
+		return CMD_RETURN_NOT_EXECUTED;
+	}
+
+	factory_reset_work.shell = shell;
+	k_work_init(&factory_reset_work.work, cmd_deinit_work);
+	k_work_submit_to_queue(&sid_api_work_q, &factory_reset_work.work);
+	return CMD_RETURN_OK;
+}
+
+static int cmd_init(const struct shell *shell, size_t argc, char **argv)
+{
+    app_event_send_sid_init();
+	return CMD_RETURN_OK;
+}
+
+static int cmd_stop(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&factory_reset_work.work) != 0) {
+		shell_error(
+			shell,
+			"Can not execute stop command, previous command has not completed yet");
+		return CMD_RETURN_NOT_EXECUTED;
+	}
+
+	factory_reset_work.shell = shell;
+	k_work_init(&factory_reset_work.work, cmd_stop_work);
+	k_work_submit_to_queue(&sid_api_work_q, &factory_reset_work.work);
+	return CMD_RETURN_OK;
+}
+
+static int cmd_start(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&factory_reset_work.work) != 0) {
+		shell_error(
+			shell,
+			"Can not execute start command, previous command has not completed yet");
+		return CMD_RETURN_NOT_EXECUTED;
+	}
+
+	factory_reset_work.shell = shell;
+	k_work_init(&factory_reset_work.work, cmd_start_work);
+	k_work_submit_to_queue(&sid_api_work_q, &factory_reset_work.work);
+	return CMD_RETURN_OK;
+}
+
+static int cmd_sid_get_time(const struct shell *shell, size_t argc, char **argv)
+{
+	if (k_work_busy_get(&factory_reset_work.work) != 0) {
+		shell_error(
+			shell,
+			"Can not execute deinit command, previous command has not completed yet");
+		return CMD_RETURN_NOT_EXECUTED;
+	}
+
+	factory_reset_work.shell = shell;
+	k_work_init(&factory_reset_work.work, cmd_gettime_work);
+	k_work_submit_to_queue(&sid_api_work_q, &factory_reset_work.work);
+	return CMD_RETURN_OK;
+}
+
+static int cmd_sid_sleep(const struct shell *shell, size_t argc, char **argv)
+{
+    app_event_send_sleep();
+	return CMD_RETURN_OK;
+}
+
+static int cmd_sid_standby(const struct shell *shell, size_t argc, char **argv)
+{
+    app_event_send_standby();
+	return CMD_RETURN_OK;
+}
+
 SHELL_STATIC_SUBCMD_SET_CREATE(
 	sub_button, SHELL_CMD_ARG(short, NULL, "{1,2,3,4}", cmd_button_press_short, 2, 0),
 	SHELL_CMD_ARG(long, NULL, "{1,2,3,4}", cmd_button_press_long, 2, 0), SHELL_SUBCMD_SET_END);
@@ -463,6 +618,13 @@
 		      cmd_print_version, 1, 1),
 	SHELL_CMD(factory_reset, NULL, "perform factory reset of Sidewalk application",
 		  cmd_factory_reset),
+	SHELL_CMD(deinit, NULL, "deinit sidewalk", cmd_deinit),
+	SHELL_CMD(init, NULL, "init sidewalk", cmd_init),
+	SHELL_CMD(stop, NULL, "deinit sidewalk", cmd_stop),
+	SHELL_CMD(start, NULL, "start sidewalk", cmd_start),
+	SHELL_CMD(time, NULL, "get sidewalk time", cmd_sid_get_time),
+	SHELL_CMD(sleep, NULL, "radio sleep", cmd_sid_sleep),
+	SHELL_CMD(stby, NULL, "radio standby", cmd_sid_standby),
 	SHELL_SUBCMD_SET_END);
 
 // command, subcommands, help, handler
diff -urN '--exclude=.git' '--exclude=build' '--exclude=test_lr1110' '--exclude=gnss_field_test' '--exclude=lr11xx_private' '--exclude=sx126x' '--exclude=lcd1602_template_subghz' '--exclude=wakeup_test' '--exclude=.github' '--exclude=check_swdr001' sidewalk/utils/src/sx126x_shell.c gitlab_sidewalk/utils/src/sx126x_shell.c
--- sidewalk/utils/src/sx126x_shell.c	1969-12-31 16:00:00.000000000 -0800
+++ gitlab_sidewalk/utils/src/sx126x_shell.c	2023-11-01 08:09:54.879151987 -0700
@@ -0,0 +1,28 @@
+#ifdef SX126x
+#include <stdio.h>
+#include "zephyr/sys/util.h"
+#include <zephyr/kernel.h>
+#include <zephyr/shell/shell.h>
+
+uint32_t CLI_sleep_to_full_power_us = 440;
+
+static int cmd_sx126x_sfp(const struct shell *shell, size_t argc, char **argv)
+{
+    if (argc == 2) {
+	    sscanf(argv[1], "%u", &CLI_sleep_to_full_power_us);
+    }
+    shell_info(shell, "SFP: %u", CLI_sleep_to_full_power_us);
+    return 0;
+}
+
+SHELL_STATIC_SUBCMD_SET_CREATE(
+	sub_services,
+    SHELL_CMD_ARG(sfp, NULL, "get/set sleep_to_full_power_us", cmd_sx126x_sfp, 1, 2),
+	SHELL_SUBCMD_SET_END);
+
+// command, subcommands, help, handler
+SHELL_CMD_REGISTER(sx126x, &sub_services, "SX126X testing CLI", NULL);
+
+#else
+#endif /* SX126x */
+
